
byggern_node_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000029c  00800100  000038e6  0000397a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  0080039c  0080039c  00003c16  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c16  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000388  00000000  00000000  00003c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f88  00000000  00000000  00003ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cdf  00000000  00000000  00005f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001114  00000000  00000000  00006c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bc8  00000000  00000000  00007d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b44  00000000  00000000  00008940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000179e  00000000  00000000  00009484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  0000ac22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_13>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <joystick_get_x_percentage+0x12>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 ee       	ldi	r30, 0xE6	; 230
     37c:	f8 e3       	ldi	r31, 0x38	; 56
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 39       	cpi	r26, 0x9C	; 156
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	ac e9       	ldi	r26, 0x9C	; 156
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a2 34       	cpi	r26, 0x42	; 66
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 2b 06 	call	0xc56	; 0xc56 <main>
     39e:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <setup_ADC>:
#include "setup.h"
#include "ADC.h"


void setup_ADC()
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	// Set PD2 as input
	clear_bit(DDRD,PD2);
     3ae:	81 e3       	ldi	r24, 0x31	; 49
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	21 e3       	ldi	r18, 0x31	; 49
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	f9 01       	movw	r30, r18
     3b8:	20 81       	ld	r18, Z
     3ba:	2b 7f       	andi	r18, 0xFB	; 251
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <read_ADC>:
	int x = 0x04 | channel;
	address[0] = x; // ch1 = 3, ch2 = 4....
}

uint8_t read_ADC(uint8_t channel)
{
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	00 d0       	rcall	.+0      	; 0x3cc <read_ADC+0x6>
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <read_ADC+0x8>
     3ce:	1f 92       	push	r1
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	8d 83       	std	Y+5, r24	; 0x05
	volatile char *address = (char *) 0x1400; // ADC address space 0x1400 ->
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	94 e1       	ldi	r25, 0x14	; 20
     3da:	9a 83       	std	Y+2, r25	; 0x02
     3dc:	89 83       	std	Y+1, r24	; 0x01
	
	if(channel > 3) return 0; // invalid channel
     3de:	8d 81       	ldd	r24, Y+5	; 0x05
     3e0:	84 30       	cpi	r24, 0x04	; 4
     3e2:	10 f0       	brcs	.+4      	; 0x3e8 <read_ADC+0x22>
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	1e c0       	rjmp	.+60     	; 0x424 <read_ADC+0x5e>
	int x = 0x04 | channel;
     3e8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ea:	84 60       	ori	r24, 0x04	; 4
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	9c 83       	std	Y+4, r25	; 0x04
     3f2:	8b 83       	std	Y+3, r24	; 0x03
	address[0] = x; // ch1 = 3, ch2 = 4....
     3f4:	2b 81       	ldd	r18, Y+3	; 0x03
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	9a 81       	ldd	r25, Y+2	; 0x02
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
	loop_until_bit_is_clear(PIND,PIND2); // Busy wait...
     3fe:	00 00       	nop
     400:	80 e3       	ldi	r24, 0x30	; 48
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	fc 01       	movw	r30, r24
     406:	80 81       	ld	r24, Z
     408:	88 2f       	mov	r24, r24
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	84 70       	andi	r24, 0x04	; 4
     40e:	99 27       	eor	r25, r25
     410:	00 97       	sbiw	r24, 0x00	; 0
     412:	b1 f7       	brne	.-20     	; 0x400 <read_ADC+0x3a>
	return address[x];
     414:	8b 81       	ldd	r24, Y+3	; 0x03
     416:	9c 81       	ldd	r25, Y+4	; 0x04
     418:	29 81       	ldd	r18, Y+1	; 0x01
     41a:	3a 81       	ldd	r19, Y+2	; 0x02
     41c:	82 0f       	add	r24, r18
     41e:	93 1f       	adc	r25, r19
     420:	fc 01       	movw	r30, r24
     422:	80 81       	ld	r24, Z
	
}
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <can_init>:
uint8_t message_received = 0;
uint8_t transmit_complete = 0;
uint8_t number_of_tries;
uint8_t allowed_tries = 5;

uint8_t can_init(){
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
	// Init can-controller
	mcp_2515_init();
     43c:	0e 94 9b 09 	call	0x1336	; 0x1336 <mcp_2515_init>

	// Mask/filter off, no rollover in receive buffer
	mcp_2515_bit_modify(MCP_RXB0CTRL, 0x64, 0x60);
     440:	40 e6       	ldi	r20, 0x60	; 96
     442:	64 e6       	ldi	r22, 0x64	; 100
     444:	80 e6       	ldi	r24, 0x60	; 96
     446:	0e 94 a9 0a 	call	0x1552	; 0x1552 <mcp_2515_bit_modify>
	
	// Interrupt enable when receive buffer 0 is full
	mcp_2515_bit_modify(MCP_CANINTE,0xFF,MCP_RX0IF);
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	6f ef       	ldi	r22, 0xFF	; 255
     44e:	8b e2       	ldi	r24, 0x2B	; 43
     450:	0e 94 a9 0a 	call	0x1552	; 0x1552 <mcp_2515_bit_modify>
	
	// Enable interrupt on INT1
	set_bit(GICR,INT1);
     454:	8b e5       	ldi	r24, 0x5B	; 91
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	2b e5       	ldi	r18, 0x5B	; 91
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	f9 01       	movw	r30, r18
     45e:	20 81       	ld	r18, Z
     460:	20 68       	ori	r18, 0x80	; 128
     462:	fc 01       	movw	r30, r24
     464:	20 83       	st	Z, r18
	// Interrupt on falling edge INT1
	set_bit(MCUCR,ISC11);
     466:	85 e5       	ldi	r24, 0x55	; 85
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	25 e5       	ldi	r18, 0x55	; 85
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	f9 01       	movw	r30, r18
     470:	20 81       	ld	r18, Z
     472:	28 60       	ori	r18, 0x08	; 8
     474:	fc 01       	movw	r30, r24
     476:	20 83       	st	Z, r18
	clear_bit(MCUCR,ISC10);
     478:	85 e5       	ldi	r24, 0x55	; 85
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	25 e5       	ldi	r18, 0x55	; 85
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	f9 01       	movw	r30, r18
     482:	20 81       	ld	r18, Z
     484:	2b 7f       	andi	r18, 0xFB	; 251
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
	
	return 0;
     48a:	80 e0       	ldi	r24, 0x00	; 0

}
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <CAN_enable_normal_mode>:
uint8_t CAN_enable_loopback() {
	return mcp_2515_enable_loopback();
}

// Enable normal operation for transmission between node 1 and node 2
uint8_t CAN_enable_normal_mode() {
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
	return mcp_2515_enable_normal_operation();
     49a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <mcp_2515_enable_normal_operation>
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <can_send_message>:
/************************************************************************/
/* BUILD AND SEND CAN MESSAGE                                                                     */
/************************************************************************/
uint8_t can_send_message(can_message *can_message){
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	27 97       	sbiw	r28, 0x07	; 7
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	9f 83       	std	Y+7, r25	; 0x07
     4ba:	8e 83       	std	Y+6, r24	; 0x06
	// Check if previous message was sent
	if (can_transmit_complete()) {
     4bc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <can_transmit_complete>
     4c0:	88 23       	and	r24, r24
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <can_send_message+0x22>
     4c4:	43 c0       	rjmp	.+134    	; 0x54c <__stack+0x4d>
		unsigned int id= can_message->ID;
     4c6:	8e 81       	ldd	r24, Y+6	; 0x06
     4c8:	9f 81       	ldd	r25, Y+7	; 0x07
     4ca:	fc 01       	movw	r30, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	91 81       	ldd	r25, Z+1	; 0x01
     4d0:	9b 83       	std	Y+3, r25	; 0x03
     4d2:	8a 83       	std	Y+2, r24	; 0x02

		
		uint8_t low_ID = id & 0xFF;
     4d4:	8a 81       	ldd	r24, Y+2	; 0x02
     4d6:	8c 83       	std	Y+4, r24	; 0x04
		low_ID = (low_ID << 5); // Lowest 5 bits not used in standard frame
     4d8:	8c 81       	ldd	r24, Y+4	; 0x04
     4da:	82 95       	swap	r24
     4dc:	88 0f       	add	r24, r24
     4de:	80 7e       	andi	r24, 0xE0	; 224
     4e0:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t high_ID = (id >> 8);
     4e2:	8a 81       	ldd	r24, Y+2	; 0x02
     4e4:	9b 81       	ldd	r25, Y+3	; 0x03
     4e6:	89 2f       	mov	r24, r25
     4e8:	99 27       	eor	r25, r25
     4ea:	8d 83       	std	Y+5, r24	; 0x05
		
		//writes the ID to the ID High and ID LOW
		mcp_2515_write(MCP_TXB0SIDH, high_ID);
     4ec:	6d 81       	ldd	r22, Y+5	; 0x05
     4ee:	81 e3       	ldi	r24, 0x31	; 49
     4f0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <mcp_2515_write>
		mcp_2515_write(MCP_TXB0SIDL, low_ID);
     4f4:	6c 81       	ldd	r22, Y+4	; 0x04
     4f6:	82 e3       	ldi	r24, 0x32	; 50
     4f8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <mcp_2515_write>
		
		mcp_2515_write(MCP_TXB0DLC, can_message->length);
     4fc:	8e 81       	ldd	r24, Y+6	; 0x06
     4fe:	9f 81       	ldd	r25, Y+7	; 0x07
     500:	fc 01       	movw	r30, r24
     502:	82 81       	ldd	r24, Z+2	; 0x02
     504:	68 2f       	mov	r22, r24
     506:	85 e3       	ldi	r24, 0x35	; 53
     508:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <mcp_2515_write>
		
		for(uint8_t i=0; i<can_message->length;i++){
     50c:	19 82       	std	Y+1, r1	; 0x01
     50e:	12 c0       	rjmp	.+36     	; 0x534 <__stack+0x35>
			mcp_2515_write(MCP_TXB0D+i, can_message->data[i]);
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	88 2f       	mov	r24, r24
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	2e 81       	ldd	r18, Y+6	; 0x06
     518:	3f 81       	ldd	r19, Y+7	; 0x07
     51a:	82 0f       	add	r24, r18
     51c:	93 1f       	adc	r25, r19
     51e:	03 96       	adiw	r24, 0x03	; 3
     520:	fc 01       	movw	r30, r24
     522:	90 81       	ld	r25, Z
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	8a 5c       	subi	r24, 0xCA	; 202
     528:	69 2f       	mov	r22, r25
     52a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <mcp_2515_write>
		mcp_2515_write(MCP_TXB0SIDH, high_ID);
		mcp_2515_write(MCP_TXB0SIDL, low_ID);
		
		mcp_2515_write(MCP_TXB0DLC, can_message->length);
		
		for(uint8_t i=0; i<can_message->length;i++){
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	8f 5f       	subi	r24, 0xFF	; 255
     532:	89 83       	std	Y+1, r24	; 0x01
     534:	8e 81       	ldd	r24, Y+6	; 0x06
     536:	9f 81       	ldd	r25, Y+7	; 0x07
     538:	fc 01       	movw	r30, r24
     53a:	92 81       	ldd	r25, Z+2	; 0x02
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	89 17       	cp	r24, r25
     540:	38 f3       	brcs	.-50     	; 0x510 <__stack+0x11>
			mcp_2515_write(MCP_TXB0D+i, can_message->data[i]);
		}
		
		mcp_2515_request_to_send(MCP_RTS_TX0);
     542:	81 e8       	ldi	r24, 0x81	; 129
     544:	0e 94 98 0a 	call	0x1530	; 0x1530 <mcp_2515_request_to_send>
		return 1; 
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	07 c0       	rjmp	.+14     	; 0x55a <__stack+0x5b>
	}
	
	else {
		if (can_error() > 0) {
     54c:	0e 94 2f 03 	call	0x65e	; 0x65e <can_error>
     550:	88 23       	and	r24, r24
     552:	11 f0       	breq	.+4      	; 0x558 <__stack+0x59>
			return -1;
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	01 c0       	rjmp	.+2      	; 0x55a <__stack+0x5b>
		}
	}

	return 0;
     558:	80 e0       	ldi	r24, 0x00	; 0
}
     55a:	27 96       	adiw	r28, 0x07	; 7
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <can_receive_message>:
/*************************************/
/* RECEIVE AND CONSTRUCT CAN MESSAGE */
/*************************************/

can_message* can_receive_message(can_message *the_message) {
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	00 d0       	rcall	.+0      	; 0x576 <can_receive_message+0xa>
     576:	00 d0       	rcall	.+0      	; 0x578 <can_receive_message+0xc>
     578:	00 d0       	rcall	.+0      	; 0x57a <can_receive_message+0xe>
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	9e 83       	std	Y+6, r25	; 0x06
     580:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int id;
	// Check if received flag was set
	if(message_received > 0) {
     582:	80 91 9c 03 	lds	r24, 0x039C
     586:	88 23       	and	r24, r24
     588:	09 f4       	brne	.+2      	; 0x58c <can_receive_message+0x20>
     58a:	4f c0       	rjmp	.+158    	; 0x62a <can_receive_message+0xbe>
		id = mcp_2515_read(MCP_RXB0SIDH) << 8 | mcp_2515_read(MCP_RXB0SIDL);
     58c:	81 e6       	ldi	r24, 0x61	; 97
     58e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <mcp_2515_read>
     592:	88 2f       	mov	r24, r24
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	18 2f       	mov	r17, r24
     598:	00 27       	eor	r16, r16
     59a:	82 e6       	ldi	r24, 0x62	; 98
     59c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <mcp_2515_read>
     5a0:	88 2f       	mov	r24, r24
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	80 2b       	or	r24, r16
     5a6:	91 2b       	or	r25, r17
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	8b 83       	std	Y+3, r24	; 0x03
		// Mask out lowest 5 bits (only used for extended frames)
		the_message->ID = (id >> 5);
     5ac:	8b 81       	ldd	r24, Y+3	; 0x03
     5ae:	9c 81       	ldd	r25, Y+4	; 0x04
     5b0:	9c 01       	movw	r18, r24
     5b2:	36 95       	lsr	r19
     5b4:	27 95       	ror	r18
     5b6:	32 95       	swap	r19
     5b8:	22 95       	swap	r18
     5ba:	2f 70       	andi	r18, 0x0F	; 15
     5bc:	23 27       	eor	r18, r19
     5be:	3f 70       	andi	r19, 0x0F	; 15
     5c0:	23 27       	eor	r18, r19
     5c2:	8d 81       	ldd	r24, Y+5	; 0x05
     5c4:	9e 81       	ldd	r25, Y+6	; 0x06
     5c6:	fc 01       	movw	r30, r24
     5c8:	31 83       	std	Z+1, r19	; 0x01
     5ca:	20 83       	st	Z, r18
		the_message->length = mcp_2515_read(MCP_RXB0DLC);
     5cc:	85 e6       	ldi	r24, 0x65	; 101
     5ce:	0e 94 66 0a 	call	0x14cc	; 0x14cc <mcp_2515_read>
     5d2:	28 2f       	mov	r18, r24
     5d4:	8d 81       	ldd	r24, Y+5	; 0x05
     5d6:	9e 81       	ldd	r25, Y+6	; 0x06
     5d8:	fc 01       	movw	r30, r24
     5da:	22 83       	std	Z+2, r18	; 0x02
		for(int i = 0; i < the_message->length; i++) {
     5dc:	1a 82       	std	Y+2, r1	; 0x02
     5de:	19 82       	std	Y+1, r1	; 0x01
     5e0:	13 c0       	rjmp	.+38     	; 0x608 <can_receive_message+0x9c>
			the_message->data[i] = mcp_2515_read(MCP_RXB0D+i);
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	8a 59       	subi	r24, 0x9A	; 154
     5e6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <mcp_2515_read>
     5ea:	48 2f       	mov	r20, r24
     5ec:	2d 81       	ldd	r18, Y+5	; 0x05
     5ee:	3e 81       	ldd	r19, Y+6	; 0x06
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	9a 81       	ldd	r25, Y+2	; 0x02
     5f4:	82 0f       	add	r24, r18
     5f6:	93 1f       	adc	r25, r19
     5f8:	03 96       	adiw	r24, 0x03	; 3
     5fa:	fc 01       	movw	r30, r24
     5fc:	40 83       	st	Z, r20
	if(message_received > 0) {
		id = mcp_2515_read(MCP_RXB0SIDH) << 8 | mcp_2515_read(MCP_RXB0SIDL);
		// Mask out lowest 5 bits (only used for extended frames)
		the_message->ID = (id >> 5);
		the_message->length = mcp_2515_read(MCP_RXB0DLC);
		for(int i = 0; i < the_message->length; i++) {
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	9a 83       	std	Y+2, r25	; 0x02
     606:	89 83       	std	Y+1, r24	; 0x01
     608:	8d 81       	ldd	r24, Y+5	; 0x05
     60a:	9e 81       	ldd	r25, Y+6	; 0x06
     60c:	fc 01       	movw	r30, r24
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	28 2f       	mov	r18, r24
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	9a 81       	ldd	r25, Y+2	; 0x02
     618:	82 17       	cp	r24, r18
     61a:	93 07       	cpc	r25, r19
     61c:	14 f3       	brlt	.-60     	; 0x5e2 <can_receive_message+0x76>
			the_message->data[i] = mcp_2515_read(MCP_RXB0D+i);
		}
		
		message_received --;
     61e:	80 91 9c 03 	lds	r24, 0x039C
     622:	81 50       	subi	r24, 0x01	; 1
     624:	80 93 9c 03 	sts	0x039C, r24
     628:	04 c0       	rjmp	.+8      	; 0x632 <can_receive_message+0xc6>
	}
	else {
		// No message in the buffer
		the_message->length = 0;
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	9e 81       	ldd	r25, Y+6	; 0x06
     62e:	fc 01       	movw	r30, r24
     630:	12 82       	std	Z+2, r1	; 0x02
	}
	return the_message;
     632:	8d 81       	ldd	r24, Y+5	; 0x05
     634:	9e 81       	ldd	r25, Y+6	; 0x06
	
}
     636:	26 96       	adiw	r28, 0x06	; 6
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <can_data_received>:

// Check if there is a pending message in the receive buffer
uint8_t can_data_received(){
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
	return message_received;
     654:	80 91 9c 03 	lds	r24, 0x039C
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <can_error>:
// Check error flags in the transmit buffer control register TXB0CTRL
uint8_t can_error(){
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	1f 92       	push	r1
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
	uint8_t error_flags = mcp_2515_read(MCP_TXB0CTRL);
     668:	80 e3       	ldi	r24, 0x30	; 48
     66a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <mcp_2515_read>
     66e:	89 83       	std	Y+1, r24	; 0x01
	if(test_bit(error_flags,5))
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	88 2f       	mov	r24, r24
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	80 72       	andi	r24, 0x20	; 32
     678:	99 27       	eor	r25, r25
     67a:	00 97       	sbiw	r24, 0x00	; 0
     67c:	31 f0       	breq	.+12     	; 0x68a <can_error+0x2c>
	{
		printf("Message lost arbitration\n");
     67e:	83 e1       	ldi	r24, 0x13	; 19
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 d7 18 	call	0x31ae	; 0x31ae <puts>
		return 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	20 c0       	rjmp	.+64     	; 0x6ca <can_error+0x6c>
	}
	if(test_bit(error_flags,4))
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	88 2f       	mov	r24, r24
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	80 71       	andi	r24, 0x10	; 16
     692:	99 27       	eor	r25, r25
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	31 f0       	breq	.+12     	; 0x6a4 <can_error+0x46>
	{
		printf("Transmission error detected\n");
     698:	8c e2       	ldi	r24, 0x2C	; 44
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 d7 18 	call	0x31ae	; 0x31ae <puts>
		return 2;
     6a0:	82 e0       	ldi	r24, 0x02	; 2
     6a2:	13 c0       	rjmp	.+38     	; 0x6ca <can_error+0x6c>
	}
	if(test_bit(error_flags,6))
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	80 74       	andi	r24, 0x40	; 64
     6ac:	99 27       	eor	r25, r25
     6ae:	00 97       	sbiw	r24, 0x00	; 0
     6b0:	59 f0       	breq	.+22     	; 0x6c8 <can_error+0x6a>
	{
		printf("Receive buffer overflow flag set\n");
     6b2:	88 e4       	ldi	r24, 0x48	; 72
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 d7 18 	call	0x31ae	; 0x31ae <puts>
		// reset receivebuffer overflow flag
		mcp_2515_bit_modify(MCP_EFLG,0x40,0x40);
     6ba:	40 e4       	ldi	r20, 0x40	; 64
     6bc:	60 e4       	ldi	r22, 0x40	; 64
     6be:	8d e2       	ldi	r24, 0x2D	; 45
     6c0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <mcp_2515_bit_modify>
		return 3;
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <can_error+0x6c>
	}
	return 0;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
}
     6ca:	0f 90       	pop	r0
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <can_transmit_complete>:

// Check if last message was transmitted
uint8_t can_transmit_complete(){
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
	if (test_bit(mcp_2515_read(MCP_TXB0CTRL),3)) {
     6da:	80 e3       	ldi	r24, 0x30	; 48
     6dc:	0e 94 66 0a 	call	0x14cc	; 0x14cc <mcp_2515_read>
     6e0:	88 2f       	mov	r24, r24
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	88 70       	andi	r24, 0x08	; 8
     6e6:	99 27       	eor	r25, r25
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	e1 f0       	breq	.+56     	; 0x724 <can_transmit_complete+0x52>
		printf("CAN transmit not complete\n");
     6ec:	89 e6       	ldi	r24, 0x69	; 105
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 d7 18 	call	0x31ae	; 0x31ae <puts>
		number_of_tries++;
     6f4:	80 91 a0 03 	lds	r24, 0x03A0
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 a0 03 	sts	0x03A0, r24
		// Abort transmission after 5 tries
		if(number_of_tries == allowed_tries) {
     6fe:	90 91 a0 03 	lds	r25, 0x03A0
     702:	80 91 0a 01 	lds	r24, 0x010A
     706:	98 17       	cp	r25, r24
     708:	59 f4       	brne	.+22     	; 0x720 <can_transmit_complete+0x4e>
			// Abort transmission
			mcp_2515_bit_modify(MCP_TXB0CTRL,8,0);
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	68 e0       	ldi	r22, 0x08	; 8
     70e:	80 e3       	ldi	r24, 0x30	; 48
     710:	0e 94 a9 0a 	call	0x1552	; 0x1552 <mcp_2515_bit_modify>
			printf("Reset transmission request\n");
     714:	83 e8       	ldi	r24, 0x83	; 131
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	0e 94 d7 18 	call	0x31ae	; 0x31ae <puts>
			number_of_tries = 0;
     71c:	10 92 a0 03 	sts	0x03A0, r1
		}
		return FALSE;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	01 c0       	rjmp	.+2      	; 0x726 <can_transmit_complete+0x54>
	}
	
	else return TRUE;
     724:	81 e0       	ldi	r24, 0x01	; 1
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <__vector_2>:


ISR(INT1_vect) {
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	00 90 5f 00 	lds	r0, 0x005F
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	1f 92       	push	r1
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t interrupt_code = mcp_2515_read(MCP_CANINTF);
     75a:	8c e2       	ldi	r24, 0x2C	; 44
     75c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <mcp_2515_read>
     760:	89 83       	std	Y+1, r24	; 0x01
	
	if((interrupt_code & RXB0_AND_TXB0_INTERRUPT) == RXB0_AND_TXB0_INTERRUPT) {
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	88 2f       	mov	r24, r24
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	85 70       	andi	r24, 0x05	; 5
     76a:	99 27       	eor	r25, r25
     76c:	85 30       	cpi	r24, 0x05	; 5
     76e:	91 05       	cpc	r25, r1
     770:	51 f4       	brne	.+20     	; 0x786 <__vector_2+0x5a>
		mcp_2515_bit_modify(MCP_CANINTF, MCP_TX0IF,0);
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	64 e0       	ldi	r22, 0x04	; 4
     776:	8c e2       	ldi	r24, 0x2C	; 44
     778:	0e 94 a9 0a 	call	0x1552	; 0x1552 <mcp_2515_bit_modify>
		mcp_2515_bit_modify(MCP_CANINTF, MCP_RX0IF,0);
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	8c e2       	ldi	r24, 0x2C	; 44
     782:	0e 94 a9 0a 	call	0x1552	; 0x1552 <mcp_2515_bit_modify>
	}
	
	if ((MERR_INTERRUPT & interrupt_code) == MERR_INTERRUPT) {
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	88 23       	and	r24, r24
     78a:	2c f4       	brge	.+10     	; 0x796 <__vector_2+0x6a>
		// Clear message error flag
		mcp_2515_bit_modify(MCP_CANINTF, MCP_MERRF,0);
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	60 e8       	ldi	r22, 0x80	; 128
     790:	8c e2       	ldi	r24, 0x2C	; 44
     792:	0e 94 a9 0a 	call	0x1552	; 0x1552 <mcp_2515_bit_modify>
	}
	mcp_2515_bit_modify(MCP_CANINTF, MCP_RX0IF,0);
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	8c e2       	ldi	r24, 0x2C	; 44
     79c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <mcp_2515_bit_modify>
	message_received ++;
     7a0:	80 91 9c 03 	lds	r24, 0x039C
     7a4:	8f 5f       	subi	r24, 0xFF	; 255
     7a6:	80 93 9c 03 	sts	0x039C, r24
	
}
     7aa:	0f 90       	pop	r0
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	ff 91       	pop	r31
     7b2:	ef 91       	pop	r30
     7b4:	bf 91       	pop	r27
     7b6:	af 91       	pop	r26
     7b8:	9f 91       	pop	r25
     7ba:	8f 91       	pop	r24
     7bc:	7f 91       	pop	r23
     7be:	6f 91       	pop	r22
     7c0:	5f 91       	pop	r21
     7c2:	4f 91       	pop	r20
     7c4:	3f 91       	pop	r19
     7c6:	2f 91       	pop	r18
     7c8:	0f 90       	pop	r0
     7ca:	00 92 5f 00 	sts	0x005F, r0
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <joystick_init>:
float offset_x;
float offset_y;


void joystick_init()
{
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
	// Set PB0-1 as input
	clear_bit(DDRB,PB0);
     7dc:	87 e3       	ldi	r24, 0x37	; 55
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	27 e3       	ldi	r18, 0x37	; 55
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	f9 01       	movw	r30, r18
     7e6:	20 81       	ld	r18, Z
     7e8:	2e 7f       	andi	r18, 0xFE	; 254
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18
	clear_bit(DDRB,PB1);
     7ee:	87 e3       	ldi	r24, 0x37	; 55
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	27 e3       	ldi	r18, 0x37	; 55
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	f9 01       	movw	r30, r18
     7f8:	20 81       	ld	r18, Z
     7fa:	2d 7f       	andi	r18, 0xFD	; 253
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 83       	st	Z, r18
	// Pull-up on PB2
	set_bit(PORTB,PB2);
     800:	88 e3       	ldi	r24, 0x38	; 56
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	28 e3       	ldi	r18, 0x38	; 56
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	f9 01       	movw	r30, r18
     80a:	20 81       	ld	r18, Z
     80c:	24 60       	ori	r18, 0x04	; 4
     80e:	fc 01       	movw	r30, r24
     810:	20 83       	st	Z, r18
	//Set PB2 as input
	clear_bit(DDRB,PB2);
     812:	87 e3       	ldi	r24, 0x37	; 55
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	27 e3       	ldi	r18, 0x37	; 55
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	f9 01       	movw	r30, r18
     81c:	20 81       	ld	r18, Z
     81e:	2b 7f       	andi	r18, 0xFB	; 251
     820:	fc 01       	movw	r30, r24
     822:	20 83       	st	Z, r18
	offset_x = offset_y = 0.0;
     824:	10 92 a5 03 	sts	0x03A5, r1
     828:	10 92 a6 03 	sts	0x03A6, r1
     82c:	10 92 a7 03 	sts	0x03A7, r1
     830:	10 92 a8 03 	sts	0x03A8, r1
     834:	80 91 a5 03 	lds	r24, 0x03A5
     838:	90 91 a6 03 	lds	r25, 0x03A6
     83c:	a0 91 a7 03 	lds	r26, 0x03A7
     840:	b0 91 a8 03 	lds	r27, 0x03A8
     844:	80 93 a1 03 	sts	0x03A1, r24
     848:	90 93 a2 03 	sts	0x03A2, r25
     84c:	a0 93 a3 03 	sts	0x03A3, r26
     850:	b0 93 a4 03 	sts	0x03A4, r27
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <read_joystick>:

void read_joystick(joyValues *joy)
{
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	00 d0       	rcall	.+0      	; 0x860 <read_joystick+0x6>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	9a 83       	std	Y+2, r25	; 0x02
     866:	89 83       	std	Y+1, r24	; 0x01
	//joyValues joystick;
	joy->x_percentage = joystick_get_x_percentage();
     868:	0e 94 98 05 	call	0xb30	; 0xb30 <joystick_get_x_percentage>
     86c:	dc 01       	movw	r26, r24
     86e:	cb 01       	movw	r24, r22
     870:	29 81       	ldd	r18, Y+1	; 0x01
     872:	3a 81       	ldd	r19, Y+2	; 0x02
     874:	f9 01       	movw	r30, r18
     876:	80 83       	st	Z, r24
     878:	91 83       	std	Z+1, r25	; 0x01
     87a:	a2 83       	std	Z+2, r26	; 0x02
     87c:	b3 83       	std	Z+3, r27	; 0x03
	joy->y_percentage = joystick_get_y_percentage();
     87e:	0e 94 ba 05 	call	0xb74	; 0xb74 <joystick_get_y_percentage>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	29 81       	ldd	r18, Y+1	; 0x01
     888:	3a 81       	ldd	r19, Y+2	; 0x02
     88a:	f9 01       	movw	r30, r18
     88c:	84 83       	std	Z+4, r24	; 0x04
     88e:	95 83       	std	Z+5, r25	; 0x05
     890:	a6 83       	std	Z+6, r26	; 0x06
     892:	b7 83       	std	Z+7, r27	; 0x07
	// If PB0 || PB1 =1, button is pressed
	if (test_bit(PINB,PB0)) joy->left_button = 1;
     894:	86 e3       	ldi	r24, 0x36	; 54
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	fc 01       	movw	r30, r24
     89a:	80 81       	ld	r24, Z
     89c:	88 2f       	mov	r24, r24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	81 70       	andi	r24, 0x01	; 1
     8a2:	99 27       	eor	r25, r25
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	41 f0       	breq	.+16     	; 0x8b8 <read_joystick+0x5e>
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	fc 01       	movw	r30, r24
     8b2:	31 87       	std	Z+9, r19	; 0x09
     8b4:	20 87       	std	Z+8, r18	; 0x08
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <read_joystick+0x68>
	else joy->left_button = 0;
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
     8bc:	fc 01       	movw	r30, r24
     8be:	11 86       	std	Z+9, r1	; 0x09
     8c0:	10 86       	std	Z+8, r1	; 0x08
	if (test_bit(PINB,PB1)) joy->right_button = 1;
     8c2:	86 e3       	ldi	r24, 0x36	; 54
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	fc 01       	movw	r30, r24
     8c8:	80 81       	ld	r24, Z
     8ca:	88 2f       	mov	r24, r24
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	82 70       	andi	r24, 0x02	; 2
     8d0:	99 27       	eor	r25, r25
     8d2:	00 97       	sbiw	r24, 0x00	; 0
     8d4:	41 f0       	breq	.+16     	; 0x8e6 <read_joystick+0x8c>
     8d6:	89 81       	ldd	r24, Y+1	; 0x01
     8d8:	9a 81       	ldd	r25, Y+2	; 0x02
     8da:	21 e0       	ldi	r18, 0x01	; 1
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	fc 01       	movw	r30, r24
     8e0:	33 87       	std	Z+11, r19	; 0x0b
     8e2:	22 87       	std	Z+10, r18	; 0x0a
     8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <read_joystick+0x96>
	else joy->right_button = 0;
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	fc 01       	movw	r30, r24
     8ec:	13 86       	std	Z+11, r1	; 0x0b
     8ee:	12 86       	std	Z+10, r1	; 0x0a
	
	// If PB2=0, button is pressed
	if (test_bit(PINB,PB2)) joy->joystick_button = 0;
     8f0:	86 e3       	ldi	r24, 0x36	; 54
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	fc 01       	movw	r30, r24
     8f6:	80 81       	ld	r24, Z
     8f8:	88 2f       	mov	r24, r24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	84 70       	andi	r24, 0x04	; 4
     8fe:	99 27       	eor	r25, r25
     900:	00 97       	sbiw	r24, 0x00	; 0
     902:	31 f0       	breq	.+12     	; 0x910 <read_joystick+0xb6>
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	9a 81       	ldd	r25, Y+2	; 0x02
     908:	fc 01       	movw	r30, r24
     90a:	15 86       	std	Z+13, r1	; 0x0d
     90c:	14 86       	std	Z+12, r1	; 0x0c
     90e:	07 c0       	rjmp	.+14     	; 0x91e <read_joystick+0xc4>
	else joy->joystick_button = 1;
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	9a 81       	ldd	r25, Y+2	; 0x02
     914:	21 e0       	ldi	r18, 0x01	; 1
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	fc 01       	movw	r30, r24
     91a:	35 87       	std	Z+13, r19	; 0x0d
     91c:	24 87       	std	Z+12, r18	; 0x0c
}
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <calibrate_joystick>:

// Read the joystick values when joystick is idle, use as offset
void calibrate_joystick()
{
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
	offset_x = convert_to_percentage(read_ADC(1));
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <read_ADC>
     936:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <convert_to_percentage>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	80 93 a1 03 	sts	0x03A1, r24
     942:	90 93 a2 03 	sts	0x03A2, r25
     946:	a0 93 a3 03 	sts	0x03A3, r26
     94a:	b0 93 a4 03 	sts	0x03A4, r27
	offset_y = convert_to_percentage(read_ADC(0));
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <read_ADC>
     954:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <convert_to_percentage>
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	80 93 a5 03 	sts	0x03A5, r24
     960:	90 93 a6 03 	sts	0x03A6, r25
     964:	a0 93 a7 03 	sts	0x03A7, r26
     968:	b0 93 a8 03 	sts	0x03A8, r27
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <joystick_getDirection>:

// Get the direction of the joystick
// Needs to be moved 50% to be registered as a direction, else neutral
direction joystick_getDirection(float x, float y)
{
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	29 97       	sbiw	r28, 0x09	; 9
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	6a 83       	std	Y+2, r22	; 0x02
     98a:	7b 83       	std	Y+3, r23	; 0x03
     98c:	8c 83       	std	Y+4, r24	; 0x04
     98e:	9d 83       	std	Y+5, r25	; 0x05
     990:	2e 83       	std	Y+6, r18	; 0x06
     992:	3f 83       	std	Y+7, r19	; 0x07
     994:	48 87       	std	Y+8, r20	; 0x08
     996:	59 87       	std	Y+9, r21	; 0x09
	direction d = NEUTRAL;
     998:	84 e0       	ldi	r24, 0x04	; 4
     99a:	89 83       	std	Y+1, r24	; 0x01
	if (!(fabsf(x)<50 && fabsf(y)<50)) 
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	9b 81       	ldd	r25, Y+3	; 0x03
     9a0:	ac 81       	ldd	r26, Y+4	; 0x04
     9a2:	bd 81       	ldd	r27, Y+5	; 0x05
     9a4:	bf 77       	andi	r27, 0x7F	; 127
     9a6:	11 e0       	ldi	r17, 0x01	; 1
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	48 e4       	ldi	r20, 0x48	; 72
     9ae:	52 e4       	ldi	r21, 0x42	; 66
     9b0:	bc 01       	movw	r22, r24
     9b2:	cd 01       	movw	r24, r26
     9b4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
     9b8:	88 23       	and	r24, r24
     9ba:	0c f0       	brlt	.+2      	; 0x9be <joystick_getDirection+0x4c>
     9bc:	10 e0       	ldi	r17, 0x00	; 0
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	81 27       	eor	r24, r17
     9c2:	88 23       	and	r24, r24
     9c4:	b1 f4       	brne	.+44     	; 0x9f2 <joystick_getDirection+0x80>
     9c6:	8e 81       	ldd	r24, Y+6	; 0x06
     9c8:	9f 81       	ldd	r25, Y+7	; 0x07
     9ca:	a8 85       	ldd	r26, Y+8	; 0x08
     9cc:	b9 85       	ldd	r27, Y+9	; 0x09
     9ce:	bf 77       	andi	r27, 0x7F	; 127
     9d0:	11 e0       	ldi	r17, 0x01	; 1
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	48 e4       	ldi	r20, 0x48	; 72
     9d8:	52 e4       	ldi	r21, 0x42	; 66
     9da:	bc 01       	movw	r22, r24
     9dc:	cd 01       	movw	r24, r26
     9de:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
     9e2:	88 23       	and	r24, r24
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <joystick_getDirection+0x76>
     9e6:	10 e0       	ldi	r17, 0x00	; 0
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	81 27       	eor	r24, r17
     9ec:	88 23       	and	r24, r24
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <joystick_getDirection+0x80>
     9f0:	94 c0       	rjmp	.+296    	; 0xb1a <joystick_getDirection+0x1a8>
	{
		if (fabsf(x)>50 && fabsf(y)<50)
     9f2:	8a 81       	ldd	r24, Y+2	; 0x02
     9f4:	9b 81       	ldd	r25, Y+3	; 0x03
     9f6:	ac 81       	ldd	r26, Y+4	; 0x04
     9f8:	bd 81       	ldd	r27, Y+5	; 0x05
     9fa:	bf 77       	andi	r27, 0x7F	; 127
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	48 e4       	ldi	r20, 0x48	; 72
     a02:	52 e4       	ldi	r21, 0x42	; 66
     a04:	bc 01       	movw	r22, r24
     a06:	cd 01       	movw	r24, r26
     a08:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__gesf2>
     a0c:	18 16       	cp	r1, r24
     a0e:	04 f5       	brge	.+64     	; 0xa50 <joystick_getDirection+0xde>
     a10:	8e 81       	ldd	r24, Y+6	; 0x06
     a12:	9f 81       	ldd	r25, Y+7	; 0x07
     a14:	a8 85       	ldd	r26, Y+8	; 0x08
     a16:	b9 85       	ldd	r27, Y+9	; 0x09
     a18:	bf 77       	andi	r27, 0x7F	; 127
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	48 e4       	ldi	r20, 0x48	; 72
     a20:	52 e4       	ldi	r21, 0x42	; 66
     a22:	bc 01       	movw	r22, r24
     a24:	cd 01       	movw	r24, r26
     a26:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
     a2a:	88 23       	and	r24, r24
     a2c:	8c f4       	brge	.+34     	; 0xa50 <joystick_getDirection+0xde>
		{
			if (x<0)
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	a9 01       	movw	r20, r18
     a34:	6a 81       	ldd	r22, Y+2	; 0x02
     a36:	7b 81       	ldd	r23, Y+3	; 0x03
     a38:	8c 81       	ldd	r24, Y+4	; 0x04
     a3a:	9d 81       	ldd	r25, Y+5	; 0x05
     a3c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
     a40:	88 23       	and	r24, r24
     a42:	1c f4       	brge	.+6      	; 0xa4a <joystick_getDirection+0xd8>
			{
				d = LEFT;
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	89 83       	std	Y+1, r24	; 0x01
	direction d = NEUTRAL;
	if (!(fabsf(x)<50 && fabsf(y)<50)) 
	{
		if (fabsf(x)>50 && fabsf(y)<50)
		{
			if (x<0)
     a48:	68 c0       	rjmp	.+208    	; 0xb1a <joystick_getDirection+0x1a8>
			{
				d = LEFT;
			}
			else
			{
				d = RIGHT;
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	89 83       	std	Y+1, r24	; 0x01
	direction d = NEUTRAL;
	if (!(fabsf(x)<50 && fabsf(y)<50)) 
	{
		if (fabsf(x)>50 && fabsf(y)<50)
		{
			if (x<0)
     a4e:	65 c0       	rjmp	.+202    	; 0xb1a <joystick_getDirection+0x1a8>
			else
			{
				d = RIGHT;
			}
		}
		else if(fabsf(x)<50 && fabsf(y)>50)
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	9b 81       	ldd	r25, Y+3	; 0x03
     a54:	ac 81       	ldd	r26, Y+4	; 0x04
     a56:	bd 81       	ldd	r27, Y+5	; 0x05
     a58:	bf 77       	andi	r27, 0x7F	; 127
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	48 e4       	ldi	r20, 0x48	; 72
     a60:	52 e4       	ldi	r21, 0x42	; 66
     a62:	bc 01       	movw	r22, r24
     a64:	cd 01       	movw	r24, r26
     a66:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
     a6a:	88 23       	and	r24, r24
     a6c:	fc f4       	brge	.+62     	; 0xaac <joystick_getDirection+0x13a>
     a6e:	8e 81       	ldd	r24, Y+6	; 0x06
     a70:	9f 81       	ldd	r25, Y+7	; 0x07
     a72:	a8 85       	ldd	r26, Y+8	; 0x08
     a74:	b9 85       	ldd	r27, Y+9	; 0x09
     a76:	bf 77       	andi	r27, 0x7F	; 127
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	48 e4       	ldi	r20, 0x48	; 72
     a7e:	52 e4       	ldi	r21, 0x42	; 66
     a80:	bc 01       	movw	r22, r24
     a82:	cd 01       	movw	r24, r26
     a84:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__gesf2>
     a88:	18 16       	cp	r1, r24
     a8a:	84 f4       	brge	.+32     	; 0xaac <joystick_getDirection+0x13a>
		{
			if (y<0)
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	a9 01       	movw	r20, r18
     a92:	6e 81       	ldd	r22, Y+6	; 0x06
     a94:	7f 81       	ldd	r23, Y+7	; 0x07
     a96:	88 85       	ldd	r24, Y+8	; 0x08
     a98:	99 85       	ldd	r25, Y+9	; 0x09
     a9a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
     a9e:	88 23       	and	r24, r24
     aa0:	1c f4       	brge	.+6      	; 0xaa8 <joystick_getDirection+0x136>
			{
				d = DOWN;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	89 83       	std	Y+1, r24	; 0x01
				d = RIGHT;
			}
		}
		else if(fabsf(x)<50 && fabsf(y)>50)
		{
			if (y<0)
     aa6:	39 c0       	rjmp	.+114    	; 0xb1a <joystick_getDirection+0x1a8>
			{
				d = DOWN;
			}
			else
			{
				d = UP;
     aa8:	19 82       	std	Y+1, r1	; 0x01
				d = RIGHT;
			}
		}
		else if(fabsf(x)<50 && fabsf(y)>50)
		{
			if (y<0)
     aaa:	37 c0       	rjmp	.+110    	; 0xb1a <joystick_getDirection+0x1a8>
				d = UP;
			}
		}
		else
		{
			if (fabsf(y/x)>1)
     aac:	2a 81       	ldd	r18, Y+2	; 0x02
     aae:	3b 81       	ldd	r19, Y+3	; 0x03
     ab0:	4c 81       	ldd	r20, Y+4	; 0x04
     ab2:	5d 81       	ldd	r21, Y+5	; 0x05
     ab4:	6e 81       	ldd	r22, Y+6	; 0x06
     ab6:	7f 81       	ldd	r23, Y+7	; 0x07
     ab8:	88 85       	ldd	r24, Y+8	; 0x08
     aba:	99 85       	ldd	r25, Y+9	; 0x09
     abc:	0e 94 01 15 	call	0x2a02	; 0x2a02 <__divsf3>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	bf 77       	andi	r27, 0x7F	; 127
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	40 e8       	ldi	r20, 0x80	; 128
     acc:	5f e3       	ldi	r21, 0x3F	; 63
     ace:	bc 01       	movw	r22, r24
     ad0:	cd 01       	movw	r24, r26
     ad2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__gesf2>
     ad6:	18 16       	cp	r1, r24
     ad8:	84 f4       	brge	.+32     	; 0xafa <joystick_getDirection+0x188>
			{
				if (y<0)
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	a9 01       	movw	r20, r18
     ae0:	6e 81       	ldd	r22, Y+6	; 0x06
     ae2:	7f 81       	ldd	r23, Y+7	; 0x07
     ae4:	88 85       	ldd	r24, Y+8	; 0x08
     ae6:	99 85       	ldd	r25, Y+9	; 0x09
     ae8:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
     aec:	88 23       	and	r24, r24
     aee:	1c f4       	brge	.+6      	; 0xaf6 <joystick_getDirection+0x184>
				{
					d = DOWN;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	89 83       	std	Y+1, r24	; 0x01
     af4:	12 c0       	rjmp	.+36     	; 0xb1a <joystick_getDirection+0x1a8>
				}
				else
				{
					d = UP;
     af6:	19 82       	std	Y+1, r1	; 0x01
     af8:	10 c0       	rjmp	.+32     	; 0xb1a <joystick_getDirection+0x1a8>
				}
			}
			else
			{
				if (x<0)
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	a9 01       	movw	r20, r18
     b00:	6a 81       	ldd	r22, Y+2	; 0x02
     b02:	7b 81       	ldd	r23, Y+3	; 0x03
     b04:	8c 81       	ldd	r24, Y+4	; 0x04
     b06:	9d 81       	ldd	r25, Y+5	; 0x05
     b08:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
     b0c:	88 23       	and	r24, r24
     b0e:	1c f4       	brge	.+6      	; 0xb16 <joystick_getDirection+0x1a4>
				{
					d = LEFT;
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	89 83       	std	Y+1, r24	; 0x01
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <joystick_getDirection+0x1a8>
				}
				else
				{
					d = RIGHT;
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return d;
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     b1c:	29 96       	adiw	r28, 0x09	; 9
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	de bf       	out	0x3e, r29	; 62
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	cd bf       	out	0x3d, r28	; 61
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	08 95       	ret

00000b30 <joystick_get_x_percentage>:

// Get Joystick x position in percentage (center = 0%)
float joystick_get_x_percentage()
{
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	1f 92       	push	r1
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = read_ADC(1);
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <read_ADC>
     b40:	89 83       	std	Y+1, r24	; 0x01
	return convert_to_percentage(data) - offset_x;
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <convert_to_percentage>
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	20 91 a1 03 	lds	r18, 0x03A1
     b50:	30 91 a2 03 	lds	r19, 0x03A2
     b54:	40 91 a3 03 	lds	r20, 0x03A3
     b58:	50 91 a4 03 	lds	r21, 0x03A4
     b5c:	bc 01       	movw	r22, r24
     b5e:	cd 01       	movw	r24, r26
     b60:	0e 94 98 14 	call	0x2930	; 0x2930 <__subsf3>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
} 
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	0f 90       	pop	r0
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <joystick_get_y_percentage>:

// Get Joystick y position in percentage (center = 0%)
float joystick_get_y_percentage()
{
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	1f 92       	push	r1
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = read_ADC(0);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <read_ADC>
     b84:	89 83       	std	Y+1, r24	; 0x01
	return convert_to_percentage(data) - offset_y;
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <convert_to_percentage>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	20 91 a5 03 	lds	r18, 0x03A5
     b94:	30 91 a6 03 	lds	r19, 0x03A6
     b98:	40 91 a7 03 	lds	r20, 0x03A7
     b9c:	50 91 a8 03 	lds	r21, 0x03A8
     ba0:	bc 01       	movw	r22, r24
     ba2:	cd 01       	movw	r24, r26
     ba4:	0e 94 98 14 	call	0x2930	; 0x2930 <__subsf3>
     ba8:	dc 01       	movw	r26, r24
     baa:	cb 01       	movw	r24, r22
}
     bac:	bc 01       	movw	r22, r24
     bae:	cd 01       	movw	r24, r26
     bb0:	0f 90       	pop	r0
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <joystick_get_right_slider>:
	uint8_t data = read_ADC(3);
	return convert_to_sliderpercentage(data);
}

uint8_t joystick_get_right_slider()
{
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	1f 92       	push	r1
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = read_ADC(3);
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <read_ADC>
     bc8:	89 83       	std	Y+1, r24	; 0x01
	return data;
     bca:	89 81       	ldd	r24, Y+1	; 0x01
}
     bcc:	0f 90       	pop	r0
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <convert_to_percentage>:
	return (value/255)*5;
}

// Convert digital value to percentage (0-255 -> -100% - 100%)
float convert_to_percentage(uint8_t digital_value)
{
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	00 d0       	rcall	.+0      	; 0xbda <convert_to_percentage+0x6>
     bda:	00 d0       	rcall	.+0      	; 0xbdc <convert_to_percentage+0x8>
     bdc:	1f 92       	push	r1
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	8d 83       	std	Y+5, r24	; 0x05
	float value = digital_value;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	bc 01       	movw	r22, r24
     bf0:	cd 01       	movw	r24, r26
     bf2:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__floatunsisf>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	89 83       	std	Y+1, r24	; 0x01
     bfc:	9a 83       	std	Y+2, r25	; 0x02
     bfe:	ab 83       	std	Y+3, r26	; 0x03
     c00:	bc 83       	std	Y+4, r27	; 0x04
	return ((value-128)/128)*100;
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	53 e4       	ldi	r21, 0x43	; 67
     c0a:	69 81       	ldd	r22, Y+1	; 0x01
     c0c:	7a 81       	ldd	r23, Y+2	; 0x02
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	0e 94 98 14 	call	0x2930	; 0x2930 <__subsf3>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	53 e4       	ldi	r21, 0x43	; 67
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 01 15 	call	0x2a02	; 0x2a02 <__divsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	48 ec       	ldi	r20, 0xC8	; 200
     c34:	52 e4       	ldi	r21, 0x42	; 66
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__mulsf3>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
}
     c42:	bc 01       	movw	r22, r24
     c44:	cd 01       	movw	r24, r26
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <main>:
uint8_t         counter;
int             time_seconds;
joyValues       j;

int main(void)
{
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
	initializations();
     c5e:	0e 94 a6 08 	call	0x114c	; 0x114c <initializations>
	menu_printed = 0;
     c62:	10 92 bd 03 	sts	0x03BD, r1
	while (TRUE)
	{
		sendmessage = malloc(sizeof(can_message));
     c66:	8b e0       	ldi	r24, 0x0B	; 11
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <malloc>
     c6e:	90 93 b8 03 	sts	0x03B8, r25
     c72:	80 93 b7 03 	sts	0x03B7, r24

		if(get_game_mode() == 0){
     c76:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <get_game_mode>
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	19 f4       	brne	.+6      	; 0xc84 <main+0x2e>
			mode_t = MENU;
     c7e:	10 92 9d 03 	sts	0x039D, r1
     c82:	36 c0       	rjmp	.+108    	; 0xcf0 <main+0x9a>
		}
		else if(get_game_mode() == 1){
     c84:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <get_game_mode>
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	91 05       	cpc	r25, r1
     c8c:	89 f5       	brne	.+98     	; 0xcf0 <main+0x9a>
			mode_t = PLAYING;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 9d 03 	sts	0x039D, r24
			if (!game_initialized)
     c94:	80 91 9e 03 	lds	r24, 0x039E
     c98:	88 23       	and	r24, r24
     c9a:	51 f5       	brne	.+84     	; 0xcf0 <main+0x9a>
			{
				menu_print_played_time(time_seconds);
     c9c:	80 91 c1 03 	lds	r24, 0x03C1
     ca0:	90 91 c2 03 	lds	r25, 0x03C2
     ca4:	0e 94 10 10 	call	0x2020	; 0x2020 <menu_print_played_time>
				enable_can_timer();
     ca8:	0e 94 34 09 	call	0x1268	; 0x1268 <enable_can_timer>
				// Send game start message to node 2
				sendmessage->ID = 2;
     cac:	80 91 b7 03 	lds	r24, 0x03B7
     cb0:	90 91 b8 03 	lds	r25, 0x03B8
     cb4:	22 e0       	ldi	r18, 0x02	; 2
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	fc 01       	movw	r30, r24
     cba:	31 83       	std	Z+1, r19	; 0x01
     cbc:	20 83       	st	Z, r18
				sendmessage->length = 1;
     cbe:	80 91 b7 03 	lds	r24, 0x03B7
     cc2:	90 91 b8 03 	lds	r25, 0x03B8
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	fc 01       	movw	r30, r24
     cca:	22 83       	std	Z+2, r18	; 0x02
				sendmessage->data[0] = 1;
     ccc:	80 91 b7 03 	lds	r24, 0x03B7
     cd0:	90 91 b8 03 	lds	r25, 0x03B8
     cd4:	21 e0       	ldi	r18, 0x01	; 1
     cd6:	fc 01       	movw	r30, r24
     cd8:	23 83       	std	Z+3, r18	; 0x03
				can_send_message(sendmessage);
     cda:	80 91 b7 03 	lds	r24, 0x03B7
     cde:	90 91 b8 03 	lds	r25, 0x03B8
     ce2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <can_send_message>
				game_initialized = TRUE;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	80 93 9e 03 	sts	0x039E, r24
				pause = FALSE;
     cec:	10 92 0d 01 	sts	0x010D, r1
			}
		}
		
		switch(mode_t){
     cf0:	80 91 9d 03 	lds	r24, 0x039D
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	21 f0       	breq	.+8      	; 0xd04 <main+0xae>
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	91 05       	cpc	r25, r1
     d00:	21 f0       	breq	.+8      	; 0xd0a <main+0xb4>
     d02:	06 c0       	rjmp	.+12     	; 0xd10 <main+0xba>
			case MENU:
			in_menus();
     d04:	0e 94 8f 06 	call	0xd1e	; 0xd1e <in_menus>
			break;
     d08:	03 c0       	rjmp	.+6      	; 0xd10 <main+0xba>
			
			case PLAYING:
			playing_the_game();
     d0a:	0e 94 f1 06 	call	0xde2	; 0xde2 <playing_the_game>
			break;
     d0e:	00 00       	nop
		}
		free(sendmessage);
     d10:	80 91 b7 03 	lds	r24, 0x03B7
     d14:	90 91 b8 03 	lds	r25, 0x03B8
     d18:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <free>
	}
     d1c:	a4 cf       	rjmp	.-184    	; 0xc66 <main+0x10>

00000d1e <in_menus>:
	
	return 0;
}

void in_menus(){
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	00 d0       	rcall	.+0      	; 0xd24 <in_menus+0x6>
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
	if (menu_printed == 0)
     d28:	80 91 bd 03 	lds	r24, 0x03BD
     d2c:	88 23       	and	r24, r24
     d2e:	49 f4       	brne	.+18     	; 0xd42 <in_menus+0x24>
	{
		print_menu(main_menu);
     d30:	80 91 be 03 	lds	r24, 0x03BE
     d34:	90 91 bf 03 	lds	r25, 0x03BF
     d38:	0e 94 25 0c 	call	0x184a	; 0x184a <print_menu>
		menu_printed = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	80 93 bd 03 	sts	0x03BD, r24
	}
	direction i = NEUTRAL;
     d42:	84 e0       	ldi	r24, 0x04	; 4
     d44:	89 83       	std	Y+1, r24	; 0x01
	read_joystick(&j);
     d46:	89 ea       	ldi	r24, 0xA9	; 169
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	0e 94 2d 04 	call	0x85a	; 0x85a <read_joystick>
	direction d = joystick_getDirection(j.x_percentage,j.y_percentage);
     d4e:	20 91 ad 03 	lds	r18, 0x03AD
     d52:	30 91 ae 03 	lds	r19, 0x03AE
     d56:	40 91 af 03 	lds	r20, 0x03AF
     d5a:	50 91 b0 03 	lds	r21, 0x03B0
     d5e:	80 91 a9 03 	lds	r24, 0x03A9
     d62:	90 91 aa 03 	lds	r25, 0x03AA
     d66:	a0 91 ab 03 	lds	r26, 0x03AB
     d6a:	b0 91 ac 03 	lds	r27, 0x03AC
     d6e:	bc 01       	movw	r22, r24
     d70:	cd 01       	movw	r24, r26
     d72:	0e 94 b9 04 	call	0x972	; 0x972 <joystick_getDirection>
     d76:	8a 83       	std	Y+2, r24	; 0x02
	arrow_line = move_arrow(d,arrow_line);
     d78:	80 91 0b 01 	lds	r24, 0x010B
     d7c:	68 2f       	mov	r22, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	0e 94 be 0b 	call	0x177c	; 0x177c <move_arrow>
     d84:	80 93 0b 01 	sts	0x010B, r24
	// Register button on rising edge
	if(j.joystick_button == previous_joystick_button){
     d88:	20 91 b5 03 	lds	r18, 0x03B5
     d8c:	30 91 b6 03 	lds	r19, 0x03B6
     d90:	80 91 bc 03 	lds	r24, 0x03BC
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	28 17       	cp	r18, r24
     d9a:	39 07       	cpc	r19, r25
     d9c:	29 f4       	brne	.+10     	; 0xda8 <in_menus+0x8a>
		j.joystick_button = 0;
     d9e:	10 92 b6 03 	sts	0x03B6, r1
     da2:	10 92 b5 03 	sts	0x03B5, r1
     da6:	02 c0       	rjmp	.+4      	; 0xdac <in_menus+0x8e>
	}	
	else{
		previous_joystick_button = 0;
     da8:	10 92 bc 03 	sts	0x03BC, r1
	}
	if (j.joystick_button == 1) {
     dac:	80 91 b5 03 	lds	r24, 0x03B5
     db0:	90 91 b6 03 	lds	r25, 0x03B6
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	79 f4       	brne	.+30     	; 0xdd8 <in_menus+0xba>
		mode_t = button_action(arrow_line);
     dba:	80 91 0b 01 	lds	r24, 0x010B
     dbe:	0e 94 b4 0c 	call	0x1968	; 0x1968 <button_action>
     dc2:	80 93 9d 03 	sts	0x039D, r24
		previous_joystick_button = j.joystick_button;
     dc6:	80 91 b5 03 	lds	r24, 0x03B5
     dca:	90 91 b6 03 	lds	r25, 0x03B6
     dce:	80 93 bc 03 	sts	0x03BC, r24
		arrow_line = 2;
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	80 93 0b 01 	sts	0x010B, r24
	}
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <playing_the_game>:


void playing_the_game(){
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	00 d0       	rcall	.+0      	; 0xde8 <playing_the_game+0x6>
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	send_joystick_data();
     dec:	0e 94 04 08 	call	0x1008	; 0x1008 <send_joystick_data>
	
	if(can_data_received() > 0) {
     df0:	0e 94 26 03 	call	0x64c	; 0x64c <can_data_received>
     df4:	88 23       	and	r24, r24
     df6:	09 f4       	brne	.+2      	; 0xdfa <playing_the_game+0x18>
     df8:	5d c0       	rjmp	.+186    	; 0xeb4 <playing_the_game+0xd2>
		// Receive the message
		can_message* receivemessage = malloc(sizeof(can_message));
     dfa:	8b e0       	ldi	r24, 0x0B	; 11
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <malloc>
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
		can_receive_message(receivemessage);
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	0e 94 b6 02 	call	0x56c	; 0x56c <can_receive_message>
		if(receivemessage->ID == 3) {
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	fc 01       	movw	r30, r24
     e14:	80 81       	ld	r24, Z
     e16:	91 81       	ldd	r25, Z+1	; 0x01
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	91 05       	cpc	r25, r1
     e1c:	09 f0       	breq	.+2      	; 0xe20 <playing_the_game+0x3e>
     e1e:	42 c0       	rjmp	.+132    	; 0xea4 <playing_the_game+0xc2>
			// Message ID = 3 -> Loss of point in game
			lives--;
     e20:	80 91 0c 01 	lds	r24, 0x010C
     e24:	81 50       	subi	r24, 0x01	; 1
     e26:	80 93 0c 01 	sts	0x010C, r24
			menu_playing(lives);
     e2a:	80 91 0c 01 	lds	r24, 0x010C
     e2e:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <menu_playing>
			menu_print_played_time(time_seconds);
     e32:	80 91 c1 03 	lds	r24, 0x03C1
     e36:	90 91 c2 03 	lds	r25, 0x03C2
     e3a:	0e 94 10 10 	call	0x2020	; 0x2020 <menu_print_played_time>
			// Receive played time
			score.byte_value[0] = receivemessage -> data[0];
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	9a 81       	ldd	r25, Y+2	; 0x02
     e42:	fc 01       	movw	r30, r24
     e44:	83 81       	ldd	r24, Z+3	; 0x03
     e46:	80 93 b9 03 	sts	0x03B9, r24
			score.byte_value[1] = receivemessage -> data[1];
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	fc 01       	movw	r30, r24
     e50:	84 81       	ldd	r24, Z+4	; 0x04
     e52:	80 93 ba 03 	sts	0x03BA, r24
			// Update high score list with new score (if new highscore)
			set_high_score_list(score.int_value);
     e56:	80 91 b9 03 	lds	r24, 0x03B9
     e5a:	90 91 ba 03 	lds	r25, 0x03BA
     e5e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <set_high_score_list>
			// Send message back informing node 2 that we're not playing anymore
			sendmessage->ID = 2;
     e62:	80 91 b7 03 	lds	r24, 0x03B7
     e66:	90 91 b8 03 	lds	r25, 0x03B8
     e6a:	22 e0       	ldi	r18, 0x02	; 2
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	fc 01       	movw	r30, r24
     e70:	31 83       	std	Z+1, r19	; 0x01
     e72:	20 83       	st	Z, r18
			sendmessage->length = 1;
     e74:	80 91 b7 03 	lds	r24, 0x03B7
     e78:	90 91 b8 03 	lds	r25, 0x03B8
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	fc 01       	movw	r30, r24
     e80:	22 83       	std	Z+2, r18	; 0x02
			sendmessage->data[0] = 0;
     e82:	80 91 b7 03 	lds	r24, 0x03B7
     e86:	90 91 b8 03 	lds	r25, 0x03B8
     e8a:	fc 01       	movw	r30, r24
     e8c:	13 82       	std	Z+3, r1	; 0x03
			can_send_message(sendmessage);
     e8e:	80 91 b7 03 	lds	r24, 0x03B7
     e92:	90 91 b8 03 	lds	r25, 0x03B8
     e96:	0e 94 52 02 	call	0x4a4	; 0x4a4 <can_send_message>
			pause = TRUE;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 0d 01 	sts	0x010D, r24
			// Disable the timer interrupt for sending joystick data while paused
			disable_can_timer();
     ea0:	0e 94 44 09 	call	0x1288	; 0x1288 <disable_can_timer>
		}

		printf("\n");
     ea4:	8a e0       	ldi	r24, 0x0A	; 10
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <putchar>
		free(receivemessage);
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <free>
	}
	
	// Exit game if right button is pressed
	if(j.right_button == 1){
     eb4:	80 91 b3 03 	lds	r24, 0x03B3
     eb8:	90 91 b4 03 	lds	r25, 0x03B4
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	a1 f5       	brne	.+104    	; 0xf2a <playing_the_game+0x148>
		disable_can_timer();
     ec2:	0e 94 44 09 	call	0x1288	; 0x1288 <disable_can_timer>
		menu_reset_played_time();
     ec6:	0e 94 34 10 	call	0x2068	; 0x2068 <menu_reset_played_time>
		time_seconds = 0;
     eca:	10 92 c2 03 	sts	0x03C2, r1
     ece:	10 92 c1 03 	sts	0x03C1, r1
		// Tell node 2 to stop the game
		sendmessage->ID = 2;
     ed2:	80 91 b7 03 	lds	r24, 0x03B7
     ed6:	90 91 b8 03 	lds	r25, 0x03B8
     eda:	22 e0       	ldi	r18, 0x02	; 2
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	fc 01       	movw	r30, r24
     ee0:	31 83       	std	Z+1, r19	; 0x01
     ee2:	20 83       	st	Z, r18
		sendmessage->length = 1;
     ee4:	80 91 b7 03 	lds	r24, 0x03B7
     ee8:	90 91 b8 03 	lds	r25, 0x03B8
     eec:	21 e0       	ldi	r18, 0x01	; 1
     eee:	fc 01       	movw	r30, r24
     ef0:	22 83       	std	Z+2, r18	; 0x02
		sendmessage->data[0] = 0;
     ef2:	80 91 b7 03 	lds	r24, 0x03B7
     ef6:	90 91 b8 03 	lds	r25, 0x03B8
     efa:	fc 01       	movw	r30, r24
     efc:	13 82       	std	Z+3, r1	; 0x03
		can_send_message(sendmessage);
     efe:	80 91 b7 03 	lds	r24, 0x03B7
     f02:	90 91 b8 03 	lds	r25, 0x03B8
     f06:	0e 94 52 02 	call	0x4a4	; 0x4a4 <can_send_message>
		restart_game_mode();
     f0a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <restart_game_mode>
		game_initialized = FALSE;
     f0e:	10 92 9e 03 	sts	0x039E, r1
		mode_t = MENU;
     f12:	10 92 9d 03 	sts	0x039D, r1
		arrow_line=2;
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	80 93 0b 01 	sts	0x010B, r24
		lives = 3;
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	80 93 0c 01 	sts	0x010C, r24
		button_action(arrow_line);
     f22:	80 91 0b 01 	lds	r24, 0x010B
     f26:	0e 94 b4 0c 	call	0x1968	; 0x1968 <button_action>
	}
	// Start again with joystick button
	if(j.joystick_button == 1 && pause)
     f2a:	80 91 b5 03 	lds	r24, 0x03B5
     f2e:	90 91 b6 03 	lds	r25, 0x03B6
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	61 f5       	brne	.+88     	; 0xf90 <playing_the_game+0x1ae>
     f38:	80 91 0d 01 	lds	r24, 0x010D
     f3c:	88 23       	and	r24, r24
     f3e:	41 f1       	breq	.+80     	; 0xf90 <playing_the_game+0x1ae>
	{
		enable_can_timer();
     f40:	0e 94 34 09 	call	0x1268	; 0x1268 <enable_can_timer>
		menu_reset_played_time();
     f44:	0e 94 34 10 	call	0x2068	; 0x2068 <menu_reset_played_time>
		time_seconds = 0;
     f48:	10 92 c2 03 	sts	0x03C2, r1
     f4c:	10 92 c1 03 	sts	0x03C1, r1
		sendmessage->ID = 2;
     f50:	80 91 b7 03 	lds	r24, 0x03B7
     f54:	90 91 b8 03 	lds	r25, 0x03B8
     f58:	22 e0       	ldi	r18, 0x02	; 2
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	fc 01       	movw	r30, r24
     f5e:	31 83       	std	Z+1, r19	; 0x01
     f60:	20 83       	st	Z, r18
		sendmessage->length = 1;
     f62:	80 91 b7 03 	lds	r24, 0x03B7
     f66:	90 91 b8 03 	lds	r25, 0x03B8
     f6a:	21 e0       	ldi	r18, 0x01	; 1
     f6c:	fc 01       	movw	r30, r24
     f6e:	22 83       	std	Z+2, r18	; 0x02
		sendmessage->data[0] = 1;
     f70:	80 91 b7 03 	lds	r24, 0x03B7
     f74:	90 91 b8 03 	lds	r25, 0x03B8
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	fc 01       	movw	r30, r24
     f7c:	23 83       	std	Z+3, r18	; 0x03
		can_send_message(sendmessage);
     f7e:	80 91 b7 03 	lds	r24, 0x03B7
     f82:	90 91 b8 03 	lds	r25, 0x03B8
     f86:	0e 94 52 02 	call	0x4a4	; 0x4a4 <can_send_message>
		pause = FALSE;
     f8a:	10 92 0d 01 	sts	0x010D, r1
     f8e:	37 c0       	rjmp	.+110    	; 0xffe <playing_the_game+0x21c>
		
	}
	else if (lives == 0) // Out of lives, game lost
     f90:	80 91 0c 01 	lds	r24, 0x010C
     f94:	88 23       	and	r24, r24
     f96:	99 f5       	brne	.+102    	; 0xffe <playing_the_game+0x21c>
	{
		disable_can_timer();
     f98:	0e 94 44 09 	call	0x1288	; 0x1288 <disable_can_timer>
		sendmessage->ID = 2;
     f9c:	80 91 b7 03 	lds	r24, 0x03B7
     fa0:	90 91 b8 03 	lds	r25, 0x03B8
     fa4:	22 e0       	ldi	r18, 0x02	; 2
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	fc 01       	movw	r30, r24
     faa:	31 83       	std	Z+1, r19	; 0x01
     fac:	20 83       	st	Z, r18
		sendmessage->length = 1;
     fae:	80 91 b7 03 	lds	r24, 0x03B7
     fb2:	90 91 b8 03 	lds	r25, 0x03B8
     fb6:	21 e0       	ldi	r18, 0x01	; 1
     fb8:	fc 01       	movw	r30, r24
     fba:	22 83       	std	Z+2, r18	; 0x02
		sendmessage->data[0] = 0;
     fbc:	80 91 b7 03 	lds	r24, 0x03B7
     fc0:	90 91 b8 03 	lds	r25, 0x03B8
     fc4:	fc 01       	movw	r30, r24
     fc6:	13 82       	std	Z+3, r1	; 0x03
		can_send_message(sendmessage);
     fc8:	80 91 b7 03 	lds	r24, 0x03B7
     fcc:	90 91 b8 03 	lds	r25, 0x03B8
     fd0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <can_send_message>
		game_initialized = FALSE;
     fd4:	10 92 9e 03 	sts	0x039E, r1
		restart_game_mode();
     fd8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <restart_game_mode>
		mode_t = MENU;
     fdc:	10 92 9d 03 	sts	0x039D, r1
		lives = 3;
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	80 93 0c 01 	sts	0x010C, r24
		time_seconds = 0;
     fe6:	10 92 c2 03 	sts	0x03C2, r1
     fea:	10 92 c1 03 	sts	0x03C1, r1
		menu_reset_played_time();
     fee:	0e 94 34 10 	call	0x2068	; 0x2068 <menu_reset_played_time>
		button_action(2); //Go to main menu
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <button_action>
		navigateMenu(3); //Go to highscore
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <navigateMenu>
	}
}
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <send_joystick_data>:

/*
* Read ADC, send joystick data to node 2
*/
uint8_t send_joystick_data() {
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	00 d0       	rcall	.+0      	; 0x100e <send_joystick_data+0x6>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <send_joystick_data+0x8>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <send_joystick_data+0xa>
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	// If flag is set by timer
	if (can_flag)
    1016:	80 91 c0 03 	lds	r24, 0x03C0
    101a:	88 23       	and	r24, r24
    101c:	09 f4       	brne	.+2      	; 0x1020 <send_joystick_data+0x18>
    101e:	8d c0       	rjmp	.+282    	; 0x113a <send_joystick_data+0x132>
	{
		read_joystick(&j);
    1020:	89 ea       	ldi	r24, 0xA9	; 169
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	0e 94 2d 04 	call	0x85a	; 0x85a <read_joystick>
		int_union_bytes x_axis;
		int_union_bytes y_axis;
		uint8_t dir = (uint8_t) joystick_getDirection(j.x_percentage,j.y_percentage);
    1028:	20 91 ad 03 	lds	r18, 0x03AD
    102c:	30 91 ae 03 	lds	r19, 0x03AE
    1030:	40 91 af 03 	lds	r20, 0x03AF
    1034:	50 91 b0 03 	lds	r21, 0x03B0
    1038:	80 91 a9 03 	lds	r24, 0x03A9
    103c:	90 91 aa 03 	lds	r25, 0x03AA
    1040:	a0 91 ab 03 	lds	r26, 0x03AB
    1044:	b0 91 ac 03 	lds	r27, 0x03AC
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	0e 94 b9 04 	call	0x972	; 0x972 <joystick_getDirection>
    1050:	89 83       	std	Y+1, r24	; 0x01
		x_axis.int_value = (int) j.x_percentage;
    1052:	80 91 a9 03 	lds	r24, 0x03A9
    1056:	90 91 aa 03 	lds	r25, 0x03AA
    105a:	a0 91 ab 03 	lds	r26, 0x03AB
    105e:	b0 91 ac 03 	lds	r27, 0x03AC
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__fixsfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
		y_axis.int_value = (int) j.y_percentage;
    1072:	80 91 ad 03 	lds	r24, 0x03AD
    1076:	90 91 ae 03 	lds	r25, 0x03AE
    107a:	a0 91 af 03 	lds	r26, 0x03AF
    107e:	b0 91 b0 03 	lds	r27, 0x03B0
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__fixsfsi>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	8d 83       	std	Y+5, r24	; 0x05
		uint8_t slider = joystick_get_right_slider();
    1092:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <joystick_get_right_slider>
    1096:	8a 83       	std	Y+2, r24	; 0x02
		sendmessage->ID = 1;
    1098:	80 91 b7 03 	lds	r24, 0x03B7
    109c:	90 91 b8 03 	lds	r25, 0x03B8
    10a0:	21 e0       	ldi	r18, 0x01	; 1
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	fc 01       	movw	r30, r24
    10a6:	31 83       	std	Z+1, r19	; 0x01
    10a8:	20 83       	st	Z, r18
		sendmessage->length=7;
    10aa:	80 91 b7 03 	lds	r24, 0x03B7
    10ae:	90 91 b8 03 	lds	r25, 0x03B8
    10b2:	27 e0       	ldi	r18, 0x07	; 7
    10b4:	fc 01       	movw	r30, r24
    10b6:	22 83       	std	Z+2, r18	; 0x02

		sendmessage->data[0] = j.left_button;
    10b8:	80 91 b7 03 	lds	r24, 0x03B7
    10bc:	90 91 b8 03 	lds	r25, 0x03B8
    10c0:	20 91 b1 03 	lds	r18, 0x03B1
    10c4:	30 91 b2 03 	lds	r19, 0x03B2
    10c8:	fc 01       	movw	r30, r24
    10ca:	23 83       	std	Z+3, r18	; 0x03
		sendmessage->data[1] = j.right_button;
    10cc:	80 91 b7 03 	lds	r24, 0x03B7
    10d0:	90 91 b8 03 	lds	r25, 0x03B8
    10d4:	20 91 b3 03 	lds	r18, 0x03B3
    10d8:	30 91 b4 03 	lds	r19, 0x03B4
    10dc:	fc 01       	movw	r30, r24
    10de:	24 83       	std	Z+4, r18	; 0x04
		sendmessage->data[2] = j.joystick_button;
    10e0:	80 91 b7 03 	lds	r24, 0x03B7
    10e4:	90 91 b8 03 	lds	r25, 0x03B8
    10e8:	20 91 b5 03 	lds	r18, 0x03B5
    10ec:	30 91 b6 03 	lds	r19, 0x03B6
    10f0:	fc 01       	movw	r30, r24
    10f2:	25 83       	std	Z+5, r18	; 0x05
		sendmessage->data[3] = dir;
    10f4:	80 91 b7 03 	lds	r24, 0x03B7
    10f8:	90 91 b8 03 	lds	r25, 0x03B8
    10fc:	29 81       	ldd	r18, Y+1	; 0x01
    10fe:	fc 01       	movw	r30, r24
    1100:	26 83       	std	Z+6, r18	; 0x06
		sendmessage->data[4] = x_axis.byte_value[0];
    1102:	80 91 b7 03 	lds	r24, 0x03B7
    1106:	90 91 b8 03 	lds	r25, 0x03B8
    110a:	2b 81       	ldd	r18, Y+3	; 0x03
    110c:	fc 01       	movw	r30, r24
    110e:	27 83       	std	Z+7, r18	; 0x07
		sendmessage->data[5] = x_axis.byte_value[1];
    1110:	80 91 b7 03 	lds	r24, 0x03B7
    1114:	90 91 b8 03 	lds	r25, 0x03B8
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	fc 01       	movw	r30, r24
    111c:	20 87       	std	Z+8, r18	; 0x08
		sendmessage->data[6] = slider;
    111e:	80 91 b7 03 	lds	r24, 0x03B7
    1122:	90 91 b8 03 	lds	r25, 0x03B8
    1126:	2a 81       	ldd	r18, Y+2	; 0x02
    1128:	fc 01       	movw	r30, r24
    112a:	21 87       	std	Z+9, r18	; 0x09
		return can_send_message(sendmessage);
    112c:	80 91 b7 03 	lds	r24, 0x03B7
    1130:	90 91 b8 03 	lds	r25, 0x03B8
    1134:	0e 94 52 02 	call	0x4a4	; 0x4a4 <can_send_message>
    1138:	00 c0       	rjmp	.+0      	; 0x113a <send_joystick_data+0x132>
		can_flag = FALSE;
	}

	
}
    113a:	26 96       	adiw	r28, 0x06	; 6
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <initializations>:


void initializations(){
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	00 d0       	rcall	.+0      	; 0x1152 <initializations+0x6>
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	// Enable external memory
	set_bit(MCUCR,SRE);
    1156:	85 e5       	ldi	r24, 0x55	; 85
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	25 e5       	ldi	r18, 0x55	; 85
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	f9 01       	movw	r30, r18
    1160:	20 81       	ld	r18, Z
    1162:	20 68       	ori	r18, 0x80	; 128
    1164:	fc 01       	movw	r30, r24
    1166:	20 83       	st	Z, r18
	// Mask PC7-PC4
	set_bit(SFIOR,XMM2);
    1168:	80 e5       	ldi	r24, 0x50	; 80
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	20 e5       	ldi	r18, 0x50	; 80
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	f9 01       	movw	r30, r18
    1172:	20 81       	ld	r18, Z
    1174:	20 62       	ori	r18, 0x20	; 32
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
	int baud = (int) MYUBRR;
    117a:	8f e1       	ldi	r24, 0x1F	; 31
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
	USART_Init(baud);
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	0e 94 31 14 	call	0x2862	; 0x2862 <USART_Init>
	sram_setup();
    118a:	0e 94 4d 13 	call	0x269a	; 0x269a <sram_setup>
	SRAM_test();
    118e:	0e 94 56 13 	call	0x26ac	; 0x26ac <SRAM_test>
	setup_ADC();
    1192:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <setup_ADC>
	joystick_init();
    1196:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <joystick_init>
	oled_init();
    119a:	0e 94 27 11 	call	0x224e	; 0x224e <oled_init>
	main_menu = menu_init();
    119e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <menu_init>
    11a2:	90 93 bf 03 	sts	0x03BF, r25
    11a6:	80 93 be 03 	sts	0x03BE, r24
	printf("Etter menu init");
    11aa:	8e e9       	ldi	r24, 0x9E	; 158
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	89 2f       	mov	r24, r25
    11b0:	8f 93       	push	r24
    11b2:	8e e9       	ldi	r24, 0x9E	; 158
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	8f 93       	push	r24
    11b8:	0e 94 bc 18 	call	0x3178	; 0x3178 <printf>
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
	can_init();
    11c0:	0e 94 1a 02 	call	0x434	; 0x434 <can_init>
	printf("Can init");
    11c4:	8e ea       	ldi	r24, 0xAE	; 174
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	89 2f       	mov	r24, r25
    11ca:	8f 93       	push	r24
    11cc:	8e ea       	ldi	r24, 0xAE	; 174
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	8f 93       	push	r24
    11d2:	0e 94 bc 18 	call	0x3178	; 0x3178 <printf>
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
	calibrate_joystick();
    11da:	0e 94 94 04 	call	0x928	; 0x928 <calibrate_joystick>
	printf("Enable CAN normal mode: %d\n",CAN_enable_normal_mode());
    11de:	0e 94 49 02 	call	0x492	; 0x492 <CAN_enable_normal_mode>
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	29 2f       	mov	r18, r25
    11e8:	2f 93       	push	r18
    11ea:	8f 93       	push	r24
    11ec:	87 eb       	ldi	r24, 0xB7	; 183
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	89 2f       	mov	r24, r25
    11f2:	8f 93       	push	r24
    11f4:	87 eb       	ldi	r24, 0xB7	; 183
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	8f 93       	push	r24
    11fa:	0e 94 bc 18 	call	0x3178	; 0x3178 <printf>
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
	// Run CAN timer on 50Hz
	//Trigger interrupt with interval of 50hz
	OCR1A = 1536;
    1206:	8a e4       	ldi	r24, 0x4A	; 74
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	36 e0       	ldi	r19, 0x06	; 6
    120e:	fc 01       	movw	r30, r24
    1210:	31 83       	std	Z+1, r19	; 0x01
    1212:	20 83       	st	Z, r18

	//Enable CTC mode
	set_bit(TCCR1A,COM1A0);
    1214:	8f e4       	ldi	r24, 0x4F	; 79
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	2f e4       	ldi	r18, 0x4F	; 79
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	f9 01       	movw	r30, r18
    121e:	20 81       	ld	r18, Z
    1220:	20 64       	ori	r18, 0x40	; 64
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18

	//Prescale 64
	set_bit(TCCR1B, CS11);
    1226:	8e e4       	ldi	r24, 0x4E	; 78
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	2e e4       	ldi	r18, 0x4E	; 78
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	f9 01       	movw	r30, r18
    1230:	20 81       	ld	r18, Z
    1232:	22 60       	ori	r18, 0x02	; 2
    1234:	fc 01       	movw	r30, r24
    1236:	20 83       	st	Z, r18
	set_bit(TCCR1B, CS10);
    1238:	8e e4       	ldi	r24, 0x4E	; 78
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	2e e4       	ldi	r18, 0x4E	; 78
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	f9 01       	movw	r30, r18
    1242:	20 81       	ld	r18, Z
    1244:	21 60       	ori	r18, 0x01	; 1
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
	set_bit(TCCR1B, WGM12);
    124a:	8e e4       	ldi	r24, 0x4E	; 78
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	2e e4       	ldi	r18, 0x4E	; 78
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	f9 01       	movw	r30, r18
    1254:	20 81       	ld	r18, Z
    1256:	28 60       	ori	r18, 0x08	; 8
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
	
	//Enable global interrupts	
	sei();
    125c:	78 94       	sei

}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <enable_can_timer>:

void enable_can_timer()
{
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	// Enable interrupt on output compare match timer 1
	set_bit(TIMSK, OCIE1A);
    1270:	89 e5       	ldi	r24, 0x59	; 89
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	29 e5       	ldi	r18, 0x59	; 89
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	f9 01       	movw	r30, r18
    127a:	20 81       	ld	r18, Z
    127c:	20 64       	ori	r18, 0x40	; 64
    127e:	fc 01       	movw	r30, r24
    1280:	20 83       	st	Z, r18
}
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	08 95       	ret

00001288 <disable_can_timer>:
void disable_can_timer()
{
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupt on output compare match timer 1
	clear_bit(TIMSK, OCIE1A);
    1290:	89 e5       	ldi	r24, 0x59	; 89
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	29 e5       	ldi	r18, 0x59	; 89
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	f9 01       	movw	r30, r18
    129a:	20 81       	ld	r18, Z
    129c:	2f 7b       	andi	r18, 0xBF	; 191
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18

}
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <__vector_13>:

// ISR for CAN timre
ISR(TIMER1_COMPA_vect )
{
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	00 90 5f 00 	lds	r0, 0x005F
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	2f 93       	push	r18
    12b6:	3f 93       	push	r19
    12b8:	4f 93       	push	r20
    12ba:	5f 93       	push	r21
    12bc:	6f 93       	push	r22
    12be:	7f 93       	push	r23
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	af 93       	push	r26
    12c6:	bf 93       	push	r27
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	// Enable sending of joystick data
	can_flag = TRUE;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	80 93 c0 03 	sts	0x03C0, r24
	counter++;
    12da:	80 91 bb 03 	lds	r24, 0x03BB
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	80 93 bb 03 	sts	0x03BB, r24
	if (counter == 50)
    12e4:	80 91 bb 03 	lds	r24, 0x03BB
    12e8:	82 33       	cpi	r24, 0x32	; 50
    12ea:	89 f4       	brne	.+34     	; 0x130e <__vector_13+0x66>
	{
		// 1 second passed
		counter = 0;
    12ec:	10 92 bb 03 	sts	0x03BB, r1
		time_seconds ++;
    12f0:	80 91 c1 03 	lds	r24, 0x03C1
    12f4:	90 91 c2 03 	lds	r25, 0x03C2
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	90 93 c2 03 	sts	0x03C2, r25
    12fe:	80 93 c1 03 	sts	0x03C1, r24
		menu_print_played_time(time_seconds);
    1302:	80 91 c1 03 	lds	r24, 0x03C1
    1306:	90 91 c2 03 	lds	r25, 0x03C2
    130a:	0e 94 10 10 	call	0x2020	; 0x2020 <menu_print_played_time>
	}	
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	bf 91       	pop	r27
    1318:	af 91       	pop	r26
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	7f 91       	pop	r23
    1320:	6f 91       	pop	r22
    1322:	5f 91       	pop	r21
    1324:	4f 91       	pop	r20
    1326:	3f 91       	pop	r19
    1328:	2f 91       	pop	r18
    132a:	0f 90       	pop	r0
    132c:	00 92 5f 00 	sts	0x005F, r0
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <mcp_2515_init>:
#include "USART.h"
#include "setup.h"
#include <stdlib.h>
#include <util/delay.h>

uint8_t mcp_2515_init(){
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	2f 97       	sbiw	r28, 0x0f	; 15
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t value;
	spi_init();
    134a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <spi_init>
	mcp_2515_reset();
    134e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <mcp_2515_reset>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a0 e2       	ldi	r26, 0x20	; 32
    1358:	b1 e4       	ldi	r27, 0x41	; 65
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	ab 83       	std	Y+3, r26	; 0x03
    1360:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1362:	2a e9       	ldi	r18, 0x9A	; 154
    1364:	39 e9       	ldi	r19, 0x99	; 153
    1366:	49 e9       	ldi	r20, 0x99	; 153
    1368:	54 e4       	ldi	r21, 0x44	; 68
    136a:	69 81       	ldd	r22, Y+1	; 0x01
    136c:	7a 81       	ldd	r23, Y+2	; 0x02
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	af 83       	std	Y+7, r26	; 0x07
    1380:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e8       	ldi	r20, 0x80	; 128
    1388:	5f e3       	ldi	r21, 0x3F	; 63
    138a:	6d 81       	ldd	r22, Y+5	; 0x05
    138c:	7e 81       	ldd	r23, Y+6	; 0x06
    138e:	8f 81       	ldd	r24, Y+7	; 0x07
    1390:	98 85       	ldd	r25, Y+8	; 0x08
    1392:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
    1396:	88 23       	and	r24, r24
    1398:	2c f4       	brge	.+10     	; 0x13a4 <mcp_2515_init+0x6e>
		__ticks = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9a 87       	std	Y+10, r25	; 0x0a
    13a0:	89 87       	std	Y+9, r24	; 0x09
    13a2:	3f c0       	rjmp	.+126    	; 0x1422 <mcp_2515_init+0xec>
	else if (__tmp > 65535)
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	3f ef       	ldi	r19, 0xFF	; 255
    13a8:	4f e7       	ldi	r20, 0x7F	; 127
    13aa:	57 e4       	ldi	r21, 0x47	; 71
    13ac:	6d 81       	ldd	r22, Y+5	; 0x05
    13ae:	7e 81       	ldd	r23, Y+6	; 0x06
    13b0:	8f 81       	ldd	r24, Y+7	; 0x07
    13b2:	98 85       	ldd	r25, Y+8	; 0x08
    13b4:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__gesf2>
    13b8:	18 16       	cp	r1, r24
    13ba:	4c f5       	brge	.+82     	; 0x140e <mcp_2515_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e2       	ldi	r20, 0x20	; 32
    13c2:	51 e4       	ldi	r21, 0x41	; 65
    13c4:	69 81       	ldd	r22, Y+1	; 0x01
    13c6:	7a 81       	ldd	r23, Y+2	; 0x02
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9a 87       	std	Y+10, r25	; 0x0a
    13e2:	89 87       	std	Y+9, r24	; 0x09
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <mcp_2515_init+0xce>
    13e6:	8a e7       	ldi	r24, 0x7A	; 122
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9c 87       	std	Y+12, r25	; 0x0c
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    13f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <mcp_2515_init+0xbc>
    13f6:	9c 87       	std	Y+12, r25	; 0x0c
    13f8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fa:	89 85       	ldd	r24, Y+9	; 0x09
    13fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	9a 87       	std	Y+10, r25	; 0x0a
    1402:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1404:	89 85       	ldd	r24, Y+9	; 0x09
    1406:	9a 85       	ldd	r25, Y+10	; 0x0a
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	69 f7       	brne	.-38     	; 0x13e6 <mcp_2515_init+0xb0>
    140c:	14 c0       	rjmp	.+40     	; 0x1436 <mcp_2515_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140e:	6d 81       	ldd	r22, Y+5	; 0x05
    1410:	7e 81       	ldd	r23, Y+6	; 0x06
    1412:	8f 81       	ldd	r24, Y+7	; 0x07
    1414:	98 85       	ldd	r25, Y+8	; 0x08
    1416:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9a 87       	std	Y+10, r25	; 0x0a
    1420:	89 87       	std	Y+9, r24	; 0x09
    1422:	89 85       	ldd	r24, Y+9	; 0x09
    1424:	9a 85       	ldd	r25, Y+10	; 0x0a
    1426:	9e 87       	std	Y+14, r25	; 0x0e
    1428:	8d 87       	std	Y+13, r24	; 0x0d
    142a:	8d 85       	ldd	r24, Y+13	; 0x0d
    142c:	9e 85       	ldd	r25, Y+14	; 0x0e
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <mcp_2515_init+0xf8>
    1432:	9e 87       	std	Y+14, r25	; 0x0e
    1434:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(10);
	//Self-test
	value = mcp_2515_read(MCP_CANSTAT);
    1436:	8e e0       	ldi	r24, 0x0E	; 14
    1438:	0e 94 66 0a 	call	0x14cc	; 0x14cc <mcp_2515_read>
    143c:	8f 87       	std	Y+15, r24	; 0x0f
	if ((value & MODE_MASK) != MODE_CONFIG)
    143e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	80 7e       	andi	r24, 0xE0	; 224
    1446:	99 27       	eor	r25, r25
    1448:	80 38       	cpi	r24, 0x80	; 128
    144a:	91 05       	cpc	r25, r1
    144c:	31 f0       	breq	.+12     	; 0x145a <mcp_2515_init+0x124>
	{
		printf("MCP2515 is NOT in configuration mode after reset!\n");
    144e:	83 ed       	ldi	r24, 0xD3	; 211
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	0e 94 d7 18 	call	0x31ae	; 0x31ae <puts>
		return 1;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <mcp_2515_init+0x14c>
	}
	printf("MCP2515 mode after init: %d\n", value);
    145a:	8f 85       	ldd	r24, Y+15	; 0x0f
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	29 2f       	mov	r18, r25
    1462:	2f 93       	push	r18
    1464:	8f 93       	push	r24
    1466:	85 e0       	ldi	r24, 0x05	; 5
    1468:	92 e0       	ldi	r25, 0x02	; 2
    146a:	89 2f       	mov	r24, r25
    146c:	8f 93       	push	r24
    146e:	85 e0       	ldi	r24, 0x05	; 5
    1470:	92 e0       	ldi	r25, 0x02	; 2
    1472:	8f 93       	push	r24
    1474:	0e 94 bc 18 	call	0x3178	; 0x3178 <printf>
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
	
	
	return 0;
    1480:	80 e0       	ldi	r24, 0x00	; 0
}
    1482:	2f 96       	adiw	r28, 0x0f	; 15
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <mcp_2515_enable_normal_operation>:
	}
	return 0;
}

uint8_t mcp_2515_enable_normal_operation()
{
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	1f 92       	push	r1
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
	// Enable normal operation in the CANCTRL-register
	mcp_2515_bit_modify(MCP_CANCTRL,MODE_MASK,MODE_NORMAL);
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	60 ee       	ldi	r22, 0xE0	; 224
    14a2:	8f e0       	ldi	r24, 0x0F	; 15
    14a4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <mcp_2515_bit_modify>
	// Check if normal mode is enabled
	volatile uint8_t value = mcp_2515_read(MCP_CANSTAT);
    14a8:	8e e0       	ldi	r24, 0x0E	; 14
    14aa:	0e 94 66 0a 	call	0x14cc	; 0x14cc <mcp_2515_read>
    14ae:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_NORMAL)
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	80 7e       	andi	r24, 0xE0	; 224
    14b8:	99 27       	eor	r25, r25
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	11 f0       	breq	.+4      	; 0x14c2 <mcp_2515_enable_normal_operation+0x2e>
	{
		return 1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <mcp_2515_enable_normal_operation+0x30>
	}
	return 0;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
}
    14c4:	0f 90       	pop	r0
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <mcp_2515_read>:


uint8_t mcp_2515_read(uint8_t address){
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <mcp_2515_read+0x6>
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t result;
	// Enable slave
	spi_enable();
    14d8:	0e 94 2d 13 	call	0x265a	; 0x265a <spi_enable>
	
	// Send read-command and address to be read
	spi_send(MCP_READ); 
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	spi_send(address);
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	// Read back result
	result = spi_read();
    14e8:	0e 94 17 13 	call	0x262e	; 0x262e <spi_read>
    14ec:	89 83       	std	Y+1, r24	; 0x01
	
	// Disable slave
	spi_disable();
    14ee:	0e 94 3d 13 	call	0x267a	; 0x267a <spi_disable>
	return result;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <mcp_2515_write>:

void mcp_2515_write(uint8_t address, uint8_t data){
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	00 d0       	rcall	.+0      	; 0x1504 <mcp_2515_write+0x6>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	6a 83       	std	Y+2, r22	; 0x02
	// Enable slave
	spi_enable();
    150c:	0e 94 2d 13 	call	0x265a	; 0x265a <spi_enable>
	
	// Send write-command, address and data
	spi_send(MCP_WRITE);
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	spi_send(address);
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	spi_send(data);
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	
	// Disable slave
	spi_disable();
    1522:	0e 94 3d 13 	call	0x267a	; 0x267a <spi_disable>
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	08 95       	ret

00001530 <mcp_2515_request_to_send>:

void mcp_2515_request_to_send(uint8_t buffer){
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	1f 92       	push	r1
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
	// Enable slave
	spi_enable();
    153c:	0e 94 2d 13 	call	0x265a	; 0x265a <spi_enable>
	spi_send(buffer);
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	
	// Disable slave
	spi_disable();
    1546:	0e 94 3d 13 	call	0x267a	; 0x267a <spi_disable>
}
    154a:	0f 90       	pop	r0
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	08 95       	ret

00001552 <mcp_2515_bit_modify>:

void mcp_2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	00 d0       	rcall	.+0      	; 0x1558 <mcp_2515_bit_modify+0x6>
    1558:	1f 92       	push	r1
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	6a 83       	std	Y+2, r22	; 0x02
    1562:	4b 83       	std	Y+3, r20	; 0x03
	// Enable slave
	spi_enable();
    1564:	0e 94 2d 13 	call	0x265a	; 0x265a <spi_enable>
	
	// Send bitmodification command
	spi_send(MCP_BITMOD);
    1568:	85 e0       	ldi	r24, 0x05	; 5
    156a:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	// Send the address of the register we want to change
	spi_send(address);
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	// Send the mask which decides what bits in the register can be modified
	spi_send(mask);
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	// Send the new bit values
	// Only the bits enabled by the mask will be modified
	spi_send(data);
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	
	// Disable slave
	spi_disable();
    1580:	0e 94 3d 13 	call	0x267a	; 0x267a <spi_disable>
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <mcp_2515_reset>:

void mcp_2515_reset(){
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	// Enable slave
	spi_enable();
    1598:	0e 94 2d 13 	call	0x265a	; 0x265a <spi_enable>
	// Send reset-command
	spi_send(MCP_RESET);
    159c:	80 ec       	ldi	r24, 0xC0	; 192
    159e:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_send>
	// Disable slave
	spi_disable();
    15a2:	0e 94 3d 13 	call	0x267a	; 0x267a <spi_disable>
}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <menu_init>:
char         time_played[8];
int          high_score[3];
const char   playing[] = "GAME PLAYING";
const char   number_of_lives[] = "LIVES LEFT:";

menu_t * menu_init (){
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	28 97       	sbiw	r28, 0x08	; 8
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
	//initialize empty score list
	for (int i = 0; i < 3; i++)
    15c0:	1a 82       	std	Y+2, r1	; 0x02
    15c2:	19 82       	std	Y+1, r1	; 0x01
    15c4:	0e c0       	rjmp	.+28     	; 0x15e2 <menu_init+0x36>
	{
		high_score[i] = 0;
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	8d 53       	subi	r24, 0x3D	; 61
    15d0:	9c 4f       	sbci	r25, 0xFC	; 252
    15d2:	fc 01       	movw	r30, r24
    15d4:	11 82       	std	Z+1, r1	; 0x01
    15d6:	10 82       	st	Z, r1
const char   playing[] = "GAME PLAYING";
const char   number_of_lives[] = "LIVES LEFT:";

menu_t * menu_init (){
	//initialize empty score list
	for (int i = 0; i < 3; i++)
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	9a 81       	ldd	r25, Y+2	; 0x02
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	6c f3       	brlt	.-38     	; 0x15c6 <menu_init+0x1a>
	{
		high_score[i] = 0;
	}
	sort_list(high_score,3);
    15ec:	63 e0       	ldi	r22, 0x03	; 3
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	83 ec       	ldi	r24, 0xC3	; 195
    15f2:	93 e0       	ldi	r25, 0x03	; 3
    15f4:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <sort_list>

	int first = eeprom_read_word((uint16_t*)0);
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__eerd_word_m162>
    1600:	9c 83       	std	Y+4, r25	; 0x04
    1602:	8b 83       	std	Y+3, r24	; 0x03
	int second = eeprom_read_word((uint16_t*)2);
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__eerd_word_m162>
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
	int third = eeprom_read_word((uint16_t*)4);
    1610:	84 e0       	ldi	r24, 0x04	; 4
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__eerd_word_m162>
    1618:	98 87       	std	Y+8, r25	; 0x08
    161a:	8f 83       	std	Y+7, r24	; 0x07
	
	if (first > 0)
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	18 16       	cp	r1, r24
    1622:	19 06       	cpc	r1, r25
    1624:	34 f4       	brge	.+12     	; 0x1632 <menu_init+0x86>
	{
		high_score[0] = first;
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	90 93 c4 03 	sts	0x03C4, r25
    162e:	80 93 c3 03 	sts	0x03C3, r24
	}
	
	if (second > 0)
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	18 16       	cp	r1, r24
    1638:	19 06       	cpc	r1, r25
    163a:	34 f4       	brge	.+12     	; 0x1648 <menu_init+0x9c>
	{
		high_score[1] = second;
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	90 93 c6 03 	sts	0x03C6, r25
    1644:	80 93 c5 03 	sts	0x03C5, r24
	}
	
	if (third > 0)
    1648:	8f 81       	ldd	r24, Y+7	; 0x07
    164a:	98 85       	ldd	r25, Y+8	; 0x08
    164c:	18 16       	cp	r1, r24
    164e:	19 06       	cpc	r1, r25
    1650:	34 f4       	brge	.+12     	; 0x165e <menu_init+0xb2>
	{
		high_score[2] = third;
    1652:	8f 81       	ldd	r24, Y+7	; 0x07
    1654:	98 85       	ldd	r25, Y+8	; 0x08
    1656:	90 93 c8 03 	sts	0x03C8, r25
    165a:	80 93 c7 03 	sts	0x03C7, r24
	}
	
	
	//Main menu
	Mainmenu.name = "MAIN MENU";
    165e:	82 e2       	ldi	r24, 0x22	; 34
    1660:	92 e0       	ldi	r25, 0x02	; 2
    1662:	90 93 d5 03 	sts	0x03D5, r25
    1666:	80 93 d4 03 	sts	0x03D4, r24
	Mainmenu.child1 = &Newgame;
    166a:	85 ef       	ldi	r24, 0xF5	; 245
    166c:	93 e0       	ldi	r25, 0x03	; 3
    166e:	90 93 cc 03 	sts	0x03CC, r25
    1672:	80 93 cb 03 	sts	0x03CB, r24
	Mainmenu.child2 = &Highscore;
    1676:	8f e1       	ldi	r24, 0x1F	; 31
    1678:	94 e0       	ldi	r25, 0x04	; 4
    167a:	90 93 ce 03 	sts	0x03CE, r25
    167e:	80 93 cd 03 	sts	0x03CD, r24
	Mainmenu.child3 = &Settings;
    1682:	86 ed       	ldi	r24, 0xD6	; 214
    1684:	93 e0       	ldi	r25, 0x03	; 3
    1686:	90 93 d0 03 	sts	0x03D0, r25
    168a:	80 93 cf 03 	sts	0x03CF, r24
	Mainmenu.number_of_children = 3;
    168e:	83 e0       	ldi	r24, 0x03	; 3
    1690:	80 93 d3 03 	sts	0x03D3, r24
	
	Newgame.name = "NEW GAME";
    1694:	8c e2       	ldi	r24, 0x2C	; 44
    1696:	92 e0       	ldi	r25, 0x02	; 2
    1698:	90 93 01 04 	sts	0x0401, r25
    169c:	80 93 00 04 	sts	0x0400, r24
	Newgame.parent = &Mainmenu;
    16a0:	89 ec       	ldi	r24, 0xC9	; 201
    16a2:	93 e0       	ldi	r25, 0x03	; 3
    16a4:	90 93 f6 03 	sts	0x03F6, r25
    16a8:	80 93 f5 03 	sts	0x03F5, r24
	Newgame.number_of_children = 1;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	80 93 ff 03 	sts	0x03FF, r24
	
	Highscore.name = "HIGH SCORE";
    16b2:	85 e3       	ldi	r24, 0x35	; 53
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	90 93 2b 04 	sts	0x042B, r25
    16ba:	80 93 2a 04 	sts	0x042A, r24
	Highscore.parent = &Mainmenu;
    16be:	89 ec       	ldi	r24, 0xC9	; 201
    16c0:	93 e0       	ldi	r25, 0x03	; 3
    16c2:	90 93 20 04 	sts	0x0420, r25
    16c6:	80 93 1f 04 	sts	0x041F, r24
	Highscore.number_of_children = 4;
    16ca:	84 e0       	ldi	r24, 0x04	; 4
    16cc:	80 93 29 04 	sts	0x0429, r24
	Highscore.child4 = &Return;
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	94 e0       	ldi	r25, 0x04	; 4
    16d4:	90 93 28 04 	sts	0x0428, r25
    16d8:	80 93 27 04 	sts	0x0427, r24
	Settings.name = "SETTINGS";
    16dc:	80 e4       	ldi	r24, 0x40	; 64
    16de:	92 e0       	ldi	r25, 0x02	; 2
    16e0:	90 93 e2 03 	sts	0x03E2, r25
    16e4:	80 93 e1 03 	sts	0x03E1, r24
	Settings.parent = &Mainmenu;
    16e8:	89 ec       	ldi	r24, 0xC9	; 201
    16ea:	93 e0       	ldi	r25, 0x03	; 3
    16ec:	90 93 d7 03 	sts	0x03D7, r25
    16f0:	80 93 d6 03 	sts	0x03D6, r24
	Settings.number_of_children = 4;
    16f4:	84 e0       	ldi	r24, 0x04	; 4
    16f6:	80 93 e0 03 	sts	0x03E0, r24
	Settings.child3 = &Return;
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	94 e0       	ldi	r25, 0x04	; 4
    16fe:	90 93 dd 03 	sts	0x03DD, r25
    1702:	80 93 dc 03 	sts	0x03DC, r24
	Return.name = "RETURN";
    1706:	89 e4       	ldi	r24, 0x49	; 73
    1708:	92 e0       	ldi	r25, 0x02	; 2
    170a:	90 93 0e 04 	sts	0x040E, r25
    170e:	80 93 0d 04 	sts	0x040D, r24
	Return.parent = &Mainmenu;
    1712:	89 ec       	ldi	r24, 0xC9	; 201
    1714:	93 e0       	ldi	r25, 0x03	; 3
    1716:	90 93 03 04 	sts	0x0403, r25
    171a:	80 93 02 04 	sts	0x0402, r24
	current_menu = &Mainmenu;
    171e:	89 ec       	ldi	r24, 0xC9	; 201
    1720:	93 e0       	ldi	r25, 0x03	; 3
    1722:	90 93 f4 03 	sts	0x03F4, r25
    1726:	80 93 f3 03 	sts	0x03F3, r24
	// Get integer as string
	itoa(high_score[0],first_place,10);
    172a:	80 91 c3 03 	lds	r24, 0x03C3
    172e:	90 91 c4 03 	lds	r25, 0x03C4
    1732:	4a e0       	ldi	r20, 0x0A	; 10
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	6b ee       	ldi	r22, 0xEB	; 235
    1738:	73 e0       	ldi	r23, 0x03	; 3
    173a:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
	itoa(high_score[1],second_place,10);
    173e:	80 91 c5 03 	lds	r24, 0x03C5
    1742:	90 91 c6 03 	lds	r25, 0x03C6
    1746:	4a e0       	ldi	r20, 0x0A	; 10
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	6c e2       	ldi	r22, 0x2C	; 44
    174c:	74 e0       	ldi	r23, 0x04	; 4
    174e:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
	itoa(high_score[2],third_place,10);
    1752:	80 91 c7 03 	lds	r24, 0x03C7
    1756:	90 91 c8 03 	lds	r25, 0x03C8
    175a:	4a e0       	ldi	r20, 0x0A	; 10
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	6f e0       	ldi	r22, 0x0F	; 15
    1760:	74 e0       	ldi	r23, 0x04	; 4
    1762:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
	return &Mainmenu;
    1766:	89 ec       	ldi	r24, 0xC9	; 201
    1768:	93 e0       	ldi	r25, 0x03	; 3
}
    176a:	28 96       	adiw	r28, 0x08	; 8
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	08 95       	ret

0000177c <move_arrow>:


// Move the arrow on the OLED-screen
uint8_t move_arrow(direction dir ,uint8_t current_row){
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	00 d0       	rcall	.+0      	; 0x1782 <move_arrow+0x6>
    1782:	00 d0       	rcall	.+0      	; 0x1784 <move_arrow+0x8>
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	8b 83       	std	Y+3, r24	; 0x03
    178a:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t row = current_row;
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t number_of_rows = current_menu -> number_of_children + OLED_OFFSET;
    1790:	80 91 f3 03 	lds	r24, 0x03F3
    1794:	90 91 f4 03 	lds	r25, 0x03F4
    1798:	fc 01       	movw	r30, r24
    179a:	82 85       	ldd	r24, Z+10	; 0x0a
    179c:	8a 83       	std	Y+2, r24	; 0x02
	if(dir == previousDIR){
    179e:	80 91 0e 01 	lds	r24, 0x010E
    17a2:	9b 81       	ldd	r25, Y+3	; 0x03
    17a4:	98 17       	cp	r25, r24
    17a6:	19 f4       	brne	.+6      	; 0x17ae <move_arrow+0x32>
		dir = NEUTRAL;
    17a8:	84 e0       	ldi	r24, 0x04	; 4
    17aa:	8b 83       	std	Y+3, r24	; 0x03
    17ac:	03 c0       	rjmp	.+6      	; 0x17b4 <move_arrow+0x38>
	}
	else{
		previousDIR = NEUTRAL;
    17ae:	84 e0       	ldi	r24, 0x04	; 4
    17b0:	80 93 0e 01 	sts	0x010E, r24
	}
	switch(dir) {
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	91 05       	cpc	r25, r1
    17be:	09 f1       	breq	.+66     	; 0x1802 <move_arrow+0x86>
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	91 05       	cpc	r25, r1
    17c4:	19 f0       	breq	.+6      	; 0x17cc <move_arrow+0x50>
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	31 f0       	breq	.+12     	; 0x17d6 <move_arrow+0x5a>
    17ca:	37 c0       	rjmp	.+110    	; 0x183a <move_arrow+0xbe>
		case NEUTRAL :
		{
			oled_print_arrow(row,0);
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	0e 94 b3 12 	call	0x2566	; 0x2566 <oled_print_arrow>
			break;
    17d4:	32 c0       	rjmp	.+100    	; 0x183a <move_arrow+0xbe>
		}
		
		case UP  :
		{
			if (row >= 3)
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	90 f0       	brcs	.+36     	; 0x1800 <move_arrow+0x84>
			{
				oled_pos(row, 0);
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
				oled_print_string("  ");
    17e4:	80 e5       	ldi	r24, 0x50	; 80
    17e6:	92 e0       	ldi	r25, 0x02	; 2
    17e8:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
				row--;
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	81 50       	subi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01
				oled_print_arrow(row,0);
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	0e 94 b3 12 	call	0x2566	; 0x2566 <oled_print_arrow>
				previousDIR=UP;
    17fa:	10 92 0e 01 	sts	0x010E, r1
			}
			break;
    17fe:	1d c0       	rjmp	.+58     	; 0x183a <move_arrow+0xbe>
    1800:	1c c0       	rjmp	.+56     	; 0x183a <move_arrow+0xbe>
		}
		
		case DOWN  :
		{
			if (row <= number_of_rows)
    1802:	99 81       	ldd	r25, Y+1	; 0x01
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	89 17       	cp	r24, r25
    1808:	b8 f0       	brcs	.+46     	; 0x1838 <move_arrow+0xbc>
			{
				oled_pos(row, 0);
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
				oled_print_string("  ");
    1812:	80 e5       	ldi	r24, 0x50	; 80
    1814:	92 e0       	ldi	r25, 0x02	; 2
    1816:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
				if (row == 7)
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	87 30       	cpi	r24, 0x07	; 7
    181e:	09 f4       	brne	.+2      	; 0x1822 <move_arrow+0xa6>
				{
					row = 0;
    1820:	19 82       	std	Y+1, r1	; 0x01
				}
				row++;
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	8f 5f       	subi	r24, 0xFF	; 255
    1826:	89 83       	std	Y+1, r24	; 0x01
				oled_print_arrow(row,0);
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	0e 94 b3 12 	call	0x2566	; 0x2566 <oled_print_arrow>
				previousDIR = DOWN;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	80 93 0e 01 	sts	0x010E, r24
			}
			break;
    1836:	00 c0       	rjmp	.+0      	; 0x1838 <move_arrow+0xbc>
    1838:	00 00       	nop
		}
	}
	return row;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	08 95       	ret

0000184a <print_menu>:

// Print the current menu on the OLED
void print_menu (menu_t *menu){
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	00 d0       	rcall	.+0      	; 0x1850 <print_menu+0x6>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	89 83       	std	Y+1, r24	; 0x01
	current_menu = menu;
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	90 93 f4 03 	sts	0x03F4, r25
    1860:	80 93 f3 03 	sts	0x03F3, r24
	oled_reset();
    1864:	0e 94 96 11 	call	0x232c	; 0x232c <oled_reset>
	oled_home();
    1868:	0e 94 b0 11 	call	0x2360	; 0x2360 <oled_home>
	oled_pos(0,2);
    186c:	62 e0       	ldi	r22, 0x02	; 2
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string(menu->name);
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	fc 01       	movw	r30, r24
    187a:	83 85       	ldd	r24, Z+11	; 0x0b
    187c:	94 85       	ldd	r25, Z+12	; 0x0c
    187e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	
	if (menu->child1 != NULL)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	fc 01       	movw	r30, r24
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	71 f0       	breq	.+28     	; 0x18ac <print_menu+0x62>
	{
		oled_pos(2,2);
    1890:	62 e0       	ldi	r22, 0x02	; 2
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
		oled_print_string(menu->child1->name);
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	fc 01       	movw	r30, r24
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	fc 01       	movw	r30, r24
    18a4:	83 85       	ldd	r24, Z+11	; 0x0b
    18a6:	94 85       	ldd	r25, Z+12	; 0x0c
    18a8:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	}
	
	if (menu->child2 != NULL)
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	fc 01       	movw	r30, r24
    18b2:	84 81       	ldd	r24, Z+4	; 0x04
    18b4:	95 81       	ldd	r25, Z+5	; 0x05
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	71 f0       	breq	.+28     	; 0x18d6 <print_menu+0x8c>
	{
		oled_pos(3,2);
    18ba:	62 e0       	ldi	r22, 0x02	; 2
    18bc:	83 e0       	ldi	r24, 0x03	; 3
    18be:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
		oled_print_string(menu->child2->name);
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	fc 01       	movw	r30, r24
    18c8:	84 81       	ldd	r24, Z+4	; 0x04
    18ca:	95 81       	ldd	r25, Z+5	; 0x05
    18cc:	fc 01       	movw	r30, r24
    18ce:	83 85       	ldd	r24, Z+11	; 0x0b
    18d0:	94 85       	ldd	r25, Z+12	; 0x0c
    18d2:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	}

	if (menu->child3 != NULL)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	fc 01       	movw	r30, r24
    18dc:	86 81       	ldd	r24, Z+6	; 0x06
    18de:	97 81       	ldd	r25, Z+7	; 0x07
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	71 f0       	breq	.+28     	; 0x1900 <print_menu+0xb6>
	{
		oled_pos(4,2);
    18e4:	62 e0       	ldi	r22, 0x02	; 2
    18e6:	84 e0       	ldi	r24, 0x04	; 4
    18e8:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
		oled_print_string(menu->child3->name);
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	fc 01       	movw	r30, r24
    18f2:	86 81       	ldd	r24, Z+6	; 0x06
    18f4:	97 81       	ldd	r25, Z+7	; 0x07
    18f6:	fc 01       	movw	r30, r24
    18f8:	83 85       	ldd	r24, Z+11	; 0x0b
    18fa:	94 85       	ldd	r25, Z+12	; 0x0c
    18fc:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	}
	
	if (menu->child4 != NULL)
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	9a 81       	ldd	r25, Y+2	; 0x02
    1904:	fc 01       	movw	r30, r24
    1906:	80 85       	ldd	r24, Z+8	; 0x08
    1908:	91 85       	ldd	r25, Z+9	; 0x09
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	71 f0       	breq	.+28     	; 0x192a <print_menu+0xe0>
	{
		oled_pos(5,2);
    190e:	62 e0       	ldi	r22, 0x02	; 2
    1910:	85 e0       	ldi	r24, 0x05	; 5
    1912:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
		oled_print_string(menu->child4->name);
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	fc 01       	movw	r30, r24
    191c:	80 85       	ldd	r24, Z+8	; 0x08
    191e:	91 85       	ldd	r25, Z+9	; 0x09
    1920:	fc 01       	movw	r30, r24
    1922:	83 85       	ldd	r24, Z+11	; 0x0b
    1924:	94 85       	ldd	r25, Z+12	; 0x0c
    1926:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	}
	
	if (strcmp(menu->name, "HIGH SCORE") == 0)
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	fc 01       	movw	r30, r24
    1930:	83 85       	ldd	r24, Z+11	; 0x0b
    1932:	94 85       	ldd	r25, Z+12	; 0x0c
    1934:	65 e3       	ldi	r22, 0x35	; 53
    1936:	72 e0       	ldi	r23, 0x02	; 2
    1938:	0e 94 38 18 	call	0x3070	; 0x3070 <strcmp>
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	11 f4       	brne	.+4      	; 0x1944 <print_menu+0xfa>
	{
		print_highscore();
    1940:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <print_highscore>
	}
	
	if (strcmp(menu->name, "SETTINGS") == 0)
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	9a 81       	ldd	r25, Y+2	; 0x02
    1948:	fc 01       	movw	r30, r24
    194a:	83 85       	ldd	r24, Z+11	; 0x0b
    194c:	94 85       	ldd	r25, Z+12	; 0x0c
    194e:	60 e4       	ldi	r22, 0x40	; 64
    1950:	72 e0       	ldi	r23, 0x02	; 2
    1952:	0e 94 38 18 	call	0x3070	; 0x3070 <strcmp>
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	11 f4       	brne	.+4      	; 0x195e <print_menu+0x114>
	{
		print_settings();
    195a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <print_settings>
	}
	
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <button_action>:


// Implements action based on joystick button presses
// Possibility for cleaner code, written in a hurry :-)
uint8_t button_action (uint8_t current_line) {
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	1f 92       	push	r1
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	89 83       	std	Y+1, r24	; 0x01
	// Fix "magic numbers", current_line = some menu etc.
	// Should be independent of the actual linked list
	
	if (strcmp(current_menu->name, "MAIN MENU") == 0)
    1974:	80 91 f3 03 	lds	r24, 0x03F3
    1978:	90 91 f4 03 	lds	r25, 0x03F4
    197c:	fc 01       	movw	r30, r24
    197e:	83 85       	ldd	r24, Z+11	; 0x0b
    1980:	94 85       	ldd	r25, Z+12	; 0x0c
    1982:	62 e2       	ldi	r22, 0x22	; 34
    1984:	72 e0       	ldi	r23, 0x02	; 2
    1986:	0e 94 38 18 	call	0x3070	; 0x3070 <strcmp>
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	c1 f4       	brne	.+48     	; 0x19be <button_action+0x56>
	{
		if(current_line == 2)
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	82 30       	cpi	r24, 0x02	; 2
    1992:	51 f4       	brne	.+20     	; 0x19a8 <button_action+0x40>
		{
			game_started = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 9f 03 	sts	0x039F, r24
			navigateMenu(current_line);
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <navigateMenu>
			menu_playing(3);
    19a0:	83 e0       	ldi	r24, 0x03	; 3
    19a2:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <menu_playing>
    19a6:	b6 c0       	rjmp	.+364    	; 0x1b14 <button_action+0x1ac>
		}
		else if (current_line == 3) {
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	21 f4       	brne	.+8      	; 0x19b6 <button_action+0x4e>
			navigateMenu(current_line);
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <navigateMenu>
    19b4:	af c0       	rjmp	.+350    	; 0x1b14 <button_action+0x1ac>
		}
		else navigateMenu(current_line);
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <navigateMenu>
    19bc:	ab c0       	rjmp	.+342    	; 0x1b14 <button_action+0x1ac>
	}
	
	else if(strcmp(current_menu->name, "NEW GAME") == 0){
    19be:	80 91 f3 03 	lds	r24, 0x03F3
    19c2:	90 91 f4 03 	lds	r25, 0x03F4
    19c6:	fc 01       	movw	r30, r24
    19c8:	83 85       	ldd	r24, Z+11	; 0x0b
    19ca:	94 85       	ldd	r25, Z+12	; 0x0c
    19cc:	6c e2       	ldi	r22, 0x2C	; 44
    19ce:	72 e0       	ldi	r23, 0x02	; 2
    19d0:	0e 94 38 18 	call	0x3070	; 0x3070 <strcmp>
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	f1 f4       	brne	.+60     	; 0x1a14 <button_action+0xac>
		if(current_line==2){
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <button_action+0x78>
    19de:	9a c0       	rjmp	.+308    	; 0x1b14 <button_action+0x1ac>
			current_menu=current_menu->parent;
    19e0:	80 91 f3 03 	lds	r24, 0x03F3
    19e4:	90 91 f4 03 	lds	r25, 0x03F4
    19e8:	fc 01       	movw	r30, r24
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	90 93 f4 03 	sts	0x03F4, r25
    19f2:	80 93 f3 03 	sts	0x03F3, r24
			oled_pos(current_line, 0);
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
			oled_print_string("  ");
    19fe:	80 e5       	ldi	r24, 0x50	; 80
    1a00:	92 e0       	ldi	r25, 0x02	; 2
    1a02:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
			print_menu(current_menu);
    1a06:	80 91 f3 03 	lds	r24, 0x03F3
    1a0a:	90 91 f4 03 	lds	r25, 0x03F4
    1a0e:	0e 94 25 0c 	call	0x184a	; 0x184a <print_menu>
    1a12:	80 c0       	rjmp	.+256    	; 0x1b14 <button_action+0x1ac>
		}
	}
	
	else if (strcmp(current_menu->name, "SETTINGS") == 0)
    1a14:	80 91 f3 03 	lds	r24, 0x03F3
    1a18:	90 91 f4 03 	lds	r25, 0x03F4
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	83 85       	ldd	r24, Z+11	; 0x0b
    1a20:	94 85       	ldd	r25, Z+12	; 0x0c
    1a22:	60 e4       	ldi	r22, 0x40	; 64
    1a24:	72 e0       	ldi	r23, 0x02	; 2
    1a26:	0e 94 38 18 	call	0x3070	; 0x3070 <strcmp>
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <button_action+0xc8>
    1a2e:	49 c0       	rjmp	.+146    	; 0x1ac2 <button_action+0x15a>
	{
		// On debugging line
		if (current_line == 2) {
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	82 30       	cpi	r24, 0x02	; 2
    1a34:	49 f4       	brne	.+18     	; 0x1a48 <button_action+0xe0>
			oled_pos(current_line, 0);
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
			oled_print_string("  ");
    1a3e:	80 e5       	ldi	r24, 0x50	; 80
    1a40:	92 e0       	ldi	r25, 0x02	; 2
    1a42:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
    1a46:	66 c0       	rjmp	.+204    	; 0x1b14 <button_action+0x1ac>
		} // TODO Debugging
		
		
		// On calibrate joystick line
		else if (current_line == 3) {
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	b1 f4       	brne	.+44     	; 0x1a7a <button_action+0x112>
			oled_pos(current_line, 0);
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
			oled_print_string("  ");
    1a56:	80 e5       	ldi	r24, 0x50	; 80
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
			calibrate_joystick();
    1a5e:	0e 94 94 04 	call	0x928	; 0x928 <calibrate_joystick>
			current_menu = current_menu->parent;
    1a62:	80 91 f3 03 	lds	r24, 0x03F3
    1a66:	90 91 f4 03 	lds	r25, 0x03F4
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	90 93 f4 03 	sts	0x03F4, r25
    1a74:	80 93 f3 03 	sts	0x03F3, r24
    1a78:	4d c0       	rjmp	.+154    	; 0x1b14 <button_action+0x1ac>
			
		}
		
		else if (current_line == 4)
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	84 30       	cpi	r24, 0x04	; 4
    1a7e:	19 f4       	brne	.+6      	; 0x1a86 <button_action+0x11e>
		{
			reset_highscore();
    1a80:	0e 94 43 10 	call	0x2086	; 0x2086 <reset_highscore>
    1a84:	47 c0       	rjmp	.+142    	; 0x1b14 <button_action+0x1ac>
		}
		// Return on line 5
		else if (current_line == 5) {
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	85 30       	cpi	r24, 0x05	; 5
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <button_action+0x126>
    1a8c:	43 c0       	rjmp	.+134    	; 0x1b14 <button_action+0x1ac>
			current_menu = current_menu -> parent;
    1a8e:	80 91 f3 03 	lds	r24, 0x03F3
    1a92:	90 91 f4 03 	lds	r25, 0x03F4
    1a96:	fc 01       	movw	r30, r24
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
    1a9c:	90 93 f4 03 	sts	0x03F4, r25
    1aa0:	80 93 f3 03 	sts	0x03F3, r24
			oled_pos(current_line, 0);
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
			oled_print_string("  ");
    1aac:	80 e5       	ldi	r24, 0x50	; 80
    1aae:	92 e0       	ldi	r25, 0x02	; 2
    1ab0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
			print_menu(current_menu);
    1ab4:	80 91 f3 03 	lds	r24, 0x03F3
    1ab8:	90 91 f4 03 	lds	r25, 0x03F4
    1abc:	0e 94 25 0c 	call	0x184a	; 0x184a <print_menu>
    1ac0:	29 c0       	rjmp	.+82     	; 0x1b14 <button_action+0x1ac>
		}
		
	}
	
	else if (strcmp(current_menu->name, "HIGH SCORE") == 0) {
    1ac2:	80 91 f3 03 	lds	r24, 0x03F3
    1ac6:	90 91 f4 03 	lds	r25, 0x03F4
    1aca:	fc 01       	movw	r30, r24
    1acc:	83 85       	ldd	r24, Z+11	; 0x0b
    1ace:	94 85       	ldd	r25, Z+12	; 0x0c
    1ad0:	65 e3       	ldi	r22, 0x35	; 53
    1ad2:	72 e0       	ldi	r23, 0x02	; 2
    1ad4:	0e 94 38 18 	call	0x3070	; 0x3070 <strcmp>
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	e1 f4       	brne	.+56     	; 0x1b14 <button_action+0x1ac>
		// Return on line 5
		if (current_line == 5)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	85 30       	cpi	r24, 0x05	; 5
    1ae0:	59 f4       	brne	.+22     	; 0x1af8 <button_action+0x190>
		{
			current_menu = current_menu -> parent;
    1ae2:	80 91 f3 03 	lds	r24, 0x03F3
    1ae6:	90 91 f4 03 	lds	r25, 0x03F4
    1aea:	fc 01       	movw	r30, r24
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	90 93 f4 03 	sts	0x03F4, r25
    1af4:	80 93 f3 03 	sts	0x03F3, r24
		}
		oled_pos(current_line, 0);
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
		oled_print_string("  ");
    1b00:	80 e5       	ldi	r24, 0x50	; 80
    1b02:	92 e0       	ldi	r25, 0x02	; 2
    1b04:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
		print_menu(current_menu);
    1b08:	80 91 f3 03 	lds	r24, 0x03F3
    1b0c:	90 91 f4 03 	lds	r25, 0x03F4
    1b10:	0e 94 25 0c 	call	0x184a	; 0x184a <print_menu>
	}
	return game_started;
    1b14:	80 91 9f 03 	lds	r24, 0x039F
}
    1b18:	0f 90       	pop	r0
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	08 95       	ret

00001b20 <navigateMenu>:


// Traverses the linked list into submenus
void navigateMenu(uint8_t current_line) {
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	1f 92       	push	r1
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	switch(current_line) {
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	91 05       	cpc	r25, r1
    1b36:	81 f1       	breq	.+96     	; 0x1b98 <navigateMenu+0x78>
    1b38:	84 30       	cpi	r24, 0x04	; 4
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <navigateMenu+0x20>
    1b3e:	54 c0       	rjmp	.+168    	; 0x1be8 <navigateMenu+0xc8>
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	91 05       	cpc	r25, r1
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <navigateMenu+0x28>
    1b46:	76 c0       	rjmp	.+236    	; 0x1c34 <navigateMenu+0x114>
		case 2:
		if (current_menu->child1 != NULL) {
    1b48:	80 91 f3 03 	lds	r24, 0x03F3
    1b4c:	90 91 f4 03 	lds	r25, 0x03F4
    1b50:	fc 01       	movw	r30, r24
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	f1 f0       	breq	.+60     	; 0x1b96 <navigateMenu+0x76>
			current_menu = current_menu -> child1;
    1b5a:	80 91 f3 03 	lds	r24, 0x03F3
    1b5e:	90 91 f4 03 	lds	r25, 0x03F4
    1b62:	fc 01       	movw	r30, r24
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	90 93 f4 03 	sts	0x03F4, r25
    1b6c:	80 93 f3 03 	sts	0x03F3, r24
			oled_pos(current_line, 0);
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
			oled_print_string("  ");
    1b78:	80 e5       	ldi	r24, 0x50	; 80
    1b7a:	92 e0       	ldi	r25, 0x02	; 2
    1b7c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
			move_arrow(NEUTRAL, 2);
    1b80:	62 e0       	ldi	r22, 0x02	; 2
    1b82:	84 e0       	ldi	r24, 0x04	; 4
    1b84:	0e 94 be 0b 	call	0x177c	; 0x177c <move_arrow>
			print_menu(current_menu);
    1b88:	80 91 f3 03 	lds	r24, 0x03F3
    1b8c:	90 91 f4 03 	lds	r25, 0x03F4
    1b90:	0e 94 25 0c 	call	0x184a	; 0x184a <print_menu>
		}
		break;
    1b94:	4f c0       	rjmp	.+158    	; 0x1c34 <navigateMenu+0x114>
    1b96:	4e c0       	rjmp	.+156    	; 0x1c34 <navigateMenu+0x114>
		
		case 3:
		if (current_menu->child2 != NULL) {
    1b98:	80 91 f3 03 	lds	r24, 0x03F3
    1b9c:	90 91 f4 03 	lds	r25, 0x03F4
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	84 81       	ldd	r24, Z+4	; 0x04
    1ba4:	95 81       	ldd	r25, Z+5	; 0x05
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	f1 f0       	breq	.+60     	; 0x1be6 <navigateMenu+0xc6>
			current_menu = current_menu -> child2;
    1baa:	80 91 f3 03 	lds	r24, 0x03F3
    1bae:	90 91 f4 03 	lds	r25, 0x03F4
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	84 81       	ldd	r24, Z+4	; 0x04
    1bb6:	95 81       	ldd	r25, Z+5	; 0x05
    1bb8:	90 93 f4 03 	sts	0x03F4, r25
    1bbc:	80 93 f3 03 	sts	0x03F3, r24
			oled_pos(current_line, 0);
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
			oled_print_string("  ");
    1bc8:	80 e5       	ldi	r24, 0x50	; 80
    1bca:	92 e0       	ldi	r25, 0x02	; 2
    1bcc:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
			move_arrow(NEUTRAL, 2);
    1bd0:	62 e0       	ldi	r22, 0x02	; 2
    1bd2:	84 e0       	ldi	r24, 0x04	; 4
    1bd4:	0e 94 be 0b 	call	0x177c	; 0x177c <move_arrow>
			print_menu(current_menu);
    1bd8:	80 91 f3 03 	lds	r24, 0x03F3
    1bdc:	90 91 f4 03 	lds	r25, 0x03F4
    1be0:	0e 94 25 0c 	call	0x184a	; 0x184a <print_menu>
		}
		break;
    1be4:	27 c0       	rjmp	.+78     	; 0x1c34 <navigateMenu+0x114>
    1be6:	26 c0       	rjmp	.+76     	; 0x1c34 <navigateMenu+0x114>
		
		case 4:
		if (current_menu->child3 != NULL) {
    1be8:	80 91 f3 03 	lds	r24, 0x03F3
    1bec:	90 91 f4 03 	lds	r25, 0x03F4
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	86 81       	ldd	r24, Z+6	; 0x06
    1bf4:	97 81       	ldd	r25, Z+7	; 0x07
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	e9 f0       	breq	.+58     	; 0x1c34 <navigateMenu+0x114>
			current_menu = current_menu -> child3;
    1bfa:	80 91 f3 03 	lds	r24, 0x03F3
    1bfe:	90 91 f4 03 	lds	r25, 0x03F4
    1c02:	fc 01       	movw	r30, r24
    1c04:	86 81       	ldd	r24, Z+6	; 0x06
    1c06:	97 81       	ldd	r25, Z+7	; 0x07
    1c08:	90 93 f4 03 	sts	0x03F4, r25
    1c0c:	80 93 f3 03 	sts	0x03F3, r24
			oled_pos(current_line, 0);
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
			oled_print_string("  ");
    1c18:	80 e5       	ldi	r24, 0x50	; 80
    1c1a:	92 e0       	ldi	r25, 0x02	; 2
    1c1c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
			move_arrow(NEUTRAL, 2);
    1c20:	62 e0       	ldi	r22, 0x02	; 2
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	0e 94 be 0b 	call	0x177c	; 0x177c <move_arrow>
			print_menu(current_menu);
    1c28:	80 91 f3 03 	lds	r24, 0x03F3
    1c2c:	90 91 f4 03 	lds	r25, 0x03F4
    1c30:	0e 94 25 0c 	call	0x184a	; 0x184a <print_menu>
		}
	}
}
    1c34:	0f 90       	pop	r0
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	08 95       	ret

00001c3c <print_highscore>:

// Print the highscore list
void print_highscore()
{
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
	oled_pos(2,2);
    1c44:	62 e0       	ldi	r22, 0x02	; 2
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("1: ");
    1c4c:	83 e5       	ldi	r24, 0x53	; 83
    1c4e:	92 e0       	ldi	r25, 0x02	; 2
    1c50:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(2,6);
    1c54:	66 e0       	ldi	r22, 0x06	; 6
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string(first_place);
    1c5c:	8b ee       	ldi	r24, 0xEB	; 235
    1c5e:	93 e0       	ldi	r25, 0x03	; 3
    1c60:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(3,2);
    1c64:	62 e0       	ldi	r22, 0x02	; 2
    1c66:	83 e0       	ldi	r24, 0x03	; 3
    1c68:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("2: ");
    1c6c:	87 e5       	ldi	r24, 0x57	; 87
    1c6e:	92 e0       	ldi	r25, 0x02	; 2
    1c70:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(3,6);
    1c74:	66 e0       	ldi	r22, 0x06	; 6
    1c76:	83 e0       	ldi	r24, 0x03	; 3
    1c78:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string(second_place);
    1c7c:	8c e2       	ldi	r24, 0x2C	; 44
    1c7e:	94 e0       	ldi	r25, 0x04	; 4
    1c80:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(4,2);
    1c84:	62 e0       	ldi	r22, 0x02	; 2
    1c86:	84 e0       	ldi	r24, 0x04	; 4
    1c88:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("3: ");
    1c8c:	8b e5       	ldi	r24, 0x5B	; 91
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
    1c90:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(4,6);
    1c94:	66 e0       	ldi	r22, 0x06	; 6
    1c96:	84 e0       	ldi	r24, 0x04	; 4
    1c98:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string(third_place);
    1c9c:	8f e0       	ldi	r24, 0x0F	; 15
    1c9e:	94 e0       	ldi	r25, 0x04	; 4
    1ca0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(5,2);
    1ca4:	62 e0       	ldi	r22, 0x02	; 2
    1ca6:	85 e0       	ldi	r24, 0x05	; 5
    1ca8:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("RETURN");
    1cac:	89 e4       	ldi	r24, 0x49	; 73
    1cae:	92 e0       	ldi	r25, 0x02	; 2
    1cb0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
}
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <print_settings>:

// Print settings menu
void print_settings()
{
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	oled_pos(2,2);
    1cc2:	62 e0       	ldi	r22, 0x02	; 2
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("DEBUGGING");
    1cca:	8f e5       	ldi	r24, 0x5F	; 95
    1ccc:	92 e0       	ldi	r25, 0x02	; 2
    1cce:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(3,2);
    1cd2:	62 e0       	ldi	r22, 0x02	; 2
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
    1cd6:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("CAL. JOYSTCK.");
    1cda:	89 e6       	ldi	r24, 0x69	; 105
    1cdc:	92 e0       	ldi	r25, 0x02	; 2
    1cde:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(4,2);
    1ce2:	62 e0       	ldi	r22, 0x02	; 2
    1ce4:	84 e0       	ldi	r24, 0x04	; 4
    1ce6:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("RST HGHSCR");
    1cea:	87 e7       	ldi	r24, 0x77	; 119
    1cec:	92 e0       	ldi	r25, 0x02	; 2
    1cee:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(5,2);
    1cf2:	62 e0       	ldi	r22, 0x02	; 2
    1cf4:	85 e0       	ldi	r24, 0x05	; 5
    1cf6:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("RETURN");
    1cfa:	89 e4       	ldi	r24, 0x49	; 73
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
}
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	08 95       	ret

00001d08 <get_game_mode>:

int get_game_mode(){
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	return game_started;
    1d10:	80 91 9f 03 	lds	r24, 0x039F
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
}
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	08 95       	ret

00001d1e <restart_game_mode>:
void restart_game_mode(){
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
	game_started = 0;
    1d26:	10 92 9f 03 	sts	0x039F, r1
}
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <set_high_score_list>:

// Insert new score into the highscore list (if new score is high score)
void set_high_score_list(int score)
{
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	2b 97       	sbiw	r28, 0x0b	; 11
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	9b 87       	std	Y+11, r25	; 0x0b
    1d46:	8a 87       	std	Y+10, r24	; 0x0a
	for (uint8_t i=0; i < 3; i++)
    1d48:	19 82       	std	Y+1, r1	; 0x01
    1d4a:	55 c0       	rjmp	.+170    	; 0x1df6 <set_high_score_list+0xc6>
	{
		if (score > high_score[i]) // insert new highscore in correct position in list
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	8d 53       	subi	r24, 0x3D	; 61
    1d58:	9c 4f       	sbci	r25, 0xFC	; 252
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	20 81       	ld	r18, Z
    1d5e:	31 81       	ldd	r19, Z+1	; 0x01
    1d60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d62:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d64:	28 17       	cp	r18, r24
    1d66:	39 07       	cpc	r19, r25
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <set_high_score_list+0x3c>
    1d6a:	42 c0       	rjmp	.+132    	; 0x1df0 <set_high_score_list+0xc0>
		{
			if (i == 2) // Last element, simply replace
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	69 f4       	brne	.+26     	; 0x1d8c <set_high_score_list+0x5c>
			{
				high_score[i] = score;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	88 2f       	mov	r24, r24
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	8d 53       	subi	r24, 0x3D	; 61
    1d7e:	9c 4f       	sbci	r25, 0xFC	; 252
    1d80:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d82:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d84:	fc 01       	movw	r30, r24
    1d86:	31 83       	std	Z+1, r19	; 0x01
    1d88:	20 83       	st	Z, r18
					high_score[k] = high_score[k-1];
					k--;
				}
				high_score[i] = score;
			}
			break;
    1d8a:	39 c0       	rjmp	.+114    	; 0x1dfe <set_high_score_list+0xce>
			{
				high_score[i] = score;
			}
			else // Move lower values down the list, insert in correct position
			{
				int k = 2;
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9b 83       	std	Y+3, r25	; 0x03
    1d92:	8a 83       	std	Y+2, r24	; 0x02
				while(k > i)
    1d94:	18 c0       	rjmp	.+48     	; 0x1dc6 <set_high_score_list+0x96>
				{
					high_score[k] = high_score[k-1];
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	8d 53       	subi	r24, 0x3D	; 61
    1da2:	9c 4f       	sbci	r25, 0xFC	; 252
    1da4:	fc 01       	movw	r30, r24
    1da6:	20 81       	ld	r18, Z
    1da8:	31 81       	ldd	r19, Z+1	; 0x01
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	8d 53       	subi	r24, 0x3D	; 61
    1db4:	9c 4f       	sbci	r25, 0xFC	; 252
    1db6:	fc 01       	movw	r30, r24
    1db8:	31 83       	std	Z+1, r19	; 0x01
    1dba:	20 83       	st	Z, r18
					k--;
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	9b 83       	std	Y+3, r25	; 0x03
    1dc4:	8a 83       	std	Y+2, r24	; 0x02
				high_score[i] = score;
			}
			else // Move lower values down the list, insert in correct position
			{
				int k = 2;
				while(k > i)
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd0:	28 17       	cp	r18, r24
    1dd2:	39 07       	cpc	r19, r25
    1dd4:	04 f3       	brlt	.-64     	; 0x1d96 <set_high_score_list+0x66>
				{
					high_score[k] = high_score[k-1];
					k--;
				}
				high_score[i] = score;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	8d 53       	subi	r24, 0x3D	; 61
    1de2:	9c 4f       	sbci	r25, 0xFC	; 252
    1de4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1de6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1de8:	fc 01       	movw	r30, r24
    1dea:	31 83       	std	Z+1, r19	; 0x01
    1dec:	20 83       	st	Z, r18
			}
			break;
    1dee:	07 c0       	rjmp	.+14     	; 0x1dfe <set_high_score_list+0xce>
}

// Insert new score into the highscore list (if new score is high score)
void set_high_score_list(int score)
{
	for (uint8_t i=0; i < 3; i++)
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	8f 5f       	subi	r24, 0xFF	; 255
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	83 30       	cpi	r24, 0x03	; 3
    1dfa:	08 f4       	brcc	.+2      	; 0x1dfe <set_high_score_list+0xce>
    1dfc:	a7 cf       	rjmp	.-178    	; 0x1d4c <set_high_score_list+0x1c>
			break;
		}
		
	}
	// Sort list just in case
	sort_list(high_score,3);
    1dfe:	63 e0       	ldi	r22, 0x03	; 3
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	83 ec       	ldi	r24, 0xC3	; 195
    1e04:	93 e0       	ldi	r25, 0x03	; 3
    1e06:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <sort_list>
	int_union_bytes first;
	int_union_bytes second;
	int_union_bytes third;
	first.int_value = high_score[0];
    1e0a:	80 91 c3 03 	lds	r24, 0x03C3
    1e0e:	90 91 c4 03 	lds	r25, 0x03C4
    1e12:	9d 83       	std	Y+5, r25	; 0x05
    1e14:	8c 83       	std	Y+4, r24	; 0x04
	second.int_value = high_score[1];
    1e16:	80 91 c5 03 	lds	r24, 0x03C5
    1e1a:	90 91 c6 03 	lds	r25, 0x03C6
    1e1e:	9f 83       	std	Y+7, r25	; 0x07
    1e20:	8e 83       	std	Y+6, r24	; 0x06
	third.int_value = high_score[2];
    1e22:	80 91 c7 03 	lds	r24, 0x03C7
    1e26:	90 91 c8 03 	lds	r25, 0x03C8
    1e2a:	99 87       	std	Y+9, r25	; 0x09
    1e2c:	88 87       	std	Y+8, r24	; 0x08
	// Store highscore in eeprom
	eeprom_write_word((uint16_t*)0,high_score[0]);
    1e2e:	80 91 c3 03 	lds	r24, 0x03C3
    1e32:	90 91 c4 03 	lds	r25, 0x03C4
    1e36:	bc 01       	movw	r22, r24
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__eewr_word_m162>
	eeprom_write_word((uint16_t*)2,high_score[1]);
    1e40:	80 91 c5 03 	lds	r24, 0x03C5
    1e44:	90 91 c6 03 	lds	r25, 0x03C6
    1e48:	bc 01       	movw	r22, r24
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__eewr_word_m162>
	eeprom_write_word((uint16_t*)4,high_score[2]);
    1e52:	80 91 c7 03 	lds	r24, 0x03C7
    1e56:	90 91 c8 03 	lds	r25, 0x03C8
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	84 e0       	ldi	r24, 0x04	; 4
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__eewr_word_m162>

	// Convert integers to strings
	itoa(high_score[0], first_place,10);
    1e64:	80 91 c3 03 	lds	r24, 0x03C3
    1e68:	90 91 c4 03 	lds	r25, 0x03C4
    1e6c:	4a e0       	ldi	r20, 0x0A	; 10
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	6b ee       	ldi	r22, 0xEB	; 235
    1e72:	73 e0       	ldi	r23, 0x03	; 3
    1e74:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
	itoa(high_score[1], second_place,10);
    1e78:	80 91 c5 03 	lds	r24, 0x03C5
    1e7c:	90 91 c6 03 	lds	r25, 0x03C6
    1e80:	4a e0       	ldi	r20, 0x0A	; 10
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	6c e2       	ldi	r22, 0x2C	; 44
    1e86:	74 e0       	ldi	r23, 0x04	; 4
    1e88:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
	itoa(high_score[2], third_place,10);
    1e8c:	80 91 c7 03 	lds	r24, 0x03C7
    1e90:	90 91 c8 03 	lds	r25, 0x03C8
    1e94:	4a e0       	ldi	r20, 0x0A	; 10
    1e96:	50 e0       	ldi	r21, 0x00	; 0
    1e98:	6f e0       	ldi	r22, 0x0F	; 15
    1e9a:	74 e0       	ldi	r23, 0x04	; 4
    1e9c:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
}
    1ea0:	2b 96       	adiw	r28, 0x0b	; 11
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	08 95       	ret

00001eb2 <sort_list>:

// Insertion sort in descending order
void sort_list(int * list[], int size)
{
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	2a 97       	sbiw	r28, 0x0a	; 10
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	98 87       	std	Y+8, r25	; 0x08
    1ec8:	8f 83       	std	Y+7, r24	; 0x07
    1eca:	7a 87       	std	Y+10, r23	; 0x0a
    1ecc:	69 87       	std	Y+9, r22	; 0x09
	int length = size;
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t d;
	int t;
	for (uint8_t c = 1 ; c <= length - 1; c++) {
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	8a 83       	std	Y+2, r24	; 0x02
    1eda:	62 c0       	rjmp	.+196    	; 0x1fa0 <sort_list+0xee>
		d = c;
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
		
		while ( d > 0 && list[d] > list[d-1]) {
    1ee0:	3b c0       	rjmp	.+118    	; 0x1f58 <sort_list+0xa6>
			t          = list[d];
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	88 2f       	mov	r24, r24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	2f 81       	ldd	r18, Y+7	; 0x07
    1eee:	38 85       	ldd	r19, Y+8	; 0x08
    1ef0:	82 0f       	add	r24, r18
    1ef2:	93 1f       	adc	r25, r19
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
			list[d]    = list[d-1];
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	2f 81       	ldd	r18, Y+7	; 0x07
    1f0a:	38 85       	ldd	r19, Y+8	; 0x08
    1f0c:	82 0f       	add	r24, r18
    1f0e:	93 1f       	adc	r25, r19
    1f10:	29 81       	ldd	r18, Y+1	; 0x01
    1f12:	22 2f       	mov	r18, r18
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	21 50       	subi	r18, 0x01	; 1
    1f18:	30 48       	sbci	r19, 0x80	; 128
    1f1a:	22 0f       	add	r18, r18
    1f1c:	33 1f       	adc	r19, r19
    1f1e:	4f 81       	ldd	r20, Y+7	; 0x07
    1f20:	58 85       	ldd	r21, Y+8	; 0x08
    1f22:	24 0f       	add	r18, r20
    1f24:	35 1f       	adc	r19, r21
    1f26:	f9 01       	movw	r30, r18
    1f28:	20 81       	ld	r18, Z
    1f2a:	31 81       	ldd	r19, Z+1	; 0x01
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	31 83       	std	Z+1, r19	; 0x01
    1f30:	20 83       	st	Z, r18
			list[d-1]  = t;
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	81 50       	subi	r24, 0x01	; 1
    1f3a:	90 48       	sbci	r25, 0x80	; 128
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	2f 81       	ldd	r18, Y+7	; 0x07
    1f42:	38 85       	ldd	r19, Y+8	; 0x08
    1f44:	82 0f       	add	r24, r18
    1f46:	93 1f       	adc	r25, r19
    1f48:	2d 81       	ldd	r18, Y+5	; 0x05
    1f4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	31 83       	std	Z+1, r19	; 0x01
    1f50:	20 83       	st	Z, r18
			
			d--;
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	81 50       	subi	r24, 0x01	; 1
    1f56:	89 83       	std	Y+1, r24	; 0x01
	uint8_t d;
	int t;
	for (uint8_t c = 1 ; c <= length - 1; c++) {
		d = c;
		
		while ( d > 0 && list[d] > list[d-1]) {
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	88 23       	and	r24, r24
    1f5c:	f1 f0       	breq	.+60     	; 0x1f9a <sort_list+0xe8>
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	2f 81       	ldd	r18, Y+7	; 0x07
    1f6a:	38 85       	ldd	r19, Y+8	; 0x08
    1f6c:	82 0f       	add	r24, r18
    1f6e:	93 1f       	adc	r25, r19
    1f70:	fc 01       	movw	r30, r24
    1f72:	20 81       	ld	r18, Z
    1f74:	31 81       	ldd	r19, Z+1	; 0x01
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	81 50       	subi	r24, 0x01	; 1
    1f7e:	90 48       	sbci	r25, 0x80	; 128
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	4f 81       	ldd	r20, Y+7	; 0x07
    1f86:	58 85       	ldd	r21, Y+8	; 0x08
    1f88:	84 0f       	add	r24, r20
    1f8a:	95 1f       	adc	r25, r21
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	82 17       	cp	r24, r18
    1f94:	93 07       	cpc	r25, r19
    1f96:	08 f4       	brcc	.+2      	; 0x1f9a <sort_list+0xe8>
    1f98:	a4 cf       	rjmp	.-184    	; 0x1ee2 <sort_list+0x30>
void sort_list(int * list[], int size)
{
	int length = size;
	uint8_t d;
	int t;
	for (uint8_t c = 1 ; c <= length - 1; c++) {
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	8f 5f       	subi	r24, 0xFF	; 255
    1f9e:	8a 83       	std	Y+2, r24	; 0x02
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	82 17       	cp	r24, r18
    1fae:	93 07       	cpc	r25, r19
    1fb0:	0c f0       	brlt	.+2      	; 0x1fb4 <sort_list+0x102>
    1fb2:	94 cf       	rjmp	.-216    	; 0x1edc <sort_list+0x2a>
			list[d-1]  = t;
			
			d--;
		}
	}
}
    1fb4:	2a 96       	adiw	r28, 0x0a	; 10
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <menu_playing>:

// Print game playing menu
void menu_playing(uint8_t lives)
{
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	1f 92       	push	r1
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	89 83       	std	Y+1, r24	; 0x01
	oled_reset();
    1fd2:	0e 94 96 11 	call	0x232c	; 0x232c <oled_reset>
	oled_home();
    1fd6:	0e 94 b0 11 	call	0x2360	; 0x2360 <oled_home>
	oled_pos(3,2);
    1fda:	62 e0       	ldi	r22, 0x02	; 2
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string(playing);
    1fe2:	82 e8       	ldi	r24, 0x82	; 130
    1fe4:	93 e0       	ldi	r25, 0x03	; 3
    1fe6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(5,2);
    1fea:	62 e0       	ldi	r22, 0x02	; 2
    1fec:	85 e0       	ldi	r24, 0x05	; 5
    1fee:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string(number_of_lives);
    1ff2:	8f e8       	ldi	r24, 0x8F	; 143
    1ff4:	93 e0       	ldi	r25, 0x03	; 3
    1ff6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	oled_pos(5,sizeof(number_of_lives)+1);
    1ffa:	6d e0       	ldi	r22, 0x0D	; 13
    1ffc:	85 e0       	ldi	r24, 0x05	; 5
    1ffe:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string(itoa(lives,lives_int,10));
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	4a e0       	ldi	r20, 0x0A	; 10
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	67 e1       	ldi	r22, 0x17	; 23
    200e:	74 e0       	ldi	r23, 0x04	; 4
    2010:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
    2014:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
}
    2018:	0f 90       	pop	r0
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	08 95       	ret

00002020 <menu_print_played_time>:

// Print the elapsed time
void menu_print_played_time(int time)
{
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	00 d0       	rcall	.+0      	; 0x2026 <menu_print_played_time+0x6>
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01
	oled_pos(6,2);
    202e:	62 e0       	ldi	r22, 0x02	; 2
    2030:	86 e0       	ldi	r24, 0x06	; 6
    2032:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("TIME:");
    2036:	82 e8       	ldi	r24, 0x82	; 130
    2038:	92 e0       	ldi	r25, 0x02	; 2
    203a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
	menu_reset_played_time();
    203e:	0e 94 34 10 	call	0x2068	; 0x2068 <menu_reset_played_time>
	oled_pos(6,8);
    2042:	68 e0       	ldi	r22, 0x08	; 8
    2044:	86 e0       	ldi	r24, 0x06	; 6
    2046:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string(itoa(time,time_played,10));
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	4a e0       	ldi	r20, 0x0A	; 10
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	63 ee       	ldi	r22, 0xE3	; 227
    2054:	73 e0       	ldi	r23, 0x03	; 3
    2056:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
    205a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	08 95       	ret

00002068 <menu_reset_played_time>:

// Clear the elapsed time on OLED
void menu_reset_played_time()
{
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	oled_pos(6,8);
    2070:	68 e0       	ldi	r22, 0x08	; 8
    2072:	86 e0       	ldi	r24, 0x06	; 6
    2074:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("        ");
    2078:	88 e8       	ldi	r24, 0x88	; 136
    207a:	92 e0       	ldi	r25, 0x02	; 2
    207c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
}
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	08 95       	ret

00002086 <reset_highscore>:

void reset_highscore()
{
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	60 97       	sbiw	r28, 0x10	; 16
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
	// Set high score to 0
	for (int i = 0; i < 3; i++)
    209a:	1a 82       	std	Y+2, r1	; 0x02
    209c:	19 82       	std	Y+1, r1	; 0x01
    209e:	0e c0       	rjmp	.+28     	; 0x20bc <reset_highscore+0x36>
	{
		high_score[i] = 0;
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	8d 53       	subi	r24, 0x3D	; 61
    20aa:	9c 4f       	sbci	r25, 0xFC	; 252
    20ac:	fc 01       	movw	r30, r24
    20ae:	11 82       	std	Z+1, r1	; 0x01
    20b0:	10 82       	st	Z, r1
}

void reset_highscore()
{
	// Set high score to 0
	for (int i = 0; i < 3; i++)
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
    20c0:	83 30       	cpi	r24, 0x03	; 3
    20c2:	91 05       	cpc	r25, r1
    20c4:	6c f3       	brlt	.-38     	; 0x20a0 <reset_highscore+0x1a>
	{
		high_score[i] = 0;
	}
	// Reset high score in eeprom
	eeprom_write_word((uint16_t*)0,high_score[0]);
    20c6:	80 91 c3 03 	lds	r24, 0x03C3
    20ca:	90 91 c4 03 	lds	r25, 0x03C4
    20ce:	bc 01       	movw	r22, r24
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__eewr_word_m162>
	eeprom_write_word((uint16_t*)2,high_score[1]);
    20d8:	80 91 c5 03 	lds	r24, 0x03C5
    20dc:	90 91 c6 03 	lds	r25, 0x03C6
    20e0:	bc 01       	movw	r22, r24
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__eewr_word_m162>
	eeprom_write_word((uint16_t*)4,high_score[2]);
    20ea:	80 91 c7 03 	lds	r24, 0x03C7
    20ee:	90 91 c8 03 	lds	r25, 0x03C8
    20f2:	bc 01       	movw	r22, r24
    20f4:	84 e0       	ldi	r24, 0x04	; 4
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__eewr_word_m162>
	
	// Convert integers to strings
	itoa(high_score[0], first_place,10);
    20fc:	80 91 c3 03 	lds	r24, 0x03C3
    2100:	90 91 c4 03 	lds	r25, 0x03C4
    2104:	4a e0       	ldi	r20, 0x0A	; 10
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	6b ee       	ldi	r22, 0xEB	; 235
    210a:	73 e0       	ldi	r23, 0x03	; 3
    210c:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
	itoa(high_score[1], second_place,10);
    2110:	80 91 c5 03 	lds	r24, 0x03C5
    2114:	90 91 c6 03 	lds	r25, 0x03C6
    2118:	4a e0       	ldi	r20, 0x0A	; 10
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	6c e2       	ldi	r22, 0x2C	; 44
    211e:	74 e0       	ldi	r23, 0x04	; 4
    2120:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
	itoa(high_score[2], third_place,10);
    2124:	80 91 c7 03 	lds	r24, 0x03C7
    2128:	90 91 c8 03 	lds	r25, 0x03C8
    212c:	4a e0       	ldi	r20, 0x0A	; 10
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	6f e0       	ldi	r22, 0x0F	; 15
    2132:	74 e0       	ldi	r23, 0x04	; 4
    2134:	0e 94 41 18 	call	0x3082	; 0x3082 <itoa>
	
	oled_reset();
    2138:	0e 94 96 11 	call	0x232c	; 0x232c <oled_reset>
	oled_pos(3,2);
    213c:	62 e0       	ldi	r22, 0x02	; 2
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	oled_print_string("HGHSCR RST!");
    2144:	81 e9       	ldi	r24, 0x91	; 145
    2146:	92 e0       	ldi	r25, 0x02	; 2
    2148:	0e 94 79 12 	call	0x24f2	; 0x24f2 <oled_print_string>
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	aa ef       	ldi	r26, 0xFA	; 250
    2152:	b3 e4       	ldi	r27, 0x43	; 67
    2154:	8b 83       	std	Y+3, r24	; 0x03
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	ad 83       	std	Y+5, r26	; 0x05
    215a:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    215c:	2a e9       	ldi	r18, 0x9A	; 154
    215e:	39 e9       	ldi	r19, 0x99	; 153
    2160:	49 e9       	ldi	r20, 0x99	; 153
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	6b 81       	ldd	r22, Y+3	; 0x03
    2166:	7c 81       	ldd	r23, Y+4	; 0x04
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	8f 83       	std	Y+7, r24	; 0x07
    2176:	98 87       	std	Y+8, r25	; 0x08
    2178:	a9 87       	std	Y+9, r26	; 0x09
    217a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e8       	ldi	r20, 0x80	; 128
    2182:	5f e3       	ldi	r21, 0x3F	; 63
    2184:	6f 81       	ldd	r22, Y+7	; 0x07
    2186:	78 85       	ldd	r23, Y+8	; 0x08
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <reset_highscore+0x118>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9c 87       	std	Y+12, r25	; 0x0c
    219a:	8b 87       	std	Y+11, r24	; 0x0b
    219c:	3f c0       	rjmp	.+126    	; 0x221c <reset_highscore+0x196>
	else if (__tmp > 65535)
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	6f 81       	ldd	r22, Y+7	; 0x07
    21a8:	78 85       	ldd	r23, Y+8	; 0x08
    21aa:	89 85       	ldd	r24, Y+9	; 0x09
    21ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ae:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__gesf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <reset_highscore+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	6b 81       	ldd	r22, Y+3	; 0x03
    21c0:	7c 81       	ldd	r23, Y+4	; 0x04
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9c 87       	std	Y+12, r25	; 0x0c
    21dc:	8b 87       	std	Y+11, r24	; 0x0b
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <reset_highscore+0x178>
    21e0:	8a e7       	ldi	r24, 0x7A	; 122
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9e 87       	std	Y+14, r25	; 0x0e
    21e6:	8d 87       	std	Y+13, r24	; 0x0d
    21e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <reset_highscore+0x166>
    21f0:	9e 87       	std	Y+14, r25	; 0x0e
    21f2:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	9c 87       	std	Y+12, r25	; 0x0c
    21fc:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2200:	9c 85       	ldd	r25, Y+12	; 0x0c
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <reset_highscore+0x15a>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <reset_highscore+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	6f 81       	ldd	r22, Y+7	; 0x07
    220a:	78 85       	ldd	r23, Y+8	; 0x08
    220c:	89 85       	ldd	r24, Y+9	; 0x09
    220e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2210:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9c 87       	std	Y+12, r25	; 0x0c
    221a:	8b 87       	std	Y+11, r24	; 0x0b
    221c:	8b 85       	ldd	r24, Y+11	; 0x0b
    221e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2220:	98 8b       	std	Y+16, r25	; 0x10
    2222:	8f 87       	std	Y+15, r24	; 0x0f
    2224:	8f 85       	ldd	r24, Y+15	; 0x0f
    2226:	98 89       	ldd	r25, Y+16	; 0x10
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <reset_highscore+0x1a2>
    222c:	98 8b       	std	Y+16, r25	; 0x10
    222e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	print_menu(current_menu);
    2230:	80 91 f3 03 	lds	r24, 0x03F3
    2234:	90 91 f4 03 	lds	r25, 0x03F4
    2238:	0e 94 25 0c 	call	0x184a	; 0x184a <print_menu>
    223c:	60 96       	adiw	r28, 0x10	; 16
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	08 95       	ret

0000224e <oled_init>:
uint8_t getCurrentLine(){
	return currentLine;
}

// Init functions copied from datasheet
void oled_init(){
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
	
	
	write_c(0xae);        //  display  off
    2256:	8e ea       	ldi	r24, 0xAE	; 174
    2258:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xa1);        //segment  remap
    225c:	81 ea       	ldi	r24, 0xA1	; 161
    225e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xda);        //common  pads  hardware:  alternative
    2262:	8a ed       	ldi	r24, 0xDA	; 218
    2264:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x12);
    2268:	82 e1       	ldi	r24, 0x12	; 18
    226a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xc8);        //common output scan direction:com63~com0
    226e:	88 ec       	ldi	r24, 0xC8	; 200
    2270:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xa8);        //multiplex  ration  mode:63
    2274:	88 ea       	ldi	r24, 0xA8	; 168
    2276:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x3f);
    227a:	8f e3       	ldi	r24, 0x3F	; 63
    227c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xd5);        //display divide ratio/osc. freq. mode
    2280:	85 ed       	ldi	r24, 0xD5	; 213
    2282:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x80);
    2286:	80 e8       	ldi	r24, 0x80	; 128
    2288:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x81);        //contrast  control
    228c:	81 e8       	ldi	r24, 0x81	; 129
    228e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x50);
    2292:	80 e5       	ldi	r24, 0x50	; 80
    2294:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xd9);        //set  pre-charge  period
    2298:	89 ed       	ldi	r24, 0xD9	; 217
    229a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x21);
    229e:	81 e2       	ldi	r24, 0x21	; 33
    22a0:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x20);        //Set  Memory  Addressing  Mode
    22a4:	80 e2       	ldi	r24, 0x20	; 32
    22a6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x02);
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xdb);        //VCOM  deselect  level  mode
    22b0:	8b ed       	ldi	r24, 0xDB	; 219
    22b2:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x30);
    22b6:	80 e3       	ldi	r24, 0x30	; 48
    22b8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xad);        //master  configuration
    22bc:	8d ea       	ldi	r24, 0xAD	; 173
    22be:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x00);
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xa4);        //out  follows  RAM  content
    22c8:	84 ea       	ldi	r24, 0xA4	; 164
    22ca:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xa6);        //set  normal  display
    22ce:	86 ea       	ldi	r24, 0xA6	; 166
    22d0:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0xaf);        //  display  on
    22d4:	8f ea       	ldi	r24, 0xAF	; 175
    22d6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	oled_reset();
    22da:	0e 94 96 11 	call	0x232c	; 0x232c <oled_reset>
	oled_home();
    22de:	0e 94 b0 11 	call	0x2360	; 0x2360 <oled_home>
	
}
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <write_c>:

// Write single command byte
void write_c(unsigned char char_command){
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	1f 92       	push	r1
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	89 83       	std	Y+1, r24	; 0x01
	*command_address= char_command;
    22f4:	80 91 0f 01 	lds	r24, 0x010F
    22f8:	90 91 10 01 	lds	r25, 0x0110
    22fc:	29 81       	ldd	r18, Y+1	; 0x01
    22fe:	fc 01       	movw	r30, r24
    2300:	20 83       	st	Z, r18
}
    2302:	0f 90       	pop	r0
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	08 95       	ret

0000230a <write_d>:

// Write single data byte
void write_d(unsigned char char_data){
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	1f 92       	push	r1
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	89 83       	std	Y+1, r24	; 0x01
	*data_address = char_data;
    2316:	80 91 11 01 	lds	r24, 0x0111
    231a:	90 91 12 01 	lds	r25, 0x0112
    231e:	29 81       	ldd	r18, Y+1	; 0x01
    2320:	fc 01       	movw	r30, r24
    2322:	20 83       	st	Z, r18
}
    2324:	0f 90       	pop	r0
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	08 95       	ret

0000232c <oled_reset>:

// Clear entire display
void oled_reset(){
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	00 d0       	rcall	.+0      	; 0x2332 <oled_reset+0x6>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i<8;i++){
    2336:	1a 82       	std	Y+2, r1	; 0x02
    2338:	19 82       	std	Y+1, r1	; 0x01
    233a:	08 c0       	rjmp	.+16     	; 0x234c <oled_reset+0x20>
		oled_clear_line(i);
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	0e 94 0e 12 	call	0x241c	; 0x241c <oled_clear_line>
	*data_address = char_data;
}

// Clear entire display
void oled_reset(){
	for (int i = 0; i<8;i++){
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	9a 81       	ldd	r25, Y+2	; 0x02
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	9a 83       	std	Y+2, r25	; 0x02
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	88 30       	cpi	r24, 0x08	; 8
    2352:	91 05       	cpc	r25, r1
    2354:	9c f3       	brlt	.-26     	; 0x233c <oled_reset+0x10>
		oled_clear_line(i);
	}
}
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	08 95       	ret

00002360 <oled_home>:

void oled_home(){
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
	write_c(0x21);//starting command(set column address)
    2368:	81 e2       	ldi	r24, 0x21	; 33
    236a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x00);//start of column address
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x7F);//end of column address
    2374:	8f e7       	ldi	r24, 0x7F	; 127
    2376:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	
	write_c(0x22);//starting command (set page address)
    237a:	82 e2       	ldi	r24, 0x22	; 34
    237c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x00);// start of page address
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	write_c(0x07);//end of page address
    2386:	87 e0       	ldi	r24, 0x07	; 7
    2388:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	currentLine=0;
    238c:	10 92 34 04 	sts	0x0434, r1
}
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <oled_goto_line>:

void oled_goto_line(uint8_t line){
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	1f 92       	push	r1
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	89 83       	std	Y+1, r24	; 0x01
	if (line < 8){
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	88 30       	cpi	r24, 0x08	; 8
    23a6:	38 f4       	brcc	.+14     	; 0x23b6 <oled_goto_line+0x20>
		currentLine=line;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	80 93 34 04 	sts	0x0434, r24
		write_c(0xb0 + line);
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	80 55       	subi	r24, 0x50	; 80
    23b2:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	}
}
    23b6:	0f 90       	pop	r0
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	08 95       	ret

000023be <oled_goto_column>:

void oled_goto_column(uint8_t column){	
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <oled_goto_column+0x6>
    23c4:	1f 92       	push	r1
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	8b 83       	std	Y+3, r24	; 0x03
	if(column*FONTWIDTH <= 127)
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	80 38       	cpi	r24, 0x80	; 128
    23e0:	91 05       	cpc	r25, r1
    23e2:	b4 f4       	brge	.+44     	; 0x2410 <oled_goto_column+0x52>
	{
		column = column*FONTWIDTH;
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	88 0f       	add	r24, r24
    23e8:	88 0f       	add	r24, r24
    23ea:	88 0f       	add	r24, r24
    23ec:	8b 83       	std	Y+3, r24	; 0x03
		current_column = column;
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	80 93 35 04 	sts	0x0435, r24
		char c1 = 0x00 + (column & 0x0F);
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	8f 70       	andi	r24, 0x0F	; 15
    23f8:	89 83       	std	Y+1, r24	; 0x01
		char c2 = 0x10 + ((column & 0xF0)>>4);
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	82 95       	swap	r24
    23fe:	8f 70       	andi	r24, 0x0F	; 15
    2400:	80 5f       	subi	r24, 0xF0	; 240
    2402:	8a 83       	std	Y+2, r24	; 0x02
		write_c(c1);
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
		write_c(c2);
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <write_c>
	}
}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	08 95       	ret

0000241c <oled_clear_line>:
void oled_clear_line(uint8_t line){
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	00 d0       	rcall	.+0      	; 0x2422 <oled_clear_line+0x6>
    2422:	1f 92       	push	r1
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	8b 83       	std	Y+3, r24	; 0x03
	oled_goto_line(line);
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	0e 94 cb 11 	call	0x2396	; 0x2396 <oled_goto_line>
	for (int i = 0; i<128;i++)
    2430:	1a 82       	std	Y+2, r1	; 0x02
    2432:	19 82       	std	Y+1, r1	; 0x01
    2434:	08 c0       	rjmp	.+16     	; 0x2446 <oled_clear_line+0x2a>
	{
		write_d(0x00);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	0e 94 85 11 	call	0x230a	; 0x230a <write_d>
		write_c(c2);
	}
}
void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for (int i = 0; i<128;i++)
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	9a 81       	ldd	r25, Y+2	; 0x02
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	80 38       	cpi	r24, 0x80	; 128
    244c:	91 05       	cpc	r25, r1
    244e:	9c f3       	brlt	.-26     	; 0x2436 <oled_clear_line+0x1a>
	{
		write_d(0x00);
	}
}
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	08 95       	ret

0000245c <oled_pos>:
void oled_pos(uint8_t row, uint8_t column){
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	00 d0       	rcall	.+0      	; 0x2462 <oled_pos+0x6>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	6a 83       	std	Y+2, r22	; 0x02
	oled_goto_line(row);
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	0e 94 cb 11 	call	0x2396	; 0x2396 <oled_goto_line>
	oled_goto_column(column);
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	0e 94 df 11 	call	0x23be	; 0x23be <oled_goto_column>
}
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	08 95       	ret

00002480 <oled_print_char>:
void oled_print_char(char character){
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	00 d0       	rcall	.+0      	; 0x2486 <oled_print_char+0x6>
    2486:	00 d0       	rcall	.+0      	; 0x2488 <oled_print_char+0x8>
    2488:	00 d0       	rcall	.+0      	; 0x248a <oled_print_char+0xa>
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	8e 83       	std	Y+6, r24	; 0x06
	
	for (int i = 0; i<FONTWIDTH;i++)
    2490:	1a 82       	std	Y+2, r1	; 0x02
    2492:	19 82       	std	Y+1, r1	; 0x01
    2494:	20 c0       	rjmp	.+64     	; 0x24d6 <oled_print_char+0x56>
	{
		write_d(pgm_read_byte(&font[character - ' '][i]));
    2496:	8e 81       	ldd	r24, Y+6	; 0x06
    2498:	88 2f       	mov	r24, r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	80 97       	sbiw	r24, 0x20	; 32
    249e:	9c 01       	movw	r18, r24
    24a0:	22 0f       	add	r18, r18
    24a2:	33 1f       	adc	r19, r19
    24a4:	22 0f       	add	r18, r18
    24a6:	33 1f       	adc	r19, r19
    24a8:	22 0f       	add	r18, r18
    24aa:	33 1f       	adc	r19, r19
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	82 0f       	add	r24, r18
    24b2:	93 1f       	adc	r25, r19
    24b4:	80 59       	subi	r24, 0x90	; 144
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	9c 83       	std	Y+4, r25	; 0x04
    24ba:	8b 83       	std	Y+3, r24	; 0x03
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	9c 81       	ldd	r25, Y+4	; 0x04
    24c0:	fc 01       	movw	r30, r24
    24c2:	84 91       	lpm	r24, Z
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	0e 94 85 11 	call	0x230a	; 0x230a <write_d>
	oled_goto_line(row);
	oled_goto_column(column);
}
void oled_print_char(char character){
	
	for (int i = 0; i<FONTWIDTH;i++)
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	9a 81       	ldd	r25, Y+2	; 0x02
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	88 30       	cpi	r24, 0x08	; 8
    24dc:	91 05       	cpc	r25, r1
    24de:	dc f2       	brlt	.-74     	; 0x2496 <oled_print_char+0x16>
	{
		write_d(pgm_read_byte(&font[character - ' '][i]));
	}
}
    24e0:	26 96       	adiw	r28, 0x06	; 6
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <oled_print_string>:

void oled_print_string(char* data)
{
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <oled_print_string+0x6>
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <oled_print_string+0x8>
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	9c 83       	std	Y+4, r25	; 0x04
    2500:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    2502:	1a 82       	std	Y+2, r1	; 0x02
    2504:	19 82       	std	Y+1, r1	; 0x01
	while(data[i] != '\0') {
    2506:	1e c0       	rjmp	.+60     	; 0x2544 <oled_print_string+0x52>
		oled_print_char(data[i]);
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	2b 81       	ldd	r18, Y+3	; 0x03
    250e:	3c 81       	ldd	r19, Y+4	; 0x04
    2510:	82 0f       	add	r24, r18
    2512:	93 1f       	adc	r25, r19
    2514:	fc 01       	movw	r30, r24
    2516:	80 81       	ld	r24, Z
    2518:	0e 94 40 12 	call	0x2480	; 0x2480 <oled_print_char>
		i++;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
		if (i==16 || i==32)
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	9a 81       	ldd	r25, Y+2	; 0x02
    252a:	80 31       	cpi	r24, 0x10	; 16
    252c:	91 05       	cpc	r25, r1
    252e:	29 f0       	breq	.+10     	; 0x253a <oled_print_string+0x48>
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	9a 81       	ldd	r25, Y+2	; 0x02
    2534:	80 32       	cpi	r24, 0x20	; 32
    2536:	91 05       	cpc	r25, r1
    2538:	29 f4       	brne	.+10     	; 0x2544 <oled_print_string+0x52>
		{
			oled_goto_line(currentLine+1);
    253a:	80 91 34 04 	lds	r24, 0x0434
    253e:	8f 5f       	subi	r24, 0xFF	; 255
    2540:	0e 94 cb 11 	call	0x2396	; 0x2396 <oled_goto_line>
}

void oled_print_string(char* data)
{
	int i = 0;
	while(data[i] != '\0') {
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a 81       	ldd	r25, Y+2	; 0x02
    2548:	2b 81       	ldd	r18, Y+3	; 0x03
    254a:	3c 81       	ldd	r19, Y+4	; 0x04
    254c:	82 0f       	add	r24, r18
    254e:	93 1f       	adc	r25, r19
    2550:	fc 01       	movw	r30, r24
    2552:	80 81       	ld	r24, Z
    2554:	88 23       	and	r24, r24
    2556:	c1 f6       	brne	.-80     	; 0x2508 <oled_print_string+0x16>
		if (i==16 || i==32)
		{
			oled_goto_line(currentLine+1);
		}
	}
}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	08 95       	ret

00002566 <oled_print_arrow>:

// Prints an arrow pointing left on the given row and column
void oled_print_arrow(uint8_t row,uint8_t col)
{
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	00 d0       	rcall	.+0      	; 0x256c <oled_print_arrow+0x6>
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	6a 83       	std	Y+2, r22	; 0x02
	oled_pos(row, col);
    2574:	6a 81       	ldd	r22, Y+2	; 0x02
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	0e 94 2e 12 	call	0x245c	; 0x245c <oled_pos>
	write_d(0b00011000);
    257c:	88 e1       	ldi	r24, 0x18	; 24
    257e:	0e 94 85 11 	call	0x230a	; 0x230a <write_d>
	write_d(0b00011000);
    2582:	88 e1       	ldi	r24, 0x18	; 24
    2584:	0e 94 85 11 	call	0x230a	; 0x230a <write_d>
	write_d(0b01111110);
    2588:	8e e7       	ldi	r24, 0x7E	; 126
    258a:	0e 94 85 11 	call	0x230a	; 0x230a <write_d>
	write_d(0b00111100);
    258e:	8c e3       	ldi	r24, 0x3C	; 60
    2590:	0e 94 85 11 	call	0x230a	; 0x230a <write_d>
	write_d(0b00011000);
    2594:	88 e1       	ldi	r24, 0x18	; 24
    2596:	0e 94 85 11 	call	0x230a	; 0x230a <write_d>
}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	08 95       	ret

000025a4 <spi_init>:
#include "spi.h"
#include "setup.h"


void spi_init()
{
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <spi_init+0x6>
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	// PB4 = !SS, PB5 = MOSI, PB6 = MISO, PB7 = SCK
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SPI_SS);
    25ae:	87 e3       	ldi	r24, 0x37	; 55
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	27 e3       	ldi	r18, 0x37	; 55
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	f9 01       	movw	r30, r18
    25b8:	20 81       	ld	r18, Z
    25ba:	20 6b       	ori	r18, 0xB0	; 176
    25bc:	fc 01       	movw	r30, r24
    25be:	20 83       	st	Z, r18
	DDRB &= ~(1<<MISO);
    25c0:	87 e3       	ldi	r24, 0x37	; 55
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	27 e3       	ldi	r18, 0x37	; 55
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	f9 01       	movw	r30, r18
    25ca:	20 81       	ld	r18, Z
    25cc:	2f 7b       	andi	r18, 0xBF	; 191
    25ce:	fc 01       	movw	r30, r24
    25d0:	20 83       	st	Z, r18
	 
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    25d2:	8d e2       	ldi	r24, 0x2D	; 45
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	2d e2       	ldi	r18, 0x2D	; 45
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	f9 01       	movw	r30, r18
    25dc:	20 81       	ld	r18, Z
    25de:	21 65       	ori	r18, 0x51	; 81
    25e0:	fc 01       	movw	r30, r24
    25e2:	20 83       	st	Z, r18

	// Read SPSR and SPDR to clear interrupt flag
	char c1 = SPSR;
    25e4:	8e e2       	ldi	r24, 0x2E	; 46
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	fc 01       	movw	r30, r24
    25ea:	80 81       	ld	r24, Z
    25ec:	89 83       	std	Y+1, r24	; 0x01
	char c2 = SPDR;
    25ee:	8f e2       	ldi	r24, 0x2F	; 47
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	fc 01       	movw	r30, r24
    25f4:	80 81       	ld	r24, Z
    25f6:	8a 83       	std	Y+2, r24	; 0x02
}
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	08 95       	ret

00002602 <spi_send>:
void spi_send(char cData)
{
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	1f 92       	push	r1
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = cData;
    260e:	8f e2       	ldi	r24, 0x2F	; 47
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	29 81       	ldd	r18, Y+1	; 0x01
    2614:	fc 01       	movw	r30, r24
    2616:	20 83       	st	Z, r18
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
    2618:	00 00       	nop
    261a:	8e e2       	ldi	r24, 0x2E	; 46
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	fc 01       	movw	r30, r24
    2620:	80 81       	ld	r24, Z
    2622:	88 23       	and	r24, r24
    2624:	d4 f7       	brge	.-12     	; 0x261a <spi_send+0x18>
}
    2626:	0f 90       	pop	r0
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	08 95       	ret

0000262e <spi_read>:

char spi_read() 
{
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62

	SPDR = 0x00; // send dummy data
    2636:	8f e2       	ldi	r24, 0x2F	; 47
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	fc 01       	movw	r30, r24
    263c:	10 82       	st	Z, r1
	while(!(SPSR & (1<<SPIF))); // Wait until data is shifted into SPDR
    263e:	00 00       	nop
    2640:	8e e2       	ldi	r24, 0x2E	; 46
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	fc 01       	movw	r30, r24
    2646:	80 81       	ld	r24, Z
    2648:	88 23       	and	r24, r24
    264a:	d4 f7       	brge	.-12     	; 0x2640 <spi_read+0x12>
	return SPDR;
    264c:	8f e2       	ldi	r24, 0x2F	; 47
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	fc 01       	movw	r30, r24
    2652:	80 81       	ld	r24, Z
}
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	08 95       	ret

0000265a <spi_enable>:

void spi_enable()
{
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
	clear_bit(PORTB,SPI_SS);
    2662:	88 e3       	ldi	r24, 0x38	; 56
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	28 e3       	ldi	r18, 0x38	; 56
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	f9 01       	movw	r30, r18
    266c:	20 81       	ld	r18, Z
    266e:	2f 7e       	andi	r18, 0xEF	; 239
    2670:	fc 01       	movw	r30, r24
    2672:	20 83       	st	Z, r18
}
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	08 95       	ret

0000267a <spi_disable>:

void spi_disable()
{
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
	set_bit(PORTB,SPI_SS);
    2682:	88 e3       	ldi	r24, 0x38	; 56
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	28 e3       	ldi	r18, 0x38	; 56
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	f9 01       	movw	r30, r18
    268c:	20 81       	ld	r18, Z
    268e:	20 61       	ori	r18, 0x10	; 16
    2690:	fc 01       	movw	r30, r24
    2692:	20 83       	st	Z, r18
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	08 95       	ret

0000269a <sram_setup>:
 #include <stdio.h>
 #include "setup.h"
 #include "USART.h"
 #include "sram.h"

int sram_setup(void) {
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
	return 0;
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	90 e0       	ldi	r25, 0x00	; 0
}
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	08 95       	ret

000026ac <SRAM_test>:

uint8_t sram_read_from_address(unsigned int address) {
	volatile char *sram_address = (char *) 0x1800;
	return sram_address[address];
}
void SRAM_test(void) { 
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	62 97       	sbiw	r28, 0x12	; 18
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM 
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	98 e1       	ldi	r25, 0x18	; 24
    26c4:	9a 87       	std	Y+10, r25	; 0x0a
    26c6:	89 87       	std	Y+9, r24	; 0x09
	uint16_t ext_ram_size = 0x800; 
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	98 e0       	ldi	r25, 0x08	; 8
    26cc:	9c 87       	std	Y+12, r25	; 0x0c
    26ce:	8b 87       	std	Y+11, r24	; 0x0b
	uint16_t write_errors = 0; 
    26d0:	1a 82       	std	Y+2, r1	; 0x02
    26d2:	19 82       	std	Y+1, r1	; 0x01
	uint16_t retrieval_errors = 0;
    26d4:	1c 82       	std	Y+4, r1	; 0x04
    26d6:	1b 82       	std	Y+3, r1	; 0x03
	printf("Starting SRAM test...\n");
    26d8:	8d e9       	ldi	r24, 0x9D	; 157
    26da:	92 e0       	ldi	r25, 0x02	; 2
    26dc:	0e 94 d7 18 	call	0x31ae	; 0x31ae <puts>
	// rand() stores some internal state, so calling this function in a loop will 
	// yield different seeds each time (unless srand() is called before this function)
	// rand() stores some internal state, so calling this function in a loop will 
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
    26e0:	0e 94 28 18 	call	0x3050	; 0x3050 <rand>
    26e4:	9e 87       	std	Y+14, r25	; 0x0e
    26e6:	8d 87       	std	Y+13, r24	; 0x0d
	// Write phase: Immediately check that the correct value was stored 
	srand(seed);
    26e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ec:	0e 94 2d 18 	call	0x305a	; 0x305a <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) 
    26f0:	1e 82       	std	Y+6, r1	; 0x06
    26f2:	1d 82       	std	Y+5, r1	; 0x05
    26f4:	44 c0       	rjmp	.+136    	; 0x277e <SRAM_test+0xd2>
	{ 
		uint8_t some_value = rand(); 
    26f6:	0e 94 28 18 	call	0x3050	; 0x3050 <rand>
    26fa:	8f 87       	std	Y+15, r24	; 0x0f
		ext_ram[i] = some_value; 
    26fc:	29 85       	ldd	r18, Y+9	; 0x09
    26fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	82 0f       	add	r24, r18
    2706:	93 1f       	adc	r25, r19
    2708:	2f 85       	ldd	r18, Y+15	; 0x0f
    270a:	fc 01       	movw	r30, r24
    270c:	20 83       	st	Z, r18
		uint8_t retreived_value = ext_ram[i]; 
    270e:	29 85       	ldd	r18, Y+9	; 0x09
    2710:	3a 85       	ldd	r19, Y+10	; 0x0a
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	82 0f       	add	r24, r18
    2718:	93 1f       	adc	r25, r19
    271a:	fc 01       	movw	r30, r24
    271c:	80 81       	ld	r24, Z
    271e:	88 8b       	std	Y+16, r24	; 0x10
		if (retreived_value != some_value) 
    2720:	98 89       	ldd	r25, Y+16	; 0x10
    2722:	8f 85       	ldd	r24, Y+15	; 0x0f
    2724:	98 17       	cp	r25, r24
    2726:	31 f1       	breq	.+76     	; 0x2774 <SRAM_test+0xc8>
		{ 
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
    2728:	8f 85       	ldd	r24, Y+15	; 0x0f
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	88 89       	ldd	r24, Y+16	; 0x10
    2730:	88 2f       	mov	r24, r24
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	43 2f       	mov	r20, r19
    2736:	4f 93       	push	r20
    2738:	2f 93       	push	r18
    273a:	29 2f       	mov	r18, r25
    273c:	2f 93       	push	r18
    273e:	8f 93       	push	r24
    2740:	8e 81       	ldd	r24, Y+6	; 0x06
    2742:	8f 93       	push	r24
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	8f 93       	push	r24
    2748:	83 eb       	ldi	r24, 0xB3	; 179
    274a:	92 e0       	ldi	r25, 0x02	; 2
    274c:	89 2f       	mov	r24, r25
    274e:	8f 93       	push	r24
    2750:	83 eb       	ldi	r24, 0xB3	; 179
    2752:	92 e0       	ldi	r25, 0x02	; 2
    2754:	8f 93       	push	r24
    2756:	0e 94 bc 18 	call	0x3178	; 0x3178 <printf>
    275a:	8d b7       	in	r24, 0x3d	; 61
    275c:	9e b7       	in	r25, 0x3e	; 62
    275e:	08 96       	adiw	r24, 0x08	; 8
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	de bf       	out	0x3e, r29	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	cd bf       	out	0x3d, r28	; 61
			write_errors++; 
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
	// rand() stores some internal state, so calling this function in a loop will 
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored 
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) 
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	9e 81       	ldd	r25, Y+6	; 0x06
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	2d 81       	ldd	r18, Y+5	; 0x05
    2780:	3e 81       	ldd	r19, Y+6	; 0x06
    2782:	8b 85       	ldd	r24, Y+11	; 0x0b
    2784:	9c 85       	ldd	r25, Y+12	; 0x0c
    2786:	28 17       	cp	r18, r24
    2788:	39 07       	cpc	r19, r25
    278a:	08 f4       	brcc	.+2      	; 0x278e <SRAM_test+0xe2>
    278c:	b4 cf       	rjmp	.-152    	; 0x26f6 <SRAM_test+0x4a>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
			write_errors++; 
		} 
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed); // reset the PRNG to the state it had before the write phase 
    278e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2790:	9e 85       	ldd	r25, Y+14	; 0x0e
    2792:	0e 94 2d 18 	call	0x305a	; 0x305a <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) 
    2796:	18 86       	std	Y+8, r1	; 0x08
    2798:	1f 82       	std	Y+7, r1	; 0x07
    279a:	3b c0       	rjmp	.+118    	; 0x2812 <SRAM_test+0x166>
		{ 
			uint8_t some_value = rand(); 
    279c:	0e 94 28 18 	call	0x3050	; 0x3050 <rand>
    27a0:	89 8b       	std	Y+17, r24	; 0x11
			uint8_t retreived_value = ext_ram[i]; 
    27a2:	29 85       	ldd	r18, Y+9	; 0x09
    27a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    27a6:	8f 81       	ldd	r24, Y+7	; 0x07
    27a8:	98 85       	ldd	r25, Y+8	; 0x08
    27aa:	82 0f       	add	r24, r18
    27ac:	93 1f       	adc	r25, r19
    27ae:	fc 01       	movw	r30, r24
    27b0:	80 81       	ld	r24, Z
    27b2:	8a 8b       	std	Y+18, r24	; 0x12
			if (retreived_value != some_value) 
    27b4:	9a 89       	ldd	r25, Y+18	; 0x12
    27b6:	89 89       	ldd	r24, Y+17	; 0x11
    27b8:	98 17       	cp	r25, r24
    27ba:	31 f1       	breq	.+76     	; 0x2808 <SRAM_test+0x15c>
			{ 
				printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
    27bc:	89 89       	ldd	r24, Y+17	; 0x11
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	8a 89       	ldd	r24, Y+18	; 0x12
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	43 2f       	mov	r20, r19
    27ca:	4f 93       	push	r20
    27cc:	2f 93       	push	r18
    27ce:	29 2f       	mov	r18, r25
    27d0:	2f 93       	push	r18
    27d2:	8f 93       	push	r24
    27d4:	88 85       	ldd	r24, Y+8	; 0x08
    27d6:	8f 93       	push	r24
    27d8:	8f 81       	ldd	r24, Y+7	; 0x07
    27da:	8f 93       	push	r24
    27dc:	8c ee       	ldi	r24, 0xEC	; 236
    27de:	92 e0       	ldi	r25, 0x02	; 2
    27e0:	89 2f       	mov	r24, r25
    27e2:	8f 93       	push	r24
    27e4:	8c ee       	ldi	r24, 0xEC	; 236
    27e6:	92 e0       	ldi	r25, 0x02	; 2
    27e8:	8f 93       	push	r24
    27ea:	0e 94 bc 18 	call	0x3178	; 0x3178 <printf>
    27ee:	8d b7       	in	r24, 0x3d	; 61
    27f0:	9e b7       	in	r25, 0x3e	; 62
    27f2:	08 96       	adiw	r24, 0x08	; 8
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
				retrieval_errors++; 
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
			write_errors++; 
		} 
	}
	// Retrieval phase: Check that no values were changed during or after the write phase 
	srand(seed); // reset the PRNG to the state it had before the write phase 
	for (uint16_t i = 0; i < ext_ram_size; i++) 
    2808:	8f 81       	ldd	r24, Y+7	; 0x07
    280a:	98 85       	ldd	r25, Y+8	; 0x08
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	98 87       	std	Y+8, r25	; 0x08
    2810:	8f 83       	std	Y+7, r24	; 0x07
    2812:	2f 81       	ldd	r18, Y+7	; 0x07
    2814:	38 85       	ldd	r19, Y+8	; 0x08
    2816:	8b 85       	ldd	r24, Y+11	; 0x0b
    2818:	9c 85       	ldd	r25, Y+12	; 0x0c
    281a:	28 17       	cp	r18, r24
    281c:	39 07       	cpc	r19, r25
    281e:	08 f4       	brcc	.+2      	; 0x2822 <SRAM_test+0x176>
    2820:	bd cf       	rjmp	.-134    	; 0x279c <SRAM_test+0xf0>
			{ 
				printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value); 
				retrieval_errors++; 
			} 
		} 
		printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors); 
    2822:	8c 81       	ldd	r24, Y+4	; 0x04
    2824:	8f 93       	push	r24
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	8f 93       	push	r24
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	8f 93       	push	r24
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	8f 93       	push	r24
    2832:	89 e2       	ldi	r24, 0x29	; 41
    2834:	93 e0       	ldi	r25, 0x03	; 3
    2836:	89 2f       	mov	r24, r25
    2838:	8f 93       	push	r24
    283a:	89 e2       	ldi	r24, 0x29	; 41
    283c:	93 e0       	ldi	r25, 0x03	; 3
    283e:	8f 93       	push	r24
    2840:	0e 94 bc 18 	call	0x3178	; 0x3178 <printf>
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
	}
    2850:	62 96       	adiw	r28, 0x12	; 18
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	08 95       	ret

00002862 <USART_Init>:

FILE *uart;


void USART_Init(unsigned int ubrr)
{
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	00 d0       	rcall	.+0      	; 0x2868 <USART_Init+0x6>
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	9a 83       	std	Y+2, r25	; 0x02
    286e:	89 83       	std	Y+1, r24	; 0x01
    // Split ubrr into two bytes, write to UBRRH/L
	UBRR0H =(unsigned char) (ubrr>>8);
    2870:	80 e4       	ldi	r24, 0x40	; 64
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	29 81       	ldd	r18, Y+1	; 0x01
    2876:	3a 81       	ldd	r19, Y+2	; 0x02
    2878:	23 2f       	mov	r18, r19
    287a:	33 27       	eor	r19, r19
    287c:	fc 01       	movw	r30, r24
    287e:	20 83       	st	Z, r18
	UBRR0L =(unsigned char) (ubrr);
    2880:	89 e2       	ldi	r24, 0x29	; 41
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	29 81       	ldd	r18, Y+1	; 0x01
    2886:	fc 01       	movw	r30, r24
    2888:	20 83       	st	Z, r18
	// Enable sender and receiver
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    288a:	8a e2       	ldi	r24, 0x2A	; 42
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	28 e1       	ldi	r18, 0x18	; 24
    2890:	fc 01       	movw	r30, r24
    2892:	20 83       	st	Z, r18
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    2894:	80 e4       	ldi	r24, 0x40	; 64
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	2e e8       	ldi	r18, 0x8E	; 142
    289a:	fc 01       	movw	r30, r24
    289c:	20 83       	st	Z, r18
    
    uart = fdevopen(&USART_Transmit,&USART_Recieve);
    289e:	6f e7       	ldi	r22, 0x7F	; 127
    28a0:	74 e1       	ldi	r23, 0x14	; 20
    28a2:	8e e5       	ldi	r24, 0x5E	; 94
    28a4:	94 e1       	ldi	r25, 0x14	; 20
    28a6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <fdevopen>
    28aa:	90 93 37 04 	sts	0x0437, r25
    28ae:	80 93 36 04 	sts	0x0436, r24
}
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	08 95       	ret

000028bc <USART_Transmit>:

int USART_Transmit(char data, struct __file* dummy)
{
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <USART_Transmit+0x6>
    28c2:	1f 92       	push	r1
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	7b 83       	std	Y+3, r23	; 0x03
    28cc:	6a 83       	std	Y+2, r22	; 0x02
	// Check if bit UDRE0 in register UCSR0A is set
	// UDRE0 = usart data register empty
	while(!(UCSR0A & (1<<UDRE0)))
    28ce:	00 00       	nop
    28d0:	8b e2       	ldi	r24, 0x2B	; 43
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	fc 01       	movw	r30, r24
    28d6:	80 81       	ld	r24, Z
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	80 72       	andi	r24, 0x20	; 32
    28de:	99 27       	eor	r25, r25
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	b1 f3       	breq	.-20     	; 0x28d0 <USART_Transmit+0x14>
		;
	UDR0=data;
    28e4:	8c e2       	ldi	r24, 0x2C	; 44
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	29 81       	ldd	r18, Y+1	; 0x01
    28ea:	fc 01       	movw	r30, r24
    28ec:	20 83       	st	Z, r18
    return 0;
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	90 e0       	ldi	r25, 0x00	; 0
}
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <USART_Recieve>:

int USART_Recieve(struct __file* dummy)
{
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	00 d0       	rcall	.+0      	; 0x2904 <USART_Recieve+0x6>
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
	// Check bit RXC0 in register UCSR0A
	// RXC0 = 1 -> byte received
	while (!(UCSR0A & (1<<RXC0)))
    290c:	00 00       	nop
    290e:	8b e2       	ldi	r24, 0x2B	; 43
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	fc 01       	movw	r30, r24
    2914:	80 81       	ld	r24, Z
    2916:	88 23       	and	r24, r24
    2918:	d4 f7       	brge	.-12     	; 0x290e <USART_Recieve+0x10>
		;
	return UDR0;
    291a:	8c e2       	ldi	r24, 0x2C	; 44
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	fc 01       	movw	r30, r24
    2920:	80 81       	ld	r24, Z
    2922:	88 2f       	mov	r24, r24
    2924:	90 e0       	ldi	r25, 0x00	; 0
}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	08 95       	ret

00002930 <__subsf3>:
    2930:	50 58       	subi	r21, 0x80	; 128

00002932 <__addsf3>:
    2932:	bb 27       	eor	r27, r27
    2934:	aa 27       	eor	r26, r26
    2936:	0e d0       	rcall	.+28     	; 0x2954 <__addsf3x>
    2938:	75 c1       	rjmp	.+746    	; 0x2c24 <__fp_round>
    293a:	66 d1       	rcall	.+716    	; 0x2c08 <__fp_pscA>
    293c:	30 f0       	brcs	.+12     	; 0x294a <__addsf3+0x18>
    293e:	6b d1       	rcall	.+726    	; 0x2c16 <__fp_pscB>
    2940:	20 f0       	brcs	.+8      	; 0x294a <__addsf3+0x18>
    2942:	31 f4       	brne	.+12     	; 0x2950 <__addsf3+0x1e>
    2944:	9f 3f       	cpi	r25, 0xFF	; 255
    2946:	11 f4       	brne	.+4      	; 0x294c <__addsf3+0x1a>
    2948:	1e f4       	brtc	.+6      	; 0x2950 <__addsf3+0x1e>
    294a:	5b c1       	rjmp	.+694    	; 0x2c02 <__fp_nan>
    294c:	0e f4       	brtc	.+2      	; 0x2950 <__addsf3+0x1e>
    294e:	e0 95       	com	r30
    2950:	e7 fb       	bst	r30, 7
    2952:	51 c1       	rjmp	.+674    	; 0x2bf6 <__fp_inf>

00002954 <__addsf3x>:
    2954:	e9 2f       	mov	r30, r25
    2956:	77 d1       	rcall	.+750    	; 0x2c46 <__fp_split3>
    2958:	80 f3       	brcs	.-32     	; 0x293a <__addsf3+0x8>
    295a:	ba 17       	cp	r27, r26
    295c:	62 07       	cpc	r22, r18
    295e:	73 07       	cpc	r23, r19
    2960:	84 07       	cpc	r24, r20
    2962:	95 07       	cpc	r25, r21
    2964:	18 f0       	brcs	.+6      	; 0x296c <__addsf3x+0x18>
    2966:	71 f4       	brne	.+28     	; 0x2984 <__addsf3x+0x30>
    2968:	9e f5       	brtc	.+102    	; 0x29d0 <__addsf3x+0x7c>
    296a:	8f c1       	rjmp	.+798    	; 0x2c8a <__fp_zero>
    296c:	0e f4       	brtc	.+2      	; 0x2970 <__addsf3x+0x1c>
    296e:	e0 95       	com	r30
    2970:	0b 2e       	mov	r0, r27
    2972:	ba 2f       	mov	r27, r26
    2974:	a0 2d       	mov	r26, r0
    2976:	0b 01       	movw	r0, r22
    2978:	b9 01       	movw	r22, r18
    297a:	90 01       	movw	r18, r0
    297c:	0c 01       	movw	r0, r24
    297e:	ca 01       	movw	r24, r20
    2980:	a0 01       	movw	r20, r0
    2982:	11 24       	eor	r1, r1
    2984:	ff 27       	eor	r31, r31
    2986:	59 1b       	sub	r21, r25
    2988:	99 f0       	breq	.+38     	; 0x29b0 <__addsf3x+0x5c>
    298a:	59 3f       	cpi	r21, 0xF9	; 249
    298c:	50 f4       	brcc	.+20     	; 0x29a2 <__addsf3x+0x4e>
    298e:	50 3e       	cpi	r21, 0xE0	; 224
    2990:	68 f1       	brcs	.+90     	; 0x29ec <__addsf3x+0x98>
    2992:	1a 16       	cp	r1, r26
    2994:	f0 40       	sbci	r31, 0x00	; 0
    2996:	a2 2f       	mov	r26, r18
    2998:	23 2f       	mov	r18, r19
    299a:	34 2f       	mov	r19, r20
    299c:	44 27       	eor	r20, r20
    299e:	58 5f       	subi	r21, 0xF8	; 248
    29a0:	f3 cf       	rjmp	.-26     	; 0x2988 <__addsf3x+0x34>
    29a2:	46 95       	lsr	r20
    29a4:	37 95       	ror	r19
    29a6:	27 95       	ror	r18
    29a8:	a7 95       	ror	r26
    29aa:	f0 40       	sbci	r31, 0x00	; 0
    29ac:	53 95       	inc	r21
    29ae:	c9 f7       	brne	.-14     	; 0x29a2 <__addsf3x+0x4e>
    29b0:	7e f4       	brtc	.+30     	; 0x29d0 <__addsf3x+0x7c>
    29b2:	1f 16       	cp	r1, r31
    29b4:	ba 0b       	sbc	r27, r26
    29b6:	62 0b       	sbc	r22, r18
    29b8:	73 0b       	sbc	r23, r19
    29ba:	84 0b       	sbc	r24, r20
    29bc:	ba f0       	brmi	.+46     	; 0x29ec <__addsf3x+0x98>
    29be:	91 50       	subi	r25, 0x01	; 1
    29c0:	a1 f0       	breq	.+40     	; 0x29ea <__addsf3x+0x96>
    29c2:	ff 0f       	add	r31, r31
    29c4:	bb 1f       	adc	r27, r27
    29c6:	66 1f       	adc	r22, r22
    29c8:	77 1f       	adc	r23, r23
    29ca:	88 1f       	adc	r24, r24
    29cc:	c2 f7       	brpl	.-16     	; 0x29be <__addsf3x+0x6a>
    29ce:	0e c0       	rjmp	.+28     	; 0x29ec <__addsf3x+0x98>
    29d0:	ba 0f       	add	r27, r26
    29d2:	62 1f       	adc	r22, r18
    29d4:	73 1f       	adc	r23, r19
    29d6:	84 1f       	adc	r24, r20
    29d8:	48 f4       	brcc	.+18     	; 0x29ec <__addsf3x+0x98>
    29da:	87 95       	ror	r24
    29dc:	77 95       	ror	r23
    29de:	67 95       	ror	r22
    29e0:	b7 95       	ror	r27
    29e2:	f7 95       	ror	r31
    29e4:	9e 3f       	cpi	r25, 0xFE	; 254
    29e6:	08 f0       	brcs	.+2      	; 0x29ea <__addsf3x+0x96>
    29e8:	b3 cf       	rjmp	.-154    	; 0x2950 <__addsf3+0x1e>
    29ea:	93 95       	inc	r25
    29ec:	88 0f       	add	r24, r24
    29ee:	08 f0       	brcs	.+2      	; 0x29f2 <__addsf3x+0x9e>
    29f0:	99 27       	eor	r25, r25
    29f2:	ee 0f       	add	r30, r30
    29f4:	97 95       	ror	r25
    29f6:	87 95       	ror	r24
    29f8:	08 95       	ret

000029fa <__cmpsf2>:
    29fa:	d9 d0       	rcall	.+434    	; 0x2bae <__fp_cmp>
    29fc:	08 f4       	brcc	.+2      	; 0x2a00 <__cmpsf2+0x6>
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	08 95       	ret

00002a02 <__divsf3>:
    2a02:	0c d0       	rcall	.+24     	; 0x2a1c <__divsf3x>
    2a04:	0f c1       	rjmp	.+542    	; 0x2c24 <__fp_round>
    2a06:	07 d1       	rcall	.+526    	; 0x2c16 <__fp_pscB>
    2a08:	40 f0       	brcs	.+16     	; 0x2a1a <__divsf3+0x18>
    2a0a:	fe d0       	rcall	.+508    	; 0x2c08 <__fp_pscA>
    2a0c:	30 f0       	brcs	.+12     	; 0x2a1a <__divsf3+0x18>
    2a0e:	21 f4       	brne	.+8      	; 0x2a18 <__divsf3+0x16>
    2a10:	5f 3f       	cpi	r21, 0xFF	; 255
    2a12:	19 f0       	breq	.+6      	; 0x2a1a <__divsf3+0x18>
    2a14:	f0 c0       	rjmp	.+480    	; 0x2bf6 <__fp_inf>
    2a16:	51 11       	cpse	r21, r1
    2a18:	39 c1       	rjmp	.+626    	; 0x2c8c <__fp_szero>
    2a1a:	f3 c0       	rjmp	.+486    	; 0x2c02 <__fp_nan>

00002a1c <__divsf3x>:
    2a1c:	14 d1       	rcall	.+552    	; 0x2c46 <__fp_split3>
    2a1e:	98 f3       	brcs	.-26     	; 0x2a06 <__divsf3+0x4>

00002a20 <__divsf3_pse>:
    2a20:	99 23       	and	r25, r25
    2a22:	c9 f3       	breq	.-14     	; 0x2a16 <__divsf3+0x14>
    2a24:	55 23       	and	r21, r21
    2a26:	b1 f3       	breq	.-20     	; 0x2a14 <__divsf3+0x12>
    2a28:	95 1b       	sub	r25, r21
    2a2a:	55 0b       	sbc	r21, r21
    2a2c:	bb 27       	eor	r27, r27
    2a2e:	aa 27       	eor	r26, r26
    2a30:	62 17       	cp	r22, r18
    2a32:	73 07       	cpc	r23, r19
    2a34:	84 07       	cpc	r24, r20
    2a36:	38 f0       	brcs	.+14     	; 0x2a46 <__divsf3_pse+0x26>
    2a38:	9f 5f       	subi	r25, 0xFF	; 255
    2a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3c:	22 0f       	add	r18, r18
    2a3e:	33 1f       	adc	r19, r19
    2a40:	44 1f       	adc	r20, r20
    2a42:	aa 1f       	adc	r26, r26
    2a44:	a9 f3       	breq	.-22     	; 0x2a30 <__divsf3_pse+0x10>
    2a46:	33 d0       	rcall	.+102    	; 0x2aae <__divsf3_pse+0x8e>
    2a48:	0e 2e       	mov	r0, r30
    2a4a:	3a f0       	brmi	.+14     	; 0x2a5a <__divsf3_pse+0x3a>
    2a4c:	e0 e8       	ldi	r30, 0x80	; 128
    2a4e:	30 d0       	rcall	.+96     	; 0x2ab0 <__divsf3_pse+0x90>
    2a50:	91 50       	subi	r25, 0x01	; 1
    2a52:	50 40       	sbci	r21, 0x00	; 0
    2a54:	e6 95       	lsr	r30
    2a56:	00 1c       	adc	r0, r0
    2a58:	ca f7       	brpl	.-14     	; 0x2a4c <__divsf3_pse+0x2c>
    2a5a:	29 d0       	rcall	.+82     	; 0x2aae <__divsf3_pse+0x8e>
    2a5c:	fe 2f       	mov	r31, r30
    2a5e:	27 d0       	rcall	.+78     	; 0x2aae <__divsf3_pse+0x8e>
    2a60:	66 0f       	add	r22, r22
    2a62:	77 1f       	adc	r23, r23
    2a64:	88 1f       	adc	r24, r24
    2a66:	bb 1f       	adc	r27, r27
    2a68:	26 17       	cp	r18, r22
    2a6a:	37 07       	cpc	r19, r23
    2a6c:	48 07       	cpc	r20, r24
    2a6e:	ab 07       	cpc	r26, r27
    2a70:	b0 e8       	ldi	r27, 0x80	; 128
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <__divsf3_pse+0x56>
    2a74:	bb 0b       	sbc	r27, r27
    2a76:	80 2d       	mov	r24, r0
    2a78:	bf 01       	movw	r22, r30
    2a7a:	ff 27       	eor	r31, r31
    2a7c:	93 58       	subi	r25, 0x83	; 131
    2a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a80:	2a f0       	brmi	.+10     	; 0x2a8c <__divsf3_pse+0x6c>
    2a82:	9e 3f       	cpi	r25, 0xFE	; 254
    2a84:	51 05       	cpc	r21, r1
    2a86:	68 f0       	brcs	.+26     	; 0x2aa2 <__divsf3_pse+0x82>
    2a88:	b6 c0       	rjmp	.+364    	; 0x2bf6 <__fp_inf>
    2a8a:	00 c1       	rjmp	.+512    	; 0x2c8c <__fp_szero>
    2a8c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a8e:	ec f3       	brlt	.-6      	; 0x2a8a <__divsf3_pse+0x6a>
    2a90:	98 3e       	cpi	r25, 0xE8	; 232
    2a92:	dc f3       	brlt	.-10     	; 0x2a8a <__divsf3_pse+0x6a>
    2a94:	86 95       	lsr	r24
    2a96:	77 95       	ror	r23
    2a98:	67 95       	ror	r22
    2a9a:	b7 95       	ror	r27
    2a9c:	f7 95       	ror	r31
    2a9e:	9f 5f       	subi	r25, 0xFF	; 255
    2aa0:	c9 f7       	brne	.-14     	; 0x2a94 <__divsf3_pse+0x74>
    2aa2:	88 0f       	add	r24, r24
    2aa4:	91 1d       	adc	r25, r1
    2aa6:	96 95       	lsr	r25
    2aa8:	87 95       	ror	r24
    2aaa:	97 f9       	bld	r25, 7
    2aac:	08 95       	ret
    2aae:	e1 e0       	ldi	r30, 0x01	; 1
    2ab0:	66 0f       	add	r22, r22
    2ab2:	77 1f       	adc	r23, r23
    2ab4:	88 1f       	adc	r24, r24
    2ab6:	bb 1f       	adc	r27, r27
    2ab8:	62 17       	cp	r22, r18
    2aba:	73 07       	cpc	r23, r19
    2abc:	84 07       	cpc	r24, r20
    2abe:	ba 07       	cpc	r27, r26
    2ac0:	20 f0       	brcs	.+8      	; 0x2aca <__divsf3_pse+0xaa>
    2ac2:	62 1b       	sub	r22, r18
    2ac4:	73 0b       	sbc	r23, r19
    2ac6:	84 0b       	sbc	r24, r20
    2ac8:	ba 0b       	sbc	r27, r26
    2aca:	ee 1f       	adc	r30, r30
    2acc:	88 f7       	brcc	.-30     	; 0x2ab0 <__divsf3_pse+0x90>
    2ace:	e0 95       	com	r30
    2ad0:	08 95       	ret

00002ad2 <__fixsfsi>:
    2ad2:	04 d0       	rcall	.+8      	; 0x2adc <__fixunssfsi>
    2ad4:	68 94       	set
    2ad6:	b1 11       	cpse	r27, r1
    2ad8:	d9 c0       	rjmp	.+434    	; 0x2c8c <__fp_szero>
    2ada:	08 95       	ret

00002adc <__fixunssfsi>:
    2adc:	bc d0       	rcall	.+376    	; 0x2c56 <__fp_splitA>
    2ade:	88 f0       	brcs	.+34     	; 0x2b02 <__fixunssfsi+0x26>
    2ae0:	9f 57       	subi	r25, 0x7F	; 127
    2ae2:	90 f0       	brcs	.+36     	; 0x2b08 <__fixunssfsi+0x2c>
    2ae4:	b9 2f       	mov	r27, r25
    2ae6:	99 27       	eor	r25, r25
    2ae8:	b7 51       	subi	r27, 0x17	; 23
    2aea:	a0 f0       	brcs	.+40     	; 0x2b14 <__fixunssfsi+0x38>
    2aec:	d1 f0       	breq	.+52     	; 0x2b22 <__fixunssfsi+0x46>
    2aee:	66 0f       	add	r22, r22
    2af0:	77 1f       	adc	r23, r23
    2af2:	88 1f       	adc	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	1a f0       	brmi	.+6      	; 0x2afe <__fixunssfsi+0x22>
    2af8:	ba 95       	dec	r27
    2afa:	c9 f7       	brne	.-14     	; 0x2aee <__fixunssfsi+0x12>
    2afc:	12 c0       	rjmp	.+36     	; 0x2b22 <__fixunssfsi+0x46>
    2afe:	b1 30       	cpi	r27, 0x01	; 1
    2b00:	81 f0       	breq	.+32     	; 0x2b22 <__fixunssfsi+0x46>
    2b02:	c3 d0       	rcall	.+390    	; 0x2c8a <__fp_zero>
    2b04:	b1 e0       	ldi	r27, 0x01	; 1
    2b06:	08 95       	ret
    2b08:	c0 c0       	rjmp	.+384    	; 0x2c8a <__fp_zero>
    2b0a:	67 2f       	mov	r22, r23
    2b0c:	78 2f       	mov	r23, r24
    2b0e:	88 27       	eor	r24, r24
    2b10:	b8 5f       	subi	r27, 0xF8	; 248
    2b12:	39 f0       	breq	.+14     	; 0x2b22 <__fixunssfsi+0x46>
    2b14:	b9 3f       	cpi	r27, 0xF9	; 249
    2b16:	cc f3       	brlt	.-14     	; 0x2b0a <__fixunssfsi+0x2e>
    2b18:	86 95       	lsr	r24
    2b1a:	77 95       	ror	r23
    2b1c:	67 95       	ror	r22
    2b1e:	b3 95       	inc	r27
    2b20:	d9 f7       	brne	.-10     	; 0x2b18 <__fixunssfsi+0x3c>
    2b22:	3e f4       	brtc	.+14     	; 0x2b32 <__fixunssfsi+0x56>
    2b24:	90 95       	com	r25
    2b26:	80 95       	com	r24
    2b28:	70 95       	com	r23
    2b2a:	61 95       	neg	r22
    2b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b30:	9f 4f       	sbci	r25, 0xFF	; 255
    2b32:	08 95       	ret

00002b34 <__floatunsisf>:
    2b34:	e8 94       	clt
    2b36:	09 c0       	rjmp	.+18     	; 0x2b4a <__floatsisf+0x12>

00002b38 <__floatsisf>:
    2b38:	97 fb       	bst	r25, 7
    2b3a:	3e f4       	brtc	.+14     	; 0x2b4a <__floatsisf+0x12>
    2b3c:	90 95       	com	r25
    2b3e:	80 95       	com	r24
    2b40:	70 95       	com	r23
    2b42:	61 95       	neg	r22
    2b44:	7f 4f       	sbci	r23, 0xFF	; 255
    2b46:	8f 4f       	sbci	r24, 0xFF	; 255
    2b48:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4a:	99 23       	and	r25, r25
    2b4c:	a9 f0       	breq	.+42     	; 0x2b78 <__floatsisf+0x40>
    2b4e:	f9 2f       	mov	r31, r25
    2b50:	96 e9       	ldi	r25, 0x96	; 150
    2b52:	bb 27       	eor	r27, r27
    2b54:	93 95       	inc	r25
    2b56:	f6 95       	lsr	r31
    2b58:	87 95       	ror	r24
    2b5a:	77 95       	ror	r23
    2b5c:	67 95       	ror	r22
    2b5e:	b7 95       	ror	r27
    2b60:	f1 11       	cpse	r31, r1
    2b62:	f8 cf       	rjmp	.-16     	; 0x2b54 <__floatsisf+0x1c>
    2b64:	fa f4       	brpl	.+62     	; 0x2ba4 <__floatsisf+0x6c>
    2b66:	bb 0f       	add	r27, r27
    2b68:	11 f4       	brne	.+4      	; 0x2b6e <__floatsisf+0x36>
    2b6a:	60 ff       	sbrs	r22, 0
    2b6c:	1b c0       	rjmp	.+54     	; 0x2ba4 <__floatsisf+0x6c>
    2b6e:	6f 5f       	subi	r22, 0xFF	; 255
    2b70:	7f 4f       	sbci	r23, 0xFF	; 255
    2b72:	8f 4f       	sbci	r24, 0xFF	; 255
    2b74:	9f 4f       	sbci	r25, 0xFF	; 255
    2b76:	16 c0       	rjmp	.+44     	; 0x2ba4 <__floatsisf+0x6c>
    2b78:	88 23       	and	r24, r24
    2b7a:	11 f0       	breq	.+4      	; 0x2b80 <__floatsisf+0x48>
    2b7c:	96 e9       	ldi	r25, 0x96	; 150
    2b7e:	11 c0       	rjmp	.+34     	; 0x2ba2 <__floatsisf+0x6a>
    2b80:	77 23       	and	r23, r23
    2b82:	21 f0       	breq	.+8      	; 0x2b8c <__floatsisf+0x54>
    2b84:	9e e8       	ldi	r25, 0x8E	; 142
    2b86:	87 2f       	mov	r24, r23
    2b88:	76 2f       	mov	r23, r22
    2b8a:	05 c0       	rjmp	.+10     	; 0x2b96 <__floatsisf+0x5e>
    2b8c:	66 23       	and	r22, r22
    2b8e:	71 f0       	breq	.+28     	; 0x2bac <__floatsisf+0x74>
    2b90:	96 e8       	ldi	r25, 0x86	; 134
    2b92:	86 2f       	mov	r24, r22
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	2a f0       	brmi	.+10     	; 0x2ba4 <__floatsisf+0x6c>
    2b9a:	9a 95       	dec	r25
    2b9c:	66 0f       	add	r22, r22
    2b9e:	77 1f       	adc	r23, r23
    2ba0:	88 1f       	adc	r24, r24
    2ba2:	da f7       	brpl	.-10     	; 0x2b9a <__floatsisf+0x62>
    2ba4:	88 0f       	add	r24, r24
    2ba6:	96 95       	lsr	r25
    2ba8:	87 95       	ror	r24
    2baa:	97 f9       	bld	r25, 7
    2bac:	08 95       	ret

00002bae <__fp_cmp>:
    2bae:	99 0f       	add	r25, r25
    2bb0:	00 08       	sbc	r0, r0
    2bb2:	55 0f       	add	r21, r21
    2bb4:	aa 0b       	sbc	r26, r26
    2bb6:	e0 e8       	ldi	r30, 0x80	; 128
    2bb8:	fe ef       	ldi	r31, 0xFE	; 254
    2bba:	16 16       	cp	r1, r22
    2bbc:	17 06       	cpc	r1, r23
    2bbe:	e8 07       	cpc	r30, r24
    2bc0:	f9 07       	cpc	r31, r25
    2bc2:	c0 f0       	brcs	.+48     	; 0x2bf4 <__fp_cmp+0x46>
    2bc4:	12 16       	cp	r1, r18
    2bc6:	13 06       	cpc	r1, r19
    2bc8:	e4 07       	cpc	r30, r20
    2bca:	f5 07       	cpc	r31, r21
    2bcc:	98 f0       	brcs	.+38     	; 0x2bf4 <__fp_cmp+0x46>
    2bce:	62 1b       	sub	r22, r18
    2bd0:	73 0b       	sbc	r23, r19
    2bd2:	84 0b       	sbc	r24, r20
    2bd4:	95 0b       	sbc	r25, r21
    2bd6:	39 f4       	brne	.+14     	; 0x2be6 <__fp_cmp+0x38>
    2bd8:	0a 26       	eor	r0, r26
    2bda:	61 f0       	breq	.+24     	; 0x2bf4 <__fp_cmp+0x46>
    2bdc:	23 2b       	or	r18, r19
    2bde:	24 2b       	or	r18, r20
    2be0:	25 2b       	or	r18, r21
    2be2:	21 f4       	brne	.+8      	; 0x2bec <__fp_cmp+0x3e>
    2be4:	08 95       	ret
    2be6:	0a 26       	eor	r0, r26
    2be8:	09 f4       	brne	.+2      	; 0x2bec <__fp_cmp+0x3e>
    2bea:	a1 40       	sbci	r26, 0x01	; 1
    2bec:	a6 95       	lsr	r26
    2bee:	8f ef       	ldi	r24, 0xFF	; 255
    2bf0:	81 1d       	adc	r24, r1
    2bf2:	81 1d       	adc	r24, r1
    2bf4:	08 95       	ret

00002bf6 <__fp_inf>:
    2bf6:	97 f9       	bld	r25, 7
    2bf8:	9f 67       	ori	r25, 0x7F	; 127
    2bfa:	80 e8       	ldi	r24, 0x80	; 128
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	08 95       	ret

00002c02 <__fp_nan>:
    2c02:	9f ef       	ldi	r25, 0xFF	; 255
    2c04:	80 ec       	ldi	r24, 0xC0	; 192
    2c06:	08 95       	ret

00002c08 <__fp_pscA>:
    2c08:	00 24       	eor	r0, r0
    2c0a:	0a 94       	dec	r0
    2c0c:	16 16       	cp	r1, r22
    2c0e:	17 06       	cpc	r1, r23
    2c10:	18 06       	cpc	r1, r24
    2c12:	09 06       	cpc	r0, r25
    2c14:	08 95       	ret

00002c16 <__fp_pscB>:
    2c16:	00 24       	eor	r0, r0
    2c18:	0a 94       	dec	r0
    2c1a:	12 16       	cp	r1, r18
    2c1c:	13 06       	cpc	r1, r19
    2c1e:	14 06       	cpc	r1, r20
    2c20:	05 06       	cpc	r0, r21
    2c22:	08 95       	ret

00002c24 <__fp_round>:
    2c24:	09 2e       	mov	r0, r25
    2c26:	03 94       	inc	r0
    2c28:	00 0c       	add	r0, r0
    2c2a:	11 f4       	brne	.+4      	; 0x2c30 <__fp_round+0xc>
    2c2c:	88 23       	and	r24, r24
    2c2e:	52 f0       	brmi	.+20     	; 0x2c44 <__fp_round+0x20>
    2c30:	bb 0f       	add	r27, r27
    2c32:	40 f4       	brcc	.+16     	; 0x2c44 <__fp_round+0x20>
    2c34:	bf 2b       	or	r27, r31
    2c36:	11 f4       	brne	.+4      	; 0x2c3c <__fp_round+0x18>
    2c38:	60 ff       	sbrs	r22, 0
    2c3a:	04 c0       	rjmp	.+8      	; 0x2c44 <__fp_round+0x20>
    2c3c:	6f 5f       	subi	r22, 0xFF	; 255
    2c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c40:	8f 4f       	sbci	r24, 0xFF	; 255
    2c42:	9f 4f       	sbci	r25, 0xFF	; 255
    2c44:	08 95       	ret

00002c46 <__fp_split3>:
    2c46:	57 fd       	sbrc	r21, 7
    2c48:	90 58       	subi	r25, 0x80	; 128
    2c4a:	44 0f       	add	r20, r20
    2c4c:	55 1f       	adc	r21, r21
    2c4e:	59 f0       	breq	.+22     	; 0x2c66 <__fp_splitA+0x10>
    2c50:	5f 3f       	cpi	r21, 0xFF	; 255
    2c52:	71 f0       	breq	.+28     	; 0x2c70 <__fp_splitA+0x1a>
    2c54:	47 95       	ror	r20

00002c56 <__fp_splitA>:
    2c56:	88 0f       	add	r24, r24
    2c58:	97 fb       	bst	r25, 7
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	61 f0       	breq	.+24     	; 0x2c76 <__fp_splitA+0x20>
    2c5e:	9f 3f       	cpi	r25, 0xFF	; 255
    2c60:	79 f0       	breq	.+30     	; 0x2c80 <__fp_splitA+0x2a>
    2c62:	87 95       	ror	r24
    2c64:	08 95       	ret
    2c66:	12 16       	cp	r1, r18
    2c68:	13 06       	cpc	r1, r19
    2c6a:	14 06       	cpc	r1, r20
    2c6c:	55 1f       	adc	r21, r21
    2c6e:	f2 cf       	rjmp	.-28     	; 0x2c54 <__fp_split3+0xe>
    2c70:	46 95       	lsr	r20
    2c72:	f1 df       	rcall	.-30     	; 0x2c56 <__fp_splitA>
    2c74:	08 c0       	rjmp	.+16     	; 0x2c86 <__fp_splitA+0x30>
    2c76:	16 16       	cp	r1, r22
    2c78:	17 06       	cpc	r1, r23
    2c7a:	18 06       	cpc	r1, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	f1 cf       	rjmp	.-30     	; 0x2c62 <__fp_splitA+0xc>
    2c80:	86 95       	lsr	r24
    2c82:	71 05       	cpc	r23, r1
    2c84:	61 05       	cpc	r22, r1
    2c86:	08 94       	sec
    2c88:	08 95       	ret

00002c8a <__fp_zero>:
    2c8a:	e8 94       	clt

00002c8c <__fp_szero>:
    2c8c:	bb 27       	eor	r27, r27
    2c8e:	66 27       	eor	r22, r22
    2c90:	77 27       	eor	r23, r23
    2c92:	cb 01       	movw	r24, r22
    2c94:	97 f9       	bld	r25, 7
    2c96:	08 95       	ret

00002c98 <__gesf2>:
    2c98:	8a df       	rcall	.-236    	; 0x2bae <__fp_cmp>
    2c9a:	08 f4       	brcc	.+2      	; 0x2c9e <__gesf2+0x6>
    2c9c:	8f ef       	ldi	r24, 0xFF	; 255
    2c9e:	08 95       	ret

00002ca0 <__mulsf3>:
    2ca0:	0b d0       	rcall	.+22     	; 0x2cb8 <__mulsf3x>
    2ca2:	c0 cf       	rjmp	.-128    	; 0x2c24 <__fp_round>
    2ca4:	b1 df       	rcall	.-158    	; 0x2c08 <__fp_pscA>
    2ca6:	28 f0       	brcs	.+10     	; 0x2cb2 <__mulsf3+0x12>
    2ca8:	b6 df       	rcall	.-148    	; 0x2c16 <__fp_pscB>
    2caa:	18 f0       	brcs	.+6      	; 0x2cb2 <__mulsf3+0x12>
    2cac:	95 23       	and	r25, r21
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <__mulsf3+0x12>
    2cb0:	a2 cf       	rjmp	.-188    	; 0x2bf6 <__fp_inf>
    2cb2:	a7 cf       	rjmp	.-178    	; 0x2c02 <__fp_nan>
    2cb4:	11 24       	eor	r1, r1
    2cb6:	ea cf       	rjmp	.-44     	; 0x2c8c <__fp_szero>

00002cb8 <__mulsf3x>:
    2cb8:	c6 df       	rcall	.-116    	; 0x2c46 <__fp_split3>
    2cba:	a0 f3       	brcs	.-24     	; 0x2ca4 <__mulsf3+0x4>

00002cbc <__mulsf3_pse>:
    2cbc:	95 9f       	mul	r25, r21
    2cbe:	d1 f3       	breq	.-12     	; 0x2cb4 <__mulsf3+0x14>
    2cc0:	95 0f       	add	r25, r21
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	55 1f       	adc	r21, r21
    2cc6:	62 9f       	mul	r22, r18
    2cc8:	f0 01       	movw	r30, r0
    2cca:	72 9f       	mul	r23, r18
    2ccc:	bb 27       	eor	r27, r27
    2cce:	f0 0d       	add	r31, r0
    2cd0:	b1 1d       	adc	r27, r1
    2cd2:	63 9f       	mul	r22, r19
    2cd4:	aa 27       	eor	r26, r26
    2cd6:	f0 0d       	add	r31, r0
    2cd8:	b1 1d       	adc	r27, r1
    2cda:	aa 1f       	adc	r26, r26
    2cdc:	64 9f       	mul	r22, r20
    2cde:	66 27       	eor	r22, r22
    2ce0:	b0 0d       	add	r27, r0
    2ce2:	a1 1d       	adc	r26, r1
    2ce4:	66 1f       	adc	r22, r22
    2ce6:	82 9f       	mul	r24, r18
    2ce8:	22 27       	eor	r18, r18
    2cea:	b0 0d       	add	r27, r0
    2cec:	a1 1d       	adc	r26, r1
    2cee:	62 1f       	adc	r22, r18
    2cf0:	73 9f       	mul	r23, r19
    2cf2:	b0 0d       	add	r27, r0
    2cf4:	a1 1d       	adc	r26, r1
    2cf6:	62 1f       	adc	r22, r18
    2cf8:	83 9f       	mul	r24, r19
    2cfa:	a0 0d       	add	r26, r0
    2cfc:	61 1d       	adc	r22, r1
    2cfe:	22 1f       	adc	r18, r18
    2d00:	74 9f       	mul	r23, r20
    2d02:	33 27       	eor	r19, r19
    2d04:	a0 0d       	add	r26, r0
    2d06:	61 1d       	adc	r22, r1
    2d08:	23 1f       	adc	r18, r19
    2d0a:	84 9f       	mul	r24, r20
    2d0c:	60 0d       	add	r22, r0
    2d0e:	21 1d       	adc	r18, r1
    2d10:	82 2f       	mov	r24, r18
    2d12:	76 2f       	mov	r23, r22
    2d14:	6a 2f       	mov	r22, r26
    2d16:	11 24       	eor	r1, r1
    2d18:	9f 57       	subi	r25, 0x7F	; 127
    2d1a:	50 40       	sbci	r21, 0x00	; 0
    2d1c:	8a f0       	brmi	.+34     	; 0x2d40 <__mulsf3_pse+0x84>
    2d1e:	e1 f0       	breq	.+56     	; 0x2d58 <__mulsf3_pse+0x9c>
    2d20:	88 23       	and	r24, r24
    2d22:	4a f0       	brmi	.+18     	; 0x2d36 <__mulsf3_pse+0x7a>
    2d24:	ee 0f       	add	r30, r30
    2d26:	ff 1f       	adc	r31, r31
    2d28:	bb 1f       	adc	r27, r27
    2d2a:	66 1f       	adc	r22, r22
    2d2c:	77 1f       	adc	r23, r23
    2d2e:	88 1f       	adc	r24, r24
    2d30:	91 50       	subi	r25, 0x01	; 1
    2d32:	50 40       	sbci	r21, 0x00	; 0
    2d34:	a9 f7       	brne	.-22     	; 0x2d20 <__mulsf3_pse+0x64>
    2d36:	9e 3f       	cpi	r25, 0xFE	; 254
    2d38:	51 05       	cpc	r21, r1
    2d3a:	70 f0       	brcs	.+28     	; 0x2d58 <__mulsf3_pse+0x9c>
    2d3c:	5c cf       	rjmp	.-328    	; 0x2bf6 <__fp_inf>
    2d3e:	a6 cf       	rjmp	.-180    	; 0x2c8c <__fp_szero>
    2d40:	5f 3f       	cpi	r21, 0xFF	; 255
    2d42:	ec f3       	brlt	.-6      	; 0x2d3e <__mulsf3_pse+0x82>
    2d44:	98 3e       	cpi	r25, 0xE8	; 232
    2d46:	dc f3       	brlt	.-10     	; 0x2d3e <__mulsf3_pse+0x82>
    2d48:	86 95       	lsr	r24
    2d4a:	77 95       	ror	r23
    2d4c:	67 95       	ror	r22
    2d4e:	b7 95       	ror	r27
    2d50:	f7 95       	ror	r31
    2d52:	e7 95       	ror	r30
    2d54:	9f 5f       	subi	r25, 0xFF	; 255
    2d56:	c1 f7       	brne	.-16     	; 0x2d48 <__mulsf3_pse+0x8c>
    2d58:	fe 2b       	or	r31, r30
    2d5a:	88 0f       	add	r24, r24
    2d5c:	91 1d       	adc	r25, r1
    2d5e:	96 95       	lsr	r25
    2d60:	87 95       	ror	r24
    2d62:	97 f9       	bld	r25, 7
    2d64:	08 95       	ret

00002d66 <malloc>:
    2d66:	cf 93       	push	r28
    2d68:	df 93       	push	r29
    2d6a:	82 30       	cpi	r24, 0x02	; 2
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	10 f4       	brcc	.+4      	; 0x2d74 <malloc+0xe>
    2d70:	82 e0       	ldi	r24, 0x02	; 2
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	e0 91 3a 04 	lds	r30, 0x043A
    2d78:	f0 91 3b 04 	lds	r31, 0x043B
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	a0 e0       	ldi	r26, 0x00	; 0
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	30 97       	sbiw	r30, 0x00	; 0
    2d86:	39 f1       	breq	.+78     	; 0x2dd6 <malloc+0x70>
    2d88:	40 81       	ld	r20, Z
    2d8a:	51 81       	ldd	r21, Z+1	; 0x01
    2d8c:	48 17       	cp	r20, r24
    2d8e:	59 07       	cpc	r21, r25
    2d90:	b8 f0       	brcs	.+46     	; 0x2dc0 <malloc+0x5a>
    2d92:	48 17       	cp	r20, r24
    2d94:	59 07       	cpc	r21, r25
    2d96:	71 f4       	brne	.+28     	; 0x2db4 <malloc+0x4e>
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	10 97       	sbiw	r26, 0x00	; 0
    2d9e:	29 f0       	breq	.+10     	; 0x2daa <malloc+0x44>
    2da0:	13 96       	adiw	r26, 0x03	; 3
    2da2:	9c 93       	st	X, r25
    2da4:	8e 93       	st	-X, r24
    2da6:	12 97       	sbiw	r26, 0x02	; 2
    2da8:	2c c0       	rjmp	.+88     	; 0x2e02 <malloc+0x9c>
    2daa:	90 93 3b 04 	sts	0x043B, r25
    2dae:	80 93 3a 04 	sts	0x043A, r24
    2db2:	27 c0       	rjmp	.+78     	; 0x2e02 <malloc+0x9c>
    2db4:	21 15       	cp	r18, r1
    2db6:	31 05       	cpc	r19, r1
    2db8:	31 f0       	breq	.+12     	; 0x2dc6 <malloc+0x60>
    2dba:	42 17       	cp	r20, r18
    2dbc:	53 07       	cpc	r21, r19
    2dbe:	18 f0       	brcs	.+6      	; 0x2dc6 <malloc+0x60>
    2dc0:	a9 01       	movw	r20, r18
    2dc2:	db 01       	movw	r26, r22
    2dc4:	01 c0       	rjmp	.+2      	; 0x2dc8 <malloc+0x62>
    2dc6:	ef 01       	movw	r28, r30
    2dc8:	9a 01       	movw	r18, r20
    2dca:	bd 01       	movw	r22, r26
    2dcc:	df 01       	movw	r26, r30
    2dce:	02 80       	ldd	r0, Z+2	; 0x02
    2dd0:	f3 81       	ldd	r31, Z+3	; 0x03
    2dd2:	e0 2d       	mov	r30, r0
    2dd4:	d7 cf       	rjmp	.-82     	; 0x2d84 <malloc+0x1e>
    2dd6:	21 15       	cp	r18, r1
    2dd8:	31 05       	cpc	r19, r1
    2dda:	f9 f0       	breq	.+62     	; 0x2e1a <malloc+0xb4>
    2ddc:	28 1b       	sub	r18, r24
    2dde:	39 0b       	sbc	r19, r25
    2de0:	24 30       	cpi	r18, 0x04	; 4
    2de2:	31 05       	cpc	r19, r1
    2de4:	80 f4       	brcc	.+32     	; 0x2e06 <malloc+0xa0>
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dea:	61 15       	cp	r22, r1
    2dec:	71 05       	cpc	r23, r1
    2dee:	21 f0       	breq	.+8      	; 0x2df8 <malloc+0x92>
    2df0:	fb 01       	movw	r30, r22
    2df2:	93 83       	std	Z+3, r25	; 0x03
    2df4:	82 83       	std	Z+2, r24	; 0x02
    2df6:	04 c0       	rjmp	.+8      	; 0x2e00 <malloc+0x9a>
    2df8:	90 93 3b 04 	sts	0x043B, r25
    2dfc:	80 93 3a 04 	sts	0x043A, r24
    2e00:	fe 01       	movw	r30, r28
    2e02:	32 96       	adiw	r30, 0x02	; 2
    2e04:	44 c0       	rjmp	.+136    	; 0x2e8e <malloc+0x128>
    2e06:	fe 01       	movw	r30, r28
    2e08:	e2 0f       	add	r30, r18
    2e0a:	f3 1f       	adc	r31, r19
    2e0c:	81 93       	st	Z+, r24
    2e0e:	91 93       	st	Z+, r25
    2e10:	22 50       	subi	r18, 0x02	; 2
    2e12:	31 09       	sbc	r19, r1
    2e14:	39 83       	std	Y+1, r19	; 0x01
    2e16:	28 83       	st	Y, r18
    2e18:	3a c0       	rjmp	.+116    	; 0x2e8e <malloc+0x128>
    2e1a:	20 91 38 04 	lds	r18, 0x0438
    2e1e:	30 91 39 04 	lds	r19, 0x0439
    2e22:	23 2b       	or	r18, r19
    2e24:	41 f4       	brne	.+16     	; 0x2e36 <malloc+0xd0>
    2e26:	20 91 02 01 	lds	r18, 0x0102
    2e2a:	30 91 03 01 	lds	r19, 0x0103
    2e2e:	30 93 39 04 	sts	0x0439, r19
    2e32:	20 93 38 04 	sts	0x0438, r18
    2e36:	20 91 00 01 	lds	r18, 0x0100
    2e3a:	30 91 01 01 	lds	r19, 0x0101
    2e3e:	21 15       	cp	r18, r1
    2e40:	31 05       	cpc	r19, r1
    2e42:	41 f4       	brne	.+16     	; 0x2e54 <malloc+0xee>
    2e44:	2d b7       	in	r18, 0x3d	; 61
    2e46:	3e b7       	in	r19, 0x3e	; 62
    2e48:	40 91 04 01 	lds	r20, 0x0104
    2e4c:	50 91 05 01 	lds	r21, 0x0105
    2e50:	24 1b       	sub	r18, r20
    2e52:	35 0b       	sbc	r19, r21
    2e54:	e0 91 38 04 	lds	r30, 0x0438
    2e58:	f0 91 39 04 	lds	r31, 0x0439
    2e5c:	e2 17       	cp	r30, r18
    2e5e:	f3 07       	cpc	r31, r19
    2e60:	a0 f4       	brcc	.+40     	; 0x2e8a <malloc+0x124>
    2e62:	2e 1b       	sub	r18, r30
    2e64:	3f 0b       	sbc	r19, r31
    2e66:	28 17       	cp	r18, r24
    2e68:	39 07       	cpc	r19, r25
    2e6a:	78 f0       	brcs	.+30     	; 0x2e8a <malloc+0x124>
    2e6c:	ac 01       	movw	r20, r24
    2e6e:	4e 5f       	subi	r20, 0xFE	; 254
    2e70:	5f 4f       	sbci	r21, 0xFF	; 255
    2e72:	24 17       	cp	r18, r20
    2e74:	35 07       	cpc	r19, r21
    2e76:	48 f0       	brcs	.+18     	; 0x2e8a <malloc+0x124>
    2e78:	4e 0f       	add	r20, r30
    2e7a:	5f 1f       	adc	r21, r31
    2e7c:	50 93 39 04 	sts	0x0439, r21
    2e80:	40 93 38 04 	sts	0x0438, r20
    2e84:	81 93       	st	Z+, r24
    2e86:	91 93       	st	Z+, r25
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <malloc+0x128>
    2e8a:	e0 e0       	ldi	r30, 0x00	; 0
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	cf 01       	movw	r24, r30
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	08 95       	ret

00002e96 <free>:
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	09 f4       	brne	.+2      	; 0x2ea0 <free+0xa>
    2e9e:	87 c0       	rjmp	.+270    	; 0x2fae <free+0x118>
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	32 97       	sbiw	r30, 0x02	; 2
    2ea4:	13 82       	std	Z+3, r1	; 0x03
    2ea6:	12 82       	std	Z+2, r1	; 0x02
    2ea8:	c0 91 3a 04 	lds	r28, 0x043A
    2eac:	d0 91 3b 04 	lds	r29, 0x043B
    2eb0:	20 97       	sbiw	r28, 0x00	; 0
    2eb2:	81 f4       	brne	.+32     	; 0x2ed4 <free+0x3e>
    2eb4:	20 81       	ld	r18, Z
    2eb6:	31 81       	ldd	r19, Z+1	; 0x01
    2eb8:	28 0f       	add	r18, r24
    2eba:	39 1f       	adc	r19, r25
    2ebc:	80 91 38 04 	lds	r24, 0x0438
    2ec0:	90 91 39 04 	lds	r25, 0x0439
    2ec4:	82 17       	cp	r24, r18
    2ec6:	93 07       	cpc	r25, r19
    2ec8:	79 f5       	brne	.+94     	; 0x2f28 <free+0x92>
    2eca:	f0 93 39 04 	sts	0x0439, r31
    2ece:	e0 93 38 04 	sts	0x0438, r30
    2ed2:	6d c0       	rjmp	.+218    	; 0x2fae <free+0x118>
    2ed4:	de 01       	movw	r26, r28
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	ae 17       	cp	r26, r30
    2edc:	bf 07       	cpc	r27, r31
    2ede:	50 f4       	brcc	.+20     	; 0x2ef4 <free+0x5e>
    2ee0:	12 96       	adiw	r26, 0x02	; 2
    2ee2:	4d 91       	ld	r20, X+
    2ee4:	5c 91       	ld	r21, X
    2ee6:	13 97       	sbiw	r26, 0x03	; 3
    2ee8:	9d 01       	movw	r18, r26
    2eea:	41 15       	cp	r20, r1
    2eec:	51 05       	cpc	r21, r1
    2eee:	09 f1       	breq	.+66     	; 0x2f32 <free+0x9c>
    2ef0:	da 01       	movw	r26, r20
    2ef2:	f3 cf       	rjmp	.-26     	; 0x2eda <free+0x44>
    2ef4:	b3 83       	std	Z+3, r27	; 0x03
    2ef6:	a2 83       	std	Z+2, r26	; 0x02
    2ef8:	40 81       	ld	r20, Z
    2efa:	51 81       	ldd	r21, Z+1	; 0x01
    2efc:	84 0f       	add	r24, r20
    2efe:	95 1f       	adc	r25, r21
    2f00:	8a 17       	cp	r24, r26
    2f02:	9b 07       	cpc	r25, r27
    2f04:	71 f4       	brne	.+28     	; 0x2f22 <free+0x8c>
    2f06:	8d 91       	ld	r24, X+
    2f08:	9c 91       	ld	r25, X
    2f0a:	11 97       	sbiw	r26, 0x01	; 1
    2f0c:	84 0f       	add	r24, r20
    2f0e:	95 1f       	adc	r25, r21
    2f10:	02 96       	adiw	r24, 0x02	; 2
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	80 83       	st	Z, r24
    2f16:	12 96       	adiw	r26, 0x02	; 2
    2f18:	8d 91       	ld	r24, X+
    2f1a:	9c 91       	ld	r25, X
    2f1c:	13 97       	sbiw	r26, 0x03	; 3
    2f1e:	93 83       	std	Z+3, r25	; 0x03
    2f20:	82 83       	std	Z+2, r24	; 0x02
    2f22:	21 15       	cp	r18, r1
    2f24:	31 05       	cpc	r19, r1
    2f26:	29 f4       	brne	.+10     	; 0x2f32 <free+0x9c>
    2f28:	f0 93 3b 04 	sts	0x043B, r31
    2f2c:	e0 93 3a 04 	sts	0x043A, r30
    2f30:	3e c0       	rjmp	.+124    	; 0x2fae <free+0x118>
    2f32:	d9 01       	movw	r26, r18
    2f34:	13 96       	adiw	r26, 0x03	; 3
    2f36:	fc 93       	st	X, r31
    2f38:	ee 93       	st	-X, r30
    2f3a:	12 97       	sbiw	r26, 0x02	; 2
    2f3c:	4d 91       	ld	r20, X+
    2f3e:	5d 91       	ld	r21, X+
    2f40:	a4 0f       	add	r26, r20
    2f42:	b5 1f       	adc	r27, r21
    2f44:	ea 17       	cp	r30, r26
    2f46:	fb 07       	cpc	r31, r27
    2f48:	79 f4       	brne	.+30     	; 0x2f68 <free+0xd2>
    2f4a:	80 81       	ld	r24, Z
    2f4c:	91 81       	ldd	r25, Z+1	; 0x01
    2f4e:	84 0f       	add	r24, r20
    2f50:	95 1f       	adc	r25, r21
    2f52:	02 96       	adiw	r24, 0x02	; 2
    2f54:	d9 01       	movw	r26, r18
    2f56:	11 96       	adiw	r26, 0x01	; 1
    2f58:	9c 93       	st	X, r25
    2f5a:	8e 93       	st	-X, r24
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	13 96       	adiw	r26, 0x03	; 3
    2f62:	9c 93       	st	X, r25
    2f64:	8e 93       	st	-X, r24
    2f66:	12 97       	sbiw	r26, 0x02	; 2
    2f68:	e0 e0       	ldi	r30, 0x00	; 0
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	19 f0       	breq	.+6      	; 0x2f7a <free+0xe4>
    2f74:	fe 01       	movw	r30, r28
    2f76:	ec 01       	movw	r28, r24
    2f78:	f9 cf       	rjmp	.-14     	; 0x2f6c <free+0xd6>
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	02 96       	adiw	r24, 0x02	; 2
    2f7e:	28 81       	ld	r18, Y
    2f80:	39 81       	ldd	r19, Y+1	; 0x01
    2f82:	82 0f       	add	r24, r18
    2f84:	93 1f       	adc	r25, r19
    2f86:	20 91 38 04 	lds	r18, 0x0438
    2f8a:	30 91 39 04 	lds	r19, 0x0439
    2f8e:	28 17       	cp	r18, r24
    2f90:	39 07       	cpc	r19, r25
    2f92:	69 f4       	brne	.+26     	; 0x2fae <free+0x118>
    2f94:	30 97       	sbiw	r30, 0x00	; 0
    2f96:	29 f4       	brne	.+10     	; 0x2fa2 <free+0x10c>
    2f98:	10 92 3b 04 	sts	0x043B, r1
    2f9c:	10 92 3a 04 	sts	0x043A, r1
    2fa0:	02 c0       	rjmp	.+4      	; 0x2fa6 <free+0x110>
    2fa2:	13 82       	std	Z+3, r1	; 0x03
    2fa4:	12 82       	std	Z+2, r1	; 0x02
    2fa6:	d0 93 39 04 	sts	0x0439, r29
    2faa:	c0 93 38 04 	sts	0x0438, r28
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	08 95       	ret

00002fb4 <do_rand>:
    2fb4:	8f 92       	push	r8
    2fb6:	9f 92       	push	r9
    2fb8:	af 92       	push	r10
    2fba:	bf 92       	push	r11
    2fbc:	cf 92       	push	r12
    2fbe:	df 92       	push	r13
    2fc0:	ef 92       	push	r14
    2fc2:	ff 92       	push	r15
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	ec 01       	movw	r28, r24
    2fca:	68 81       	ld	r22, Y
    2fcc:	79 81       	ldd	r23, Y+1	; 0x01
    2fce:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd2:	61 15       	cp	r22, r1
    2fd4:	71 05       	cpc	r23, r1
    2fd6:	81 05       	cpc	r24, r1
    2fd8:	91 05       	cpc	r25, r1
    2fda:	21 f4       	brne	.+8      	; 0x2fe4 <do_rand+0x30>
    2fdc:	64 e2       	ldi	r22, 0x24	; 36
    2fde:	79 ed       	ldi	r23, 0xD9	; 217
    2fe0:	8b e5       	ldi	r24, 0x5B	; 91
    2fe2:	97 e0       	ldi	r25, 0x07	; 7
    2fe4:	2d e1       	ldi	r18, 0x1D	; 29
    2fe6:	33 ef       	ldi	r19, 0xF3	; 243
    2fe8:	41 e0       	ldi	r20, 0x01	; 1
    2fea:	50 e0       	ldi	r21, 0x00	; 0
    2fec:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodsi4>
    2ff0:	49 01       	movw	r8, r18
    2ff2:	5a 01       	movw	r10, r20
    2ff4:	9b 01       	movw	r18, r22
    2ff6:	ac 01       	movw	r20, r24
    2ff8:	a7 ea       	ldi	r26, 0xA7	; 167
    2ffa:	b1 e4       	ldi	r27, 0x41	; 65
    2ffc:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__muluhisi3>
    3000:	6b 01       	movw	r12, r22
    3002:	7c 01       	movw	r14, r24
    3004:	ac ee       	ldi	r26, 0xEC	; 236
    3006:	b4 ef       	ldi	r27, 0xF4	; 244
    3008:	a5 01       	movw	r20, r10
    300a:	94 01       	movw	r18, r8
    300c:	0e 94 04 1c 	call	0x3808	; 0x3808 <__mulohisi3>
    3010:	c6 0e       	add	r12, r22
    3012:	d7 1e       	adc	r13, r23
    3014:	e8 1e       	adc	r14, r24
    3016:	f9 1e       	adc	r15, r25
    3018:	f7 fe       	sbrs	r15, 7
    301a:	06 c0       	rjmp	.+12     	; 0x3028 <do_rand+0x74>
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	c8 1a       	sub	r12, r24
    3020:	d1 08       	sbc	r13, r1
    3022:	e1 08       	sbc	r14, r1
    3024:	80 e8       	ldi	r24, 0x80	; 128
    3026:	f8 0a       	sbc	r15, r24
    3028:	c8 82       	st	Y, r12
    302a:	d9 82       	std	Y+1, r13	; 0x01
    302c:	ea 82       	std	Y+2, r14	; 0x02
    302e:	fb 82       	std	Y+3, r15	; 0x03
    3030:	c6 01       	movw	r24, r12
    3032:	9f 77       	andi	r25, 0x7F	; 127
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	ff 90       	pop	r15
    303a:	ef 90       	pop	r14
    303c:	df 90       	pop	r13
    303e:	cf 90       	pop	r12
    3040:	bf 90       	pop	r11
    3042:	af 90       	pop	r10
    3044:	9f 90       	pop	r9
    3046:	8f 90       	pop	r8
    3048:	08 95       	ret

0000304a <rand_r>:
    304a:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <do_rand>
    304e:	08 95       	ret

00003050 <rand>:
    3050:	86 e0       	ldi	r24, 0x06	; 6
    3052:	91 e0       	ldi	r25, 0x01	; 1
    3054:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <do_rand>
    3058:	08 95       	ret

0000305a <srand>:
    305a:	a0 e0       	ldi	r26, 0x00	; 0
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	80 93 06 01 	sts	0x0106, r24
    3062:	90 93 07 01 	sts	0x0107, r25
    3066:	a0 93 08 01 	sts	0x0108, r26
    306a:	b0 93 09 01 	sts	0x0109, r27
    306e:	08 95       	ret

00003070 <strcmp>:
    3070:	fb 01       	movw	r30, r22
    3072:	dc 01       	movw	r26, r24
    3074:	8d 91       	ld	r24, X+
    3076:	01 90       	ld	r0, Z+
    3078:	80 19       	sub	r24, r0
    307a:	01 10       	cpse	r0, r1
    307c:	d9 f3       	breq	.-10     	; 0x3074 <strcmp+0x4>
    307e:	99 0b       	sbc	r25, r25
    3080:	08 95       	ret

00003082 <itoa>:
    3082:	45 32       	cpi	r20, 0x25	; 37
    3084:	51 05       	cpc	r21, r1
    3086:	20 f4       	brcc	.+8      	; 0x3090 <itoa+0xe>
    3088:	42 30       	cpi	r20, 0x02	; 2
    308a:	10 f0       	brcs	.+4      	; 0x3090 <itoa+0xe>
    308c:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__itoa_ncheck>
    3090:	fb 01       	movw	r30, r22
    3092:	10 82       	st	Z, r1
    3094:	cb 01       	movw	r24, r22
    3096:	08 95       	ret

00003098 <__itoa_ncheck>:
    3098:	bb 27       	eor	r27, r27
    309a:	4a 30       	cpi	r20, 0x0A	; 10
    309c:	31 f4       	brne	.+12     	; 0x30aa <__itoa_ncheck+0x12>
    309e:	99 23       	and	r25, r25
    30a0:	22 f4       	brpl	.+8      	; 0x30aa <__itoa_ncheck+0x12>
    30a2:	bd e2       	ldi	r27, 0x2D	; 45
    30a4:	90 95       	com	r25
    30a6:	81 95       	neg	r24
    30a8:	9f 4f       	sbci	r25, 0xFF	; 255
    30aa:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__utoa_common>

000030ae <__utoa_ncheck>:
    30ae:	bb 27       	eor	r27, r27

000030b0 <__utoa_common>:
    30b0:	fb 01       	movw	r30, r22
    30b2:	55 27       	eor	r21, r21
    30b4:	aa 27       	eor	r26, r26
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	aa 1f       	adc	r26, r26
    30bc:	a4 17       	cp	r26, r20
    30be:	10 f0       	brcs	.+4      	; 0x30c4 <__utoa_common+0x14>
    30c0:	a4 1b       	sub	r26, r20
    30c2:	83 95       	inc	r24
    30c4:	50 51       	subi	r21, 0x10	; 16
    30c6:	b9 f7       	brne	.-18     	; 0x30b6 <__utoa_common+0x6>
    30c8:	a0 5d       	subi	r26, 0xD0	; 208
    30ca:	aa 33       	cpi	r26, 0x3A	; 58
    30cc:	08 f0       	brcs	.+2      	; 0x30d0 <__utoa_common+0x20>
    30ce:	a9 5d       	subi	r26, 0xD9	; 217
    30d0:	a1 93       	st	Z+, r26
    30d2:	00 97       	sbiw	r24, 0x00	; 0
    30d4:	79 f7       	brne	.-34     	; 0x30b4 <__utoa_common+0x4>
    30d6:	b1 11       	cpse	r27, r1
    30d8:	b1 93       	st	Z+, r27
    30da:	11 92       	st	Z+, r1
    30dc:	cb 01       	movw	r24, r22
    30de:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <strrev>

000030e2 <fdevopen>:
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	ec 01       	movw	r28, r24
    30ec:	8b 01       	movw	r16, r22
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	31 f4       	brne	.+12     	; 0x30fe <fdevopen+0x1c>
    30f2:	61 15       	cp	r22, r1
    30f4:	71 05       	cpc	r23, r1
    30f6:	19 f4       	brne	.+6      	; 0x30fe <fdevopen+0x1c>
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	38 c0       	rjmp	.+112    	; 0x316e <fdevopen+0x8c>
    30fe:	6e e0       	ldi	r22, 0x0E	; 14
    3100:	70 e0       	ldi	r23, 0x00	; 0
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <calloc>
    310a:	fc 01       	movw	r30, r24
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	a1 f3       	breq	.-24     	; 0x30f8 <fdevopen+0x16>
    3110:	80 e8       	ldi	r24, 0x80	; 128
    3112:	83 83       	std	Z+3, r24	; 0x03
    3114:	01 15       	cp	r16, r1
    3116:	11 05       	cpc	r17, r1
    3118:	71 f0       	breq	.+28     	; 0x3136 <fdevopen+0x54>
    311a:	13 87       	std	Z+11, r17	; 0x0b
    311c:	02 87       	std	Z+10, r16	; 0x0a
    311e:	81 e8       	ldi	r24, 0x81	; 129
    3120:	83 83       	std	Z+3, r24	; 0x03
    3122:	80 91 3c 04 	lds	r24, 0x043C
    3126:	90 91 3d 04 	lds	r25, 0x043D
    312a:	89 2b       	or	r24, r25
    312c:	21 f4       	brne	.+8      	; 0x3136 <fdevopen+0x54>
    312e:	f0 93 3d 04 	sts	0x043D, r31
    3132:	e0 93 3c 04 	sts	0x043C, r30
    3136:	20 97       	sbiw	r28, 0x00	; 0
    3138:	c9 f0       	breq	.+50     	; 0x316c <fdevopen+0x8a>
    313a:	d1 87       	std	Z+9, r29	; 0x09
    313c:	c0 87       	std	Z+8, r28	; 0x08
    313e:	83 81       	ldd	r24, Z+3	; 0x03
    3140:	82 60       	ori	r24, 0x02	; 2
    3142:	83 83       	std	Z+3, r24	; 0x03
    3144:	80 91 3e 04 	lds	r24, 0x043E
    3148:	90 91 3f 04 	lds	r25, 0x043F
    314c:	89 2b       	or	r24, r25
    314e:	71 f4       	brne	.+28     	; 0x316c <fdevopen+0x8a>
    3150:	f0 93 3f 04 	sts	0x043F, r31
    3154:	e0 93 3e 04 	sts	0x043E, r30
    3158:	80 91 40 04 	lds	r24, 0x0440
    315c:	90 91 41 04 	lds	r25, 0x0441
    3160:	89 2b       	or	r24, r25
    3162:	21 f4       	brne	.+8      	; 0x316c <fdevopen+0x8a>
    3164:	f0 93 41 04 	sts	0x0441, r31
    3168:	e0 93 40 04 	sts	0x0440, r30
    316c:	cf 01       	movw	r24, r30
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	08 95       	ret

00003178 <printf>:
    3178:	a0 e0       	ldi	r26, 0x00	; 0
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	e2 ec       	ldi	r30, 0xC2	; 194
    317e:	f8 e1       	ldi	r31, 0x18	; 24
    3180:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__prologue_saves__+0x20>
    3184:	fe 01       	movw	r30, r28
    3186:	35 96       	adiw	r30, 0x05	; 5
    3188:	61 91       	ld	r22, Z+
    318a:	71 91       	ld	r23, Z+
    318c:	af 01       	movw	r20, r30
    318e:	80 91 3e 04 	lds	r24, 0x043E
    3192:	90 91 3f 04 	lds	r25, 0x043F
    3196:	0e 94 04 19 	call	0x3208	; 0x3208 <vfprintf>
    319a:	e2 e0       	ldi	r30, 0x02	; 2
    319c:	0c 94 35 1c 	jmp	0x386a	; 0x386a <__epilogue_restores__+0x20>

000031a0 <putchar>:
    31a0:	60 91 3e 04 	lds	r22, 0x043E
    31a4:	70 91 3f 04 	lds	r23, 0x043F
    31a8:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fputc>
    31ac:	08 95       	ret

000031ae <puts>:
    31ae:	0f 93       	push	r16
    31b0:	1f 93       	push	r17
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	e0 91 3e 04 	lds	r30, 0x043E
    31ba:	f0 91 3f 04 	lds	r31, 0x043F
    31be:	23 81       	ldd	r18, Z+3	; 0x03
    31c0:	21 ff       	sbrs	r18, 1
    31c2:	1b c0       	rjmp	.+54     	; 0x31fa <puts+0x4c>
    31c4:	ec 01       	movw	r28, r24
    31c6:	00 e0       	ldi	r16, 0x00	; 0
    31c8:	10 e0       	ldi	r17, 0x00	; 0
    31ca:	89 91       	ld	r24, Y+
    31cc:	60 91 3e 04 	lds	r22, 0x043E
    31d0:	70 91 3f 04 	lds	r23, 0x043F
    31d4:	db 01       	movw	r26, r22
    31d6:	18 96       	adiw	r26, 0x08	; 8
    31d8:	ed 91       	ld	r30, X+
    31da:	fc 91       	ld	r31, X
    31dc:	19 97       	sbiw	r26, 0x09	; 9
    31de:	88 23       	and	r24, r24
    31e0:	31 f0       	breq	.+12     	; 0x31ee <puts+0x40>
    31e2:	09 95       	icall
    31e4:	89 2b       	or	r24, r25
    31e6:	89 f3       	breq	.-30     	; 0x31ca <puts+0x1c>
    31e8:	0f ef       	ldi	r16, 0xFF	; 255
    31ea:	1f ef       	ldi	r17, 0xFF	; 255
    31ec:	ee cf       	rjmp	.-36     	; 0x31ca <puts+0x1c>
    31ee:	8a e0       	ldi	r24, 0x0A	; 10
    31f0:	09 95       	icall
    31f2:	89 2b       	or	r24, r25
    31f4:	11 f4       	brne	.+4      	; 0x31fa <puts+0x4c>
    31f6:	c8 01       	movw	r24, r16
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <puts+0x50>
    31fa:	8f ef       	ldi	r24, 0xFF	; 255
    31fc:	9f ef       	ldi	r25, 0xFF	; 255
    31fe:	df 91       	pop	r29
    3200:	cf 91       	pop	r28
    3202:	1f 91       	pop	r17
    3204:	0f 91       	pop	r16
    3206:	08 95       	ret

00003208 <vfprintf>:
    3208:	ac e0       	ldi	r26, 0x0C	; 12
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	ea e0       	ldi	r30, 0x0A	; 10
    320e:	f9 e1       	ldi	r31, 0x19	; 25
    3210:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__prologue_saves__>
    3214:	7c 01       	movw	r14, r24
    3216:	6b 01       	movw	r12, r22
    3218:	8a 01       	movw	r16, r20
    321a:	fc 01       	movw	r30, r24
    321c:	17 82       	std	Z+7, r1	; 0x07
    321e:	16 82       	std	Z+6, r1	; 0x06
    3220:	83 81       	ldd	r24, Z+3	; 0x03
    3222:	81 ff       	sbrs	r24, 1
    3224:	bd c1       	rjmp	.+890    	; 0x35a0 <vfprintf+0x398>
    3226:	ce 01       	movw	r24, r28
    3228:	01 96       	adiw	r24, 0x01	; 1
    322a:	4c 01       	movw	r8, r24
    322c:	f7 01       	movw	r30, r14
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	f6 01       	movw	r30, r12
    3232:	93 fd       	sbrc	r25, 3
    3234:	85 91       	lpm	r24, Z+
    3236:	93 ff       	sbrs	r25, 3
    3238:	81 91       	ld	r24, Z+
    323a:	6f 01       	movw	r12, r30
    323c:	88 23       	and	r24, r24
    323e:	09 f4       	brne	.+2      	; 0x3242 <vfprintf+0x3a>
    3240:	ab c1       	rjmp	.+854    	; 0x3598 <vfprintf+0x390>
    3242:	85 32       	cpi	r24, 0x25	; 37
    3244:	39 f4       	brne	.+14     	; 0x3254 <vfprintf+0x4c>
    3246:	93 fd       	sbrc	r25, 3
    3248:	85 91       	lpm	r24, Z+
    324a:	93 ff       	sbrs	r25, 3
    324c:	81 91       	ld	r24, Z+
    324e:	6f 01       	movw	r12, r30
    3250:	85 32       	cpi	r24, 0x25	; 37
    3252:	29 f4       	brne	.+10     	; 0x325e <vfprintf+0x56>
    3254:	b7 01       	movw	r22, r14
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fputc>
    325c:	e7 cf       	rjmp	.-50     	; 0x322c <vfprintf+0x24>
    325e:	51 2c       	mov	r5, r1
    3260:	31 2c       	mov	r3, r1
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	20 32       	cpi	r18, 0x20	; 32
    3266:	a0 f4       	brcc	.+40     	; 0x3290 <vfprintf+0x88>
    3268:	8b 32       	cpi	r24, 0x2B	; 43
    326a:	69 f0       	breq	.+26     	; 0x3286 <vfprintf+0x7e>
    326c:	30 f4       	brcc	.+12     	; 0x327a <vfprintf+0x72>
    326e:	80 32       	cpi	r24, 0x20	; 32
    3270:	59 f0       	breq	.+22     	; 0x3288 <vfprintf+0x80>
    3272:	83 32       	cpi	r24, 0x23	; 35
    3274:	69 f4       	brne	.+26     	; 0x3290 <vfprintf+0x88>
    3276:	20 61       	ori	r18, 0x10	; 16
    3278:	2c c0       	rjmp	.+88     	; 0x32d2 <vfprintf+0xca>
    327a:	8d 32       	cpi	r24, 0x2D	; 45
    327c:	39 f0       	breq	.+14     	; 0x328c <vfprintf+0x84>
    327e:	80 33       	cpi	r24, 0x30	; 48
    3280:	39 f4       	brne	.+14     	; 0x3290 <vfprintf+0x88>
    3282:	21 60       	ori	r18, 0x01	; 1
    3284:	26 c0       	rjmp	.+76     	; 0x32d2 <vfprintf+0xca>
    3286:	22 60       	ori	r18, 0x02	; 2
    3288:	24 60       	ori	r18, 0x04	; 4
    328a:	23 c0       	rjmp	.+70     	; 0x32d2 <vfprintf+0xca>
    328c:	28 60       	ori	r18, 0x08	; 8
    328e:	21 c0       	rjmp	.+66     	; 0x32d2 <vfprintf+0xca>
    3290:	27 fd       	sbrc	r18, 7
    3292:	27 c0       	rjmp	.+78     	; 0x32e2 <vfprintf+0xda>
    3294:	30 ed       	ldi	r19, 0xD0	; 208
    3296:	38 0f       	add	r19, r24
    3298:	3a 30       	cpi	r19, 0x0A	; 10
    329a:	78 f4       	brcc	.+30     	; 0x32ba <vfprintf+0xb2>
    329c:	26 ff       	sbrs	r18, 6
    329e:	06 c0       	rjmp	.+12     	; 0x32ac <vfprintf+0xa4>
    32a0:	fa e0       	ldi	r31, 0x0A	; 10
    32a2:	5f 9e       	mul	r5, r31
    32a4:	30 0d       	add	r19, r0
    32a6:	11 24       	eor	r1, r1
    32a8:	53 2e       	mov	r5, r19
    32aa:	13 c0       	rjmp	.+38     	; 0x32d2 <vfprintf+0xca>
    32ac:	8a e0       	ldi	r24, 0x0A	; 10
    32ae:	38 9e       	mul	r3, r24
    32b0:	30 0d       	add	r19, r0
    32b2:	11 24       	eor	r1, r1
    32b4:	33 2e       	mov	r3, r19
    32b6:	20 62       	ori	r18, 0x20	; 32
    32b8:	0c c0       	rjmp	.+24     	; 0x32d2 <vfprintf+0xca>
    32ba:	8e 32       	cpi	r24, 0x2E	; 46
    32bc:	21 f4       	brne	.+8      	; 0x32c6 <vfprintf+0xbe>
    32be:	26 fd       	sbrc	r18, 6
    32c0:	6b c1       	rjmp	.+726    	; 0x3598 <vfprintf+0x390>
    32c2:	20 64       	ori	r18, 0x40	; 64
    32c4:	06 c0       	rjmp	.+12     	; 0x32d2 <vfprintf+0xca>
    32c6:	8c 36       	cpi	r24, 0x6C	; 108
    32c8:	11 f4       	brne	.+4      	; 0x32ce <vfprintf+0xc6>
    32ca:	20 68       	ori	r18, 0x80	; 128
    32cc:	02 c0       	rjmp	.+4      	; 0x32d2 <vfprintf+0xca>
    32ce:	88 36       	cpi	r24, 0x68	; 104
    32d0:	41 f4       	brne	.+16     	; 0x32e2 <vfprintf+0xda>
    32d2:	f6 01       	movw	r30, r12
    32d4:	93 fd       	sbrc	r25, 3
    32d6:	85 91       	lpm	r24, Z+
    32d8:	93 ff       	sbrs	r25, 3
    32da:	81 91       	ld	r24, Z+
    32dc:	6f 01       	movw	r12, r30
    32de:	81 11       	cpse	r24, r1
    32e0:	c1 cf       	rjmp	.-126    	; 0x3264 <vfprintf+0x5c>
    32e2:	98 2f       	mov	r25, r24
    32e4:	9f 7d       	andi	r25, 0xDF	; 223
    32e6:	95 54       	subi	r25, 0x45	; 69
    32e8:	93 30       	cpi	r25, 0x03	; 3
    32ea:	28 f4       	brcc	.+10     	; 0x32f6 <vfprintf+0xee>
    32ec:	0c 5f       	subi	r16, 0xFC	; 252
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
    32f0:	ff e3       	ldi	r31, 0x3F	; 63
    32f2:	f9 83       	std	Y+1, r31	; 0x01
    32f4:	0d c0       	rjmp	.+26     	; 0x3310 <vfprintf+0x108>
    32f6:	83 36       	cpi	r24, 0x63	; 99
    32f8:	31 f0       	breq	.+12     	; 0x3306 <vfprintf+0xfe>
    32fa:	83 37       	cpi	r24, 0x73	; 115
    32fc:	71 f0       	breq	.+28     	; 0x331a <vfprintf+0x112>
    32fe:	83 35       	cpi	r24, 0x53	; 83
    3300:	09 f0       	breq	.+2      	; 0x3304 <vfprintf+0xfc>
    3302:	5b c0       	rjmp	.+182    	; 0x33ba <vfprintf+0x1b2>
    3304:	22 c0       	rjmp	.+68     	; 0x334a <vfprintf+0x142>
    3306:	f8 01       	movw	r30, r16
    3308:	80 81       	ld	r24, Z
    330a:	89 83       	std	Y+1, r24	; 0x01
    330c:	0e 5f       	subi	r16, 0xFE	; 254
    330e:	1f 4f       	sbci	r17, 0xFF	; 255
    3310:	44 24       	eor	r4, r4
    3312:	43 94       	inc	r4
    3314:	51 2c       	mov	r5, r1
    3316:	54 01       	movw	r10, r8
    3318:	15 c0       	rjmp	.+42     	; 0x3344 <vfprintf+0x13c>
    331a:	38 01       	movw	r6, r16
    331c:	f2 e0       	ldi	r31, 0x02	; 2
    331e:	6f 0e       	add	r6, r31
    3320:	71 1c       	adc	r7, r1
    3322:	f8 01       	movw	r30, r16
    3324:	a0 80       	ld	r10, Z
    3326:	b1 80       	ldd	r11, Z+1	; 0x01
    3328:	26 ff       	sbrs	r18, 6
    332a:	03 c0       	rjmp	.+6      	; 0x3332 <vfprintf+0x12a>
    332c:	65 2d       	mov	r22, r5
    332e:	70 e0       	ldi	r23, 0x00	; 0
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <vfprintf+0x12e>
    3332:	6f ef       	ldi	r22, 0xFF	; 255
    3334:	7f ef       	ldi	r23, 0xFF	; 255
    3336:	c5 01       	movw	r24, r10
    3338:	2c 87       	std	Y+12, r18	; 0x0c
    333a:	0e 94 0f 1b 	call	0x361e	; 0x361e <strnlen>
    333e:	2c 01       	movw	r4, r24
    3340:	83 01       	movw	r16, r6
    3342:	2c 85       	ldd	r18, Y+12	; 0x0c
    3344:	2f 77       	andi	r18, 0x7F	; 127
    3346:	22 2e       	mov	r2, r18
    3348:	17 c0       	rjmp	.+46     	; 0x3378 <vfprintf+0x170>
    334a:	38 01       	movw	r6, r16
    334c:	f2 e0       	ldi	r31, 0x02	; 2
    334e:	6f 0e       	add	r6, r31
    3350:	71 1c       	adc	r7, r1
    3352:	f8 01       	movw	r30, r16
    3354:	a0 80       	ld	r10, Z
    3356:	b1 80       	ldd	r11, Z+1	; 0x01
    3358:	26 ff       	sbrs	r18, 6
    335a:	03 c0       	rjmp	.+6      	; 0x3362 <vfprintf+0x15a>
    335c:	65 2d       	mov	r22, r5
    335e:	70 e0       	ldi	r23, 0x00	; 0
    3360:	02 c0       	rjmp	.+4      	; 0x3366 <vfprintf+0x15e>
    3362:	6f ef       	ldi	r22, 0xFF	; 255
    3364:	7f ef       	ldi	r23, 0xFF	; 255
    3366:	c5 01       	movw	r24, r10
    3368:	2c 87       	std	Y+12, r18	; 0x0c
    336a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strnlen_P>
    336e:	2c 01       	movw	r4, r24
    3370:	2c 85       	ldd	r18, Y+12	; 0x0c
    3372:	20 68       	ori	r18, 0x80	; 128
    3374:	22 2e       	mov	r2, r18
    3376:	83 01       	movw	r16, r6
    3378:	23 fc       	sbrc	r2, 3
    337a:	1b c0       	rjmp	.+54     	; 0x33b2 <vfprintf+0x1aa>
    337c:	83 2d       	mov	r24, r3
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	48 16       	cp	r4, r24
    3382:	59 06       	cpc	r5, r25
    3384:	b0 f4       	brcc	.+44     	; 0x33b2 <vfprintf+0x1aa>
    3386:	b7 01       	movw	r22, r14
    3388:	80 e2       	ldi	r24, 0x20	; 32
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fputc>
    3390:	3a 94       	dec	r3
    3392:	f4 cf       	rjmp	.-24     	; 0x337c <vfprintf+0x174>
    3394:	f5 01       	movw	r30, r10
    3396:	27 fc       	sbrc	r2, 7
    3398:	85 91       	lpm	r24, Z+
    339a:	27 fe       	sbrs	r2, 7
    339c:	81 91       	ld	r24, Z+
    339e:	5f 01       	movw	r10, r30
    33a0:	b7 01       	movw	r22, r14
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fputc>
    33a8:	31 10       	cpse	r3, r1
    33aa:	3a 94       	dec	r3
    33ac:	f1 e0       	ldi	r31, 0x01	; 1
    33ae:	4f 1a       	sub	r4, r31
    33b0:	51 08       	sbc	r5, r1
    33b2:	41 14       	cp	r4, r1
    33b4:	51 04       	cpc	r5, r1
    33b6:	71 f7       	brne	.-36     	; 0x3394 <vfprintf+0x18c>
    33b8:	e5 c0       	rjmp	.+458    	; 0x3584 <vfprintf+0x37c>
    33ba:	84 36       	cpi	r24, 0x64	; 100
    33bc:	11 f0       	breq	.+4      	; 0x33c2 <vfprintf+0x1ba>
    33be:	89 36       	cpi	r24, 0x69	; 105
    33c0:	39 f5       	brne	.+78     	; 0x3410 <vfprintf+0x208>
    33c2:	f8 01       	movw	r30, r16
    33c4:	27 ff       	sbrs	r18, 7
    33c6:	07 c0       	rjmp	.+14     	; 0x33d6 <vfprintf+0x1ce>
    33c8:	60 81       	ld	r22, Z
    33ca:	71 81       	ldd	r23, Z+1	; 0x01
    33cc:	82 81       	ldd	r24, Z+2	; 0x02
    33ce:	93 81       	ldd	r25, Z+3	; 0x03
    33d0:	0c 5f       	subi	r16, 0xFC	; 252
    33d2:	1f 4f       	sbci	r17, 0xFF	; 255
    33d4:	08 c0       	rjmp	.+16     	; 0x33e6 <vfprintf+0x1de>
    33d6:	60 81       	ld	r22, Z
    33d8:	71 81       	ldd	r23, Z+1	; 0x01
    33da:	88 27       	eor	r24, r24
    33dc:	77 fd       	sbrc	r23, 7
    33de:	80 95       	com	r24
    33e0:	98 2f       	mov	r25, r24
    33e2:	0e 5f       	subi	r16, 0xFE	; 254
    33e4:	1f 4f       	sbci	r17, 0xFF	; 255
    33e6:	2f 76       	andi	r18, 0x6F	; 111
    33e8:	b2 2e       	mov	r11, r18
    33ea:	97 ff       	sbrs	r25, 7
    33ec:	09 c0       	rjmp	.+18     	; 0x3400 <vfprintf+0x1f8>
    33ee:	90 95       	com	r25
    33f0:	80 95       	com	r24
    33f2:	70 95       	com	r23
    33f4:	61 95       	neg	r22
    33f6:	7f 4f       	sbci	r23, 0xFF	; 255
    33f8:	8f 4f       	sbci	r24, 0xFF	; 255
    33fa:	9f 4f       	sbci	r25, 0xFF	; 255
    33fc:	20 68       	ori	r18, 0x80	; 128
    33fe:	b2 2e       	mov	r11, r18
    3400:	2a e0       	ldi	r18, 0x0A	; 10
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	a4 01       	movw	r20, r8
    3406:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <__ultoa_invert>
    340a:	a8 2e       	mov	r10, r24
    340c:	a8 18       	sub	r10, r8
    340e:	44 c0       	rjmp	.+136    	; 0x3498 <vfprintf+0x290>
    3410:	85 37       	cpi	r24, 0x75	; 117
    3412:	29 f4       	brne	.+10     	; 0x341e <vfprintf+0x216>
    3414:	2f 7e       	andi	r18, 0xEF	; 239
    3416:	b2 2e       	mov	r11, r18
    3418:	2a e0       	ldi	r18, 0x0A	; 10
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	25 c0       	rjmp	.+74     	; 0x3468 <vfprintf+0x260>
    341e:	f2 2f       	mov	r31, r18
    3420:	f9 7f       	andi	r31, 0xF9	; 249
    3422:	bf 2e       	mov	r11, r31
    3424:	8f 36       	cpi	r24, 0x6F	; 111
    3426:	c1 f0       	breq	.+48     	; 0x3458 <vfprintf+0x250>
    3428:	18 f4       	brcc	.+6      	; 0x3430 <vfprintf+0x228>
    342a:	88 35       	cpi	r24, 0x58	; 88
    342c:	79 f0       	breq	.+30     	; 0x344c <vfprintf+0x244>
    342e:	b4 c0       	rjmp	.+360    	; 0x3598 <vfprintf+0x390>
    3430:	80 37       	cpi	r24, 0x70	; 112
    3432:	19 f0       	breq	.+6      	; 0x343a <vfprintf+0x232>
    3434:	88 37       	cpi	r24, 0x78	; 120
    3436:	21 f0       	breq	.+8      	; 0x3440 <vfprintf+0x238>
    3438:	af c0       	rjmp	.+350    	; 0x3598 <vfprintf+0x390>
    343a:	2f 2f       	mov	r18, r31
    343c:	20 61       	ori	r18, 0x10	; 16
    343e:	b2 2e       	mov	r11, r18
    3440:	b4 fe       	sbrs	r11, 4
    3442:	0d c0       	rjmp	.+26     	; 0x345e <vfprintf+0x256>
    3444:	8b 2d       	mov	r24, r11
    3446:	84 60       	ori	r24, 0x04	; 4
    3448:	b8 2e       	mov	r11, r24
    344a:	09 c0       	rjmp	.+18     	; 0x345e <vfprintf+0x256>
    344c:	24 ff       	sbrs	r18, 4
    344e:	0a c0       	rjmp	.+20     	; 0x3464 <vfprintf+0x25c>
    3450:	9f 2f       	mov	r25, r31
    3452:	96 60       	ori	r25, 0x06	; 6
    3454:	b9 2e       	mov	r11, r25
    3456:	06 c0       	rjmp	.+12     	; 0x3464 <vfprintf+0x25c>
    3458:	28 e0       	ldi	r18, 0x08	; 8
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	05 c0       	rjmp	.+10     	; 0x3468 <vfprintf+0x260>
    345e:	20 e1       	ldi	r18, 0x10	; 16
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <vfprintf+0x260>
    3464:	20 e1       	ldi	r18, 0x10	; 16
    3466:	32 e0       	ldi	r19, 0x02	; 2
    3468:	f8 01       	movw	r30, r16
    346a:	b7 fe       	sbrs	r11, 7
    346c:	07 c0       	rjmp	.+14     	; 0x347c <vfprintf+0x274>
    346e:	60 81       	ld	r22, Z
    3470:	71 81       	ldd	r23, Z+1	; 0x01
    3472:	82 81       	ldd	r24, Z+2	; 0x02
    3474:	93 81       	ldd	r25, Z+3	; 0x03
    3476:	0c 5f       	subi	r16, 0xFC	; 252
    3478:	1f 4f       	sbci	r17, 0xFF	; 255
    347a:	06 c0       	rjmp	.+12     	; 0x3488 <vfprintf+0x280>
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	0e 5f       	subi	r16, 0xFE	; 254
    3486:	1f 4f       	sbci	r17, 0xFF	; 255
    3488:	a4 01       	movw	r20, r8
    348a:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <__ultoa_invert>
    348e:	a8 2e       	mov	r10, r24
    3490:	a8 18       	sub	r10, r8
    3492:	fb 2d       	mov	r31, r11
    3494:	ff 77       	andi	r31, 0x7F	; 127
    3496:	bf 2e       	mov	r11, r31
    3498:	b6 fe       	sbrs	r11, 6
    349a:	0b c0       	rjmp	.+22     	; 0x34b2 <vfprintf+0x2aa>
    349c:	2b 2d       	mov	r18, r11
    349e:	2e 7f       	andi	r18, 0xFE	; 254
    34a0:	a5 14       	cp	r10, r5
    34a2:	50 f4       	brcc	.+20     	; 0x34b8 <vfprintf+0x2b0>
    34a4:	b4 fe       	sbrs	r11, 4
    34a6:	0a c0       	rjmp	.+20     	; 0x34bc <vfprintf+0x2b4>
    34a8:	b2 fc       	sbrc	r11, 2
    34aa:	08 c0       	rjmp	.+16     	; 0x34bc <vfprintf+0x2b4>
    34ac:	2b 2d       	mov	r18, r11
    34ae:	2e 7e       	andi	r18, 0xEE	; 238
    34b0:	05 c0       	rjmp	.+10     	; 0x34bc <vfprintf+0x2b4>
    34b2:	7a 2c       	mov	r7, r10
    34b4:	2b 2d       	mov	r18, r11
    34b6:	03 c0       	rjmp	.+6      	; 0x34be <vfprintf+0x2b6>
    34b8:	7a 2c       	mov	r7, r10
    34ba:	01 c0       	rjmp	.+2      	; 0x34be <vfprintf+0x2b6>
    34bc:	75 2c       	mov	r7, r5
    34be:	24 ff       	sbrs	r18, 4
    34c0:	0d c0       	rjmp	.+26     	; 0x34dc <vfprintf+0x2d4>
    34c2:	fe 01       	movw	r30, r28
    34c4:	ea 0d       	add	r30, r10
    34c6:	f1 1d       	adc	r31, r1
    34c8:	80 81       	ld	r24, Z
    34ca:	80 33       	cpi	r24, 0x30	; 48
    34cc:	11 f4       	brne	.+4      	; 0x34d2 <vfprintf+0x2ca>
    34ce:	29 7e       	andi	r18, 0xE9	; 233
    34d0:	09 c0       	rjmp	.+18     	; 0x34e4 <vfprintf+0x2dc>
    34d2:	22 ff       	sbrs	r18, 2
    34d4:	06 c0       	rjmp	.+12     	; 0x34e2 <vfprintf+0x2da>
    34d6:	73 94       	inc	r7
    34d8:	73 94       	inc	r7
    34da:	04 c0       	rjmp	.+8      	; 0x34e4 <vfprintf+0x2dc>
    34dc:	82 2f       	mov	r24, r18
    34de:	86 78       	andi	r24, 0x86	; 134
    34e0:	09 f0       	breq	.+2      	; 0x34e4 <vfprintf+0x2dc>
    34e2:	73 94       	inc	r7
    34e4:	23 fd       	sbrc	r18, 3
    34e6:	13 c0       	rjmp	.+38     	; 0x350e <vfprintf+0x306>
    34e8:	20 ff       	sbrs	r18, 0
    34ea:	06 c0       	rjmp	.+12     	; 0x34f8 <vfprintf+0x2f0>
    34ec:	5a 2c       	mov	r5, r10
    34ee:	73 14       	cp	r7, r3
    34f0:	18 f4       	brcc	.+6      	; 0x34f8 <vfprintf+0x2f0>
    34f2:	53 0c       	add	r5, r3
    34f4:	57 18       	sub	r5, r7
    34f6:	73 2c       	mov	r7, r3
    34f8:	73 14       	cp	r7, r3
    34fa:	68 f4       	brcc	.+26     	; 0x3516 <vfprintf+0x30e>
    34fc:	b7 01       	movw	r22, r14
    34fe:	80 e2       	ldi	r24, 0x20	; 32
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	2c 87       	std	Y+12, r18	; 0x0c
    3504:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fputc>
    3508:	73 94       	inc	r7
    350a:	2c 85       	ldd	r18, Y+12	; 0x0c
    350c:	f5 cf       	rjmp	.-22     	; 0x34f8 <vfprintf+0x2f0>
    350e:	73 14       	cp	r7, r3
    3510:	10 f4       	brcc	.+4      	; 0x3516 <vfprintf+0x30e>
    3512:	37 18       	sub	r3, r7
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <vfprintf+0x310>
    3516:	31 2c       	mov	r3, r1
    3518:	24 ff       	sbrs	r18, 4
    351a:	12 c0       	rjmp	.+36     	; 0x3540 <vfprintf+0x338>
    351c:	b7 01       	movw	r22, r14
    351e:	80 e3       	ldi	r24, 0x30	; 48
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	2c 87       	std	Y+12, r18	; 0x0c
    3524:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fputc>
    3528:	2c 85       	ldd	r18, Y+12	; 0x0c
    352a:	22 ff       	sbrs	r18, 2
    352c:	17 c0       	rjmp	.+46     	; 0x355c <vfprintf+0x354>
    352e:	21 ff       	sbrs	r18, 1
    3530:	03 c0       	rjmp	.+6      	; 0x3538 <vfprintf+0x330>
    3532:	88 e5       	ldi	r24, 0x58	; 88
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	02 c0       	rjmp	.+4      	; 0x353c <vfprintf+0x334>
    3538:	88 e7       	ldi	r24, 0x78	; 120
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	b7 01       	movw	r22, r14
    353e:	0c c0       	rjmp	.+24     	; 0x3558 <vfprintf+0x350>
    3540:	82 2f       	mov	r24, r18
    3542:	86 78       	andi	r24, 0x86	; 134
    3544:	59 f0       	breq	.+22     	; 0x355c <vfprintf+0x354>
    3546:	21 fd       	sbrc	r18, 1
    3548:	02 c0       	rjmp	.+4      	; 0x354e <vfprintf+0x346>
    354a:	80 e2       	ldi	r24, 0x20	; 32
    354c:	01 c0       	rjmp	.+2      	; 0x3550 <vfprintf+0x348>
    354e:	8b e2       	ldi	r24, 0x2B	; 43
    3550:	27 fd       	sbrc	r18, 7
    3552:	8d e2       	ldi	r24, 0x2D	; 45
    3554:	b7 01       	movw	r22, r14
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fputc>
    355c:	a5 14       	cp	r10, r5
    355e:	38 f4       	brcc	.+14     	; 0x356e <vfprintf+0x366>
    3560:	b7 01       	movw	r22, r14
    3562:	80 e3       	ldi	r24, 0x30	; 48
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fputc>
    356a:	5a 94       	dec	r5
    356c:	f7 cf       	rjmp	.-18     	; 0x355c <vfprintf+0x354>
    356e:	aa 94       	dec	r10
    3570:	f4 01       	movw	r30, r8
    3572:	ea 0d       	add	r30, r10
    3574:	f1 1d       	adc	r31, r1
    3576:	80 81       	ld	r24, Z
    3578:	b7 01       	movw	r22, r14
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fputc>
    3580:	a1 10       	cpse	r10, r1
    3582:	f5 cf       	rjmp	.-22     	; 0x356e <vfprintf+0x366>
    3584:	33 20       	and	r3, r3
    3586:	09 f4       	brne	.+2      	; 0x358a <vfprintf+0x382>
    3588:	51 ce       	rjmp	.-862    	; 0x322c <vfprintf+0x24>
    358a:	b7 01       	movw	r22, r14
    358c:	80 e2       	ldi	r24, 0x20	; 32
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fputc>
    3594:	3a 94       	dec	r3
    3596:	f6 cf       	rjmp	.-20     	; 0x3584 <vfprintf+0x37c>
    3598:	f7 01       	movw	r30, r14
    359a:	86 81       	ldd	r24, Z+6	; 0x06
    359c:	97 81       	ldd	r25, Z+7	; 0x07
    359e:	02 c0       	rjmp	.+4      	; 0x35a4 <vfprintf+0x39c>
    35a0:	8f ef       	ldi	r24, 0xFF	; 255
    35a2:	9f ef       	ldi	r25, 0xFF	; 255
    35a4:	2c 96       	adiw	r28, 0x0c	; 12
    35a6:	e2 e1       	ldi	r30, 0x12	; 18
    35a8:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__>

000035ac <__eerd_word_m162>:
    35ac:	a8 e1       	ldi	r26, 0x18	; 24
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	42 e0       	ldi	r20, 0x02	; 2
    35b2:	50 e0       	ldi	r21, 0x00	; 0
    35b4:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__eerd_blraw_m162>

000035b8 <__eewr_word_m162>:
    35b8:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__eewr_byte_m162>
    35bc:	27 2f       	mov	r18, r23
    35be:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__eewr_r18_m162>

000035c2 <calloc>:
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	86 9f       	mul	r24, r22
    35cc:	80 01       	movw	r16, r0
    35ce:	87 9f       	mul	r24, r23
    35d0:	10 0d       	add	r17, r0
    35d2:	96 9f       	mul	r25, r22
    35d4:	10 0d       	add	r17, r0
    35d6:	11 24       	eor	r1, r1
    35d8:	c8 01       	movw	r24, r16
    35da:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <malloc>
    35de:	ec 01       	movw	r28, r24
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	29 f0       	breq	.+10     	; 0x35ee <calloc+0x2c>
    35e4:	a8 01       	movw	r20, r16
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	70 e0       	ldi	r23, 0x00	; 0
    35ea:	0e 94 08 1b 	call	0x3610	; 0x3610 <memset>
    35ee:	ce 01       	movw	r24, r28
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	08 95       	ret

000035fa <strnlen_P>:
    35fa:	fc 01       	movw	r30, r24
    35fc:	05 90       	lpm	r0, Z+
    35fe:	61 50       	subi	r22, 0x01	; 1
    3600:	70 40       	sbci	r23, 0x00	; 0
    3602:	01 10       	cpse	r0, r1
    3604:	d8 f7       	brcc	.-10     	; 0x35fc <strnlen_P+0x2>
    3606:	80 95       	com	r24
    3608:	90 95       	com	r25
    360a:	8e 0f       	add	r24, r30
    360c:	9f 1f       	adc	r25, r31
    360e:	08 95       	ret

00003610 <memset>:
    3610:	dc 01       	movw	r26, r24
    3612:	01 c0       	rjmp	.+2      	; 0x3616 <memset+0x6>
    3614:	6d 93       	st	X+, r22
    3616:	41 50       	subi	r20, 0x01	; 1
    3618:	50 40       	sbci	r21, 0x00	; 0
    361a:	e0 f7       	brcc	.-8      	; 0x3614 <memset+0x4>
    361c:	08 95       	ret

0000361e <strnlen>:
    361e:	fc 01       	movw	r30, r24
    3620:	61 50       	subi	r22, 0x01	; 1
    3622:	70 40       	sbci	r23, 0x00	; 0
    3624:	01 90       	ld	r0, Z+
    3626:	01 10       	cpse	r0, r1
    3628:	d8 f7       	brcc	.-10     	; 0x3620 <strnlen+0x2>
    362a:	80 95       	com	r24
    362c:	90 95       	com	r25
    362e:	8e 0f       	add	r24, r30
    3630:	9f 1f       	adc	r25, r31
    3632:	08 95       	ret

00003634 <strrev>:
    3634:	dc 01       	movw	r26, r24
    3636:	fc 01       	movw	r30, r24
    3638:	67 2f       	mov	r22, r23
    363a:	71 91       	ld	r23, Z+
    363c:	77 23       	and	r23, r23
    363e:	e1 f7       	brne	.-8      	; 0x3638 <strrev+0x4>
    3640:	32 97       	sbiw	r30, 0x02	; 2
    3642:	04 c0       	rjmp	.+8      	; 0x364c <strrev+0x18>
    3644:	7c 91       	ld	r23, X
    3646:	6d 93       	st	X+, r22
    3648:	70 83       	st	Z, r23
    364a:	62 91       	ld	r22, -Z
    364c:	ae 17       	cp	r26, r30
    364e:	bf 07       	cpc	r27, r31
    3650:	c8 f3       	brcs	.-14     	; 0x3644 <strrev+0x10>
    3652:	08 95       	ret

00003654 <fputc>:
    3654:	0f 93       	push	r16
    3656:	1f 93       	push	r17
    3658:	cf 93       	push	r28
    365a:	df 93       	push	r29
    365c:	18 2f       	mov	r17, r24
    365e:	09 2f       	mov	r16, r25
    3660:	eb 01       	movw	r28, r22
    3662:	8b 81       	ldd	r24, Y+3	; 0x03
    3664:	81 fd       	sbrc	r24, 1
    3666:	03 c0       	rjmp	.+6      	; 0x366e <fputc+0x1a>
    3668:	8f ef       	ldi	r24, 0xFF	; 255
    366a:	9f ef       	ldi	r25, 0xFF	; 255
    366c:	20 c0       	rjmp	.+64     	; 0x36ae <fputc+0x5a>
    366e:	82 ff       	sbrs	r24, 2
    3670:	10 c0       	rjmp	.+32     	; 0x3692 <fputc+0x3e>
    3672:	4e 81       	ldd	r20, Y+6	; 0x06
    3674:	5f 81       	ldd	r21, Y+7	; 0x07
    3676:	2c 81       	ldd	r18, Y+4	; 0x04
    3678:	3d 81       	ldd	r19, Y+5	; 0x05
    367a:	42 17       	cp	r20, r18
    367c:	53 07       	cpc	r21, r19
    367e:	7c f4       	brge	.+30     	; 0x369e <fputc+0x4a>
    3680:	e8 81       	ld	r30, Y
    3682:	f9 81       	ldd	r31, Y+1	; 0x01
    3684:	9f 01       	movw	r18, r30
    3686:	2f 5f       	subi	r18, 0xFF	; 255
    3688:	3f 4f       	sbci	r19, 0xFF	; 255
    368a:	39 83       	std	Y+1, r19	; 0x01
    368c:	28 83       	st	Y, r18
    368e:	10 83       	st	Z, r17
    3690:	06 c0       	rjmp	.+12     	; 0x369e <fputc+0x4a>
    3692:	e8 85       	ldd	r30, Y+8	; 0x08
    3694:	f9 85       	ldd	r31, Y+9	; 0x09
    3696:	81 2f       	mov	r24, r17
    3698:	09 95       	icall
    369a:	89 2b       	or	r24, r25
    369c:	29 f7       	brne	.-54     	; 0x3668 <fputc+0x14>
    369e:	2e 81       	ldd	r18, Y+6	; 0x06
    36a0:	3f 81       	ldd	r19, Y+7	; 0x07
    36a2:	2f 5f       	subi	r18, 0xFF	; 255
    36a4:	3f 4f       	sbci	r19, 0xFF	; 255
    36a6:	3f 83       	std	Y+7, r19	; 0x07
    36a8:	2e 83       	std	Y+6, r18	; 0x06
    36aa:	81 2f       	mov	r24, r17
    36ac:	90 2f       	mov	r25, r16
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	08 95       	ret

000036b8 <__ultoa_invert>:
    36b8:	fa 01       	movw	r30, r20
    36ba:	aa 27       	eor	r26, r26
    36bc:	28 30       	cpi	r18, 0x08	; 8
    36be:	51 f1       	breq	.+84     	; 0x3714 <__ultoa_invert+0x5c>
    36c0:	20 31       	cpi	r18, 0x10	; 16
    36c2:	81 f1       	breq	.+96     	; 0x3724 <__ultoa_invert+0x6c>
    36c4:	e8 94       	clt
    36c6:	6f 93       	push	r22
    36c8:	6e 7f       	andi	r22, 0xFE	; 254
    36ca:	6e 5f       	subi	r22, 0xFE	; 254
    36cc:	7f 4f       	sbci	r23, 0xFF	; 255
    36ce:	8f 4f       	sbci	r24, 0xFF	; 255
    36d0:	9f 4f       	sbci	r25, 0xFF	; 255
    36d2:	af 4f       	sbci	r26, 0xFF	; 255
    36d4:	b1 e0       	ldi	r27, 0x01	; 1
    36d6:	3e d0       	rcall	.+124    	; 0x3754 <__ultoa_invert+0x9c>
    36d8:	b4 e0       	ldi	r27, 0x04	; 4
    36da:	3c d0       	rcall	.+120    	; 0x3754 <__ultoa_invert+0x9c>
    36dc:	67 0f       	add	r22, r23
    36de:	78 1f       	adc	r23, r24
    36e0:	89 1f       	adc	r24, r25
    36e2:	9a 1f       	adc	r25, r26
    36e4:	a1 1d       	adc	r26, r1
    36e6:	68 0f       	add	r22, r24
    36e8:	79 1f       	adc	r23, r25
    36ea:	8a 1f       	adc	r24, r26
    36ec:	91 1d       	adc	r25, r1
    36ee:	a1 1d       	adc	r26, r1
    36f0:	6a 0f       	add	r22, r26
    36f2:	71 1d       	adc	r23, r1
    36f4:	81 1d       	adc	r24, r1
    36f6:	91 1d       	adc	r25, r1
    36f8:	a1 1d       	adc	r26, r1
    36fa:	20 d0       	rcall	.+64     	; 0x373c <__ultoa_invert+0x84>
    36fc:	09 f4       	brne	.+2      	; 0x3700 <__ultoa_invert+0x48>
    36fe:	68 94       	set
    3700:	3f 91       	pop	r19
    3702:	2a e0       	ldi	r18, 0x0A	; 10
    3704:	26 9f       	mul	r18, r22
    3706:	11 24       	eor	r1, r1
    3708:	30 19       	sub	r19, r0
    370a:	30 5d       	subi	r19, 0xD0	; 208
    370c:	31 93       	st	Z+, r19
    370e:	de f6       	brtc	.-74     	; 0x36c6 <__ultoa_invert+0xe>
    3710:	cf 01       	movw	r24, r30
    3712:	08 95       	ret
    3714:	46 2f       	mov	r20, r22
    3716:	47 70       	andi	r20, 0x07	; 7
    3718:	40 5d       	subi	r20, 0xD0	; 208
    371a:	41 93       	st	Z+, r20
    371c:	b3 e0       	ldi	r27, 0x03	; 3
    371e:	0f d0       	rcall	.+30     	; 0x373e <__ultoa_invert+0x86>
    3720:	c9 f7       	brne	.-14     	; 0x3714 <__ultoa_invert+0x5c>
    3722:	f6 cf       	rjmp	.-20     	; 0x3710 <__ultoa_invert+0x58>
    3724:	46 2f       	mov	r20, r22
    3726:	4f 70       	andi	r20, 0x0F	; 15
    3728:	40 5d       	subi	r20, 0xD0	; 208
    372a:	4a 33       	cpi	r20, 0x3A	; 58
    372c:	18 f0       	brcs	.+6      	; 0x3734 <__ultoa_invert+0x7c>
    372e:	49 5d       	subi	r20, 0xD9	; 217
    3730:	31 fd       	sbrc	r19, 1
    3732:	40 52       	subi	r20, 0x20	; 32
    3734:	41 93       	st	Z+, r20
    3736:	02 d0       	rcall	.+4      	; 0x373c <__ultoa_invert+0x84>
    3738:	a9 f7       	brne	.-22     	; 0x3724 <__ultoa_invert+0x6c>
    373a:	ea cf       	rjmp	.-44     	; 0x3710 <__ultoa_invert+0x58>
    373c:	b4 e0       	ldi	r27, 0x04	; 4
    373e:	a6 95       	lsr	r26
    3740:	97 95       	ror	r25
    3742:	87 95       	ror	r24
    3744:	77 95       	ror	r23
    3746:	67 95       	ror	r22
    3748:	ba 95       	dec	r27
    374a:	c9 f7       	brne	.-14     	; 0x373e <__ultoa_invert+0x86>
    374c:	00 97       	sbiw	r24, 0x00	; 0
    374e:	61 05       	cpc	r22, r1
    3750:	71 05       	cpc	r23, r1
    3752:	08 95       	ret
    3754:	9b 01       	movw	r18, r22
    3756:	ac 01       	movw	r20, r24
    3758:	0a 2e       	mov	r0, r26
    375a:	06 94       	lsr	r0
    375c:	57 95       	ror	r21
    375e:	47 95       	ror	r20
    3760:	37 95       	ror	r19
    3762:	27 95       	ror	r18
    3764:	ba 95       	dec	r27
    3766:	c9 f7       	brne	.-14     	; 0x375a <__ultoa_invert+0xa2>
    3768:	62 0f       	add	r22, r18
    376a:	73 1f       	adc	r23, r19
    376c:	84 1f       	adc	r24, r20
    376e:	95 1f       	adc	r25, r21
    3770:	a0 1d       	adc	r26, r0
    3772:	08 95       	ret

00003774 <__eerd_block_m162>:
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22

00003778 <__eerd_blraw_m162>:
    3778:	fc 01       	movw	r30, r24
    377a:	e1 99       	sbic	0x1c, 1	; 28
    377c:	fe cf       	rjmp	.-4      	; 0x377a <__eerd_blraw_m162+0x2>
    377e:	06 c0       	rjmp	.+12     	; 0x378c <__eerd_blraw_m162+0x14>
    3780:	ff bb       	out	0x1f, r31	; 31
    3782:	ee bb       	out	0x1e, r30	; 30
    3784:	e0 9a       	sbi	0x1c, 0	; 28
    3786:	31 96       	adiw	r30, 0x01	; 1
    3788:	0d b2       	in	r0, 0x1d	; 29
    378a:	0d 92       	st	X+, r0
    378c:	41 50       	subi	r20, 0x01	; 1
    378e:	50 40       	sbci	r21, 0x00	; 0
    3790:	b8 f7       	brcc	.-18     	; 0x3780 <__eerd_blraw_m162+0x8>
    3792:	08 95       	ret

00003794 <__eewr_byte_m162>:
    3794:	26 2f       	mov	r18, r22

00003796 <__eewr_r18_m162>:
    3796:	e1 99       	sbic	0x1c, 1	; 28
    3798:	fe cf       	rjmp	.-4      	; 0x3796 <__eewr_r18_m162>
    379a:	9f bb       	out	0x1f, r25	; 31
    379c:	8e bb       	out	0x1e, r24	; 30
    379e:	2d bb       	out	0x1d, r18	; 29
    37a0:	0f b6       	in	r0, 0x3f	; 63
    37a2:	f8 94       	cli
    37a4:	e2 9a       	sbi	0x1c, 2	; 28
    37a6:	e1 9a       	sbi	0x1c, 1	; 28
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	01 96       	adiw	r24, 0x01	; 1
    37ac:	08 95       	ret

000037ae <__divmodsi4>:
    37ae:	05 2e       	mov	r0, r21
    37b0:	97 fb       	bst	r25, 7
    37b2:	1e f4       	brtc	.+6      	; 0x37ba <__divmodsi4+0xc>
    37b4:	00 94       	com	r0
    37b6:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__negsi2>
    37ba:	57 fd       	sbrc	r21, 7
    37bc:	07 d0       	rcall	.+14     	; 0x37cc <__divmodsi4_neg2>
    37be:	0e 94 40 1c 	call	0x3880	; 0x3880 <__udivmodsi4>
    37c2:	07 fc       	sbrc	r0, 7
    37c4:	03 d0       	rcall	.+6      	; 0x37cc <__divmodsi4_neg2>
    37c6:	4e f4       	brtc	.+18     	; 0x37da <__divmodsi4_exit>
    37c8:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <__negsi2>

000037cc <__divmodsi4_neg2>:
    37cc:	50 95       	com	r21
    37ce:	40 95       	com	r20
    37d0:	30 95       	com	r19
    37d2:	21 95       	neg	r18
    37d4:	3f 4f       	sbci	r19, 0xFF	; 255
    37d6:	4f 4f       	sbci	r20, 0xFF	; 255
    37d8:	5f 4f       	sbci	r21, 0xFF	; 255

000037da <__divmodsi4_exit>:
    37da:	08 95       	ret

000037dc <__negsi2>:
    37dc:	90 95       	com	r25
    37de:	80 95       	com	r24
    37e0:	70 95       	com	r23
    37e2:	61 95       	neg	r22
    37e4:	7f 4f       	sbci	r23, 0xFF	; 255
    37e6:	8f 4f       	sbci	r24, 0xFF	; 255
    37e8:	9f 4f       	sbci	r25, 0xFF	; 255
    37ea:	08 95       	ret

000037ec <__muluhisi3>:
    37ec:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <__umulhisi3>
    37f0:	a5 9f       	mul	r26, r21
    37f2:	90 0d       	add	r25, r0
    37f4:	b4 9f       	mul	r27, r20
    37f6:	90 0d       	add	r25, r0
    37f8:	a4 9f       	mul	r26, r20
    37fa:	80 0d       	add	r24, r0
    37fc:	91 1d       	adc	r25, r1
    37fe:	11 24       	eor	r1, r1
    3800:	08 95       	ret

00003802 <__mulshisi3>:
    3802:	b7 ff       	sbrs	r27, 7
    3804:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__muluhisi3>

00003808 <__mulohisi3>:
    3808:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__muluhisi3>
    380c:	82 1b       	sub	r24, r18
    380e:	93 0b       	sbc	r25, r19
    3810:	08 95       	ret

00003812 <__prologue_saves__>:
    3812:	2f 92       	push	r2
    3814:	3f 92       	push	r3
    3816:	4f 92       	push	r4
    3818:	5f 92       	push	r5
    381a:	6f 92       	push	r6
    381c:	7f 92       	push	r7
    381e:	8f 92       	push	r8
    3820:	9f 92       	push	r9
    3822:	af 92       	push	r10
    3824:	bf 92       	push	r11
    3826:	cf 92       	push	r12
    3828:	df 92       	push	r13
    382a:	ef 92       	push	r14
    382c:	ff 92       	push	r15
    382e:	0f 93       	push	r16
    3830:	1f 93       	push	r17
    3832:	cf 93       	push	r28
    3834:	df 93       	push	r29
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
    383a:	ca 1b       	sub	r28, r26
    383c:	db 0b       	sbc	r29, r27
    383e:	0f b6       	in	r0, 0x3f	; 63
    3840:	f8 94       	cli
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	cd bf       	out	0x3d, r28	; 61
    3848:	09 94       	ijmp

0000384a <__epilogue_restores__>:
    384a:	2a 88       	ldd	r2, Y+18	; 0x12
    384c:	39 88       	ldd	r3, Y+17	; 0x11
    384e:	48 88       	ldd	r4, Y+16	; 0x10
    3850:	5f 84       	ldd	r5, Y+15	; 0x0f
    3852:	6e 84       	ldd	r6, Y+14	; 0x0e
    3854:	7d 84       	ldd	r7, Y+13	; 0x0d
    3856:	8c 84       	ldd	r8, Y+12	; 0x0c
    3858:	9b 84       	ldd	r9, Y+11	; 0x0b
    385a:	aa 84       	ldd	r10, Y+10	; 0x0a
    385c:	b9 84       	ldd	r11, Y+9	; 0x09
    385e:	c8 84       	ldd	r12, Y+8	; 0x08
    3860:	df 80       	ldd	r13, Y+7	; 0x07
    3862:	ee 80       	ldd	r14, Y+6	; 0x06
    3864:	fd 80       	ldd	r15, Y+5	; 0x05
    3866:	0c 81       	ldd	r16, Y+4	; 0x04
    3868:	1b 81       	ldd	r17, Y+3	; 0x03
    386a:	aa 81       	ldd	r26, Y+2	; 0x02
    386c:	b9 81       	ldd	r27, Y+1	; 0x01
    386e:	ce 0f       	add	r28, r30
    3870:	d1 1d       	adc	r29, r1
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	f8 94       	cli
    3876:	de bf       	out	0x3e, r29	; 62
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	cd bf       	out	0x3d, r28	; 61
    387c:	ed 01       	movw	r28, r26
    387e:	08 95       	ret

00003880 <__udivmodsi4>:
    3880:	a1 e2       	ldi	r26, 0x21	; 33
    3882:	1a 2e       	mov	r1, r26
    3884:	aa 1b       	sub	r26, r26
    3886:	bb 1b       	sub	r27, r27
    3888:	fd 01       	movw	r30, r26
    388a:	0d c0       	rjmp	.+26     	; 0x38a6 <__udivmodsi4_ep>

0000388c <__udivmodsi4_loop>:
    388c:	aa 1f       	adc	r26, r26
    388e:	bb 1f       	adc	r27, r27
    3890:	ee 1f       	adc	r30, r30
    3892:	ff 1f       	adc	r31, r31
    3894:	a2 17       	cp	r26, r18
    3896:	b3 07       	cpc	r27, r19
    3898:	e4 07       	cpc	r30, r20
    389a:	f5 07       	cpc	r31, r21
    389c:	20 f0       	brcs	.+8      	; 0x38a6 <__udivmodsi4_ep>
    389e:	a2 1b       	sub	r26, r18
    38a0:	b3 0b       	sbc	r27, r19
    38a2:	e4 0b       	sbc	r30, r20
    38a4:	f5 0b       	sbc	r31, r21

000038a6 <__udivmodsi4_ep>:
    38a6:	66 1f       	adc	r22, r22
    38a8:	77 1f       	adc	r23, r23
    38aa:	88 1f       	adc	r24, r24
    38ac:	99 1f       	adc	r25, r25
    38ae:	1a 94       	dec	r1
    38b0:	69 f7       	brne	.-38     	; 0x388c <__udivmodsi4_loop>
    38b2:	60 95       	com	r22
    38b4:	70 95       	com	r23
    38b6:	80 95       	com	r24
    38b8:	90 95       	com	r25
    38ba:	9b 01       	movw	r18, r22
    38bc:	ac 01       	movw	r20, r24
    38be:	bd 01       	movw	r22, r26
    38c0:	cf 01       	movw	r24, r30
    38c2:	08 95       	ret

000038c4 <__umulhisi3>:
    38c4:	a2 9f       	mul	r26, r18
    38c6:	b0 01       	movw	r22, r0
    38c8:	b3 9f       	mul	r27, r19
    38ca:	c0 01       	movw	r24, r0
    38cc:	a3 9f       	mul	r26, r19
    38ce:	70 0d       	add	r23, r0
    38d0:	81 1d       	adc	r24, r1
    38d2:	11 24       	eor	r1, r1
    38d4:	91 1d       	adc	r25, r1
    38d6:	b2 9f       	mul	r27, r18
    38d8:	70 0d       	add	r23, r0
    38da:	81 1d       	adc	r24, r1
    38dc:	11 24       	eor	r1, r1
    38de:	91 1d       	adc	r25, r1
    38e0:	08 95       	ret

000038e2 <_exit>:
    38e2:	f8 94       	cli

000038e4 <__stop_program>:
    38e4:	ff cf       	rjmp	.-2      	; 0x38e4 <__stop_program>
